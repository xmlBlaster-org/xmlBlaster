<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='admin.events' type='NEW' prio='LOW' status='CLOSED'>
   <topic>A event plugin which catches for example logging errors and dispatches them to a given email address or another sink.</topic>
   <description>
      <h2>Event capture and forwarding overview</h2>
      <p>
      This is a configurable event capture plugin which has for example the characteristics of sending an email to a given 
      address when an error is logged. But this plugins offers many more xmlBlaster internal events to capture and offers
      to send the events to other destinations like JMX notifications or send them as ordinary xmlBlaster messages.
      </p>
    <p>
    This is useful for clients or administrators to be notified on certain core events.
    </p>

      <center><img src='admin.events.png' border='0' alt='JMX - xmlBlaster core events' /></center>

      <p class="celltitel">Example setup</p>
      <p>Here is an example setup configured in <code>xmlBlasterPlugins.xml</code>
      to give you a first idea about what you can do.</p>
<pre class="BORDER">
&lt;plugin id='EventPlugin' className='org.xmlBlaster.engine.EventPlugin'&gt;
   &lt;action do='LOAD' onStartupRunlevel='7' sequence='11'
                        onFail='resource.configuration.pluginFailed'/&gt;
   &lt;action do='STOP' onShutdownRunlevel='6' sequence='11'/&gt;
   
   <font color="blue">&lt;attribute id='eventTypes'>
      logging/severe/*,
      logging/warning/*,
      service/RunlevelManager/event/startupRunlevel8,
      client/*/session/*/event/connect
   &lt;/attribute></font>
   
   <font color="red">&lt;attribute id='destination.smtp'>
      mail.smtp.from=xmlBlaster@localhost,
      mail.smtp.to=demo@localhost,
      mail.collectMillis=10000
   &lt;/attribute></font>

   <font color="red">&lt;attribute id='destination.jmx'/></font>
&lt;/plugin&gt;
</pre>
 
 <p>
 The first two &lt;action> tags just configure the plugin itself to be loaded by xmlBlaster on startup
 and to be removed again on shutdown</p>
 <p>
 In the above example an email (see <font color="red"><code>&lt;attribute id='destination.smtp'/></code></font>) 
 is send if any <font color="blue">logging/severe/*</font> (==log.error) or <font color="blue">logging/warning/*</font> occurs.
 Further an event is emitted on xmlBlaster startup in run level 8 (see <font color="blue">service/RunlevelManager/event/startupRunlevel8</font>)
 and if a new client logs in (see <font color="blue">client/*/session/*/event/connect</font>).
 Those events are send as JMX notifications as well (see <font color="red"><code>&lt;attribute id='destination.jmx'/></code></font>).
 <br />Adding <font color="red"><code>&lt;attribute id='destination.publish'/></code></font> would send
 the event as a xmlBlaster message as well, but take care to not send logging events
 as such messages will most certainly loop (if they log something they will trigger another message and so forth)!
 </p>


      <p id="eventTypes" class="celltitel">List of supported event sources</p>
 <p>
 Note that this plugin must be active on
 a runlevel early enough depending on the event you want to capture.
 </p>
 <p>Those event types can be added to <code><font color="blue">&lt;attribute id='eventTypes'>...&lt;/attribute></font></code>
 markup as a comma separated list, like this you choose exactly the events you want.</p>
 <table class="BORDER" border="1">
      <tr>
      <th>Event Name</th>
      <th>Description</th>
      </tr>
 <tr><td>logging/severe/*</td><td>Captures all errors logged, avoid to use this with the publish message sink as this could produce more logging/severe and loop</td></tr>
 <tr><td>logging/warning/*</td><td>Captures all warnings logged, never use this with the publish message sink as this could produce more logging/warning and loop</td></tr>
 <tr><td>service/RunlevelManager/event/startupRunlevel9</td><td>Captures event when startup runlevel reaches 9 (RUNNING), any other runlevel is possible as well (note that this plugin must be active beforehand)</td></tr>
 <tr><td>service/RunlevelManager/event/shutdownRunlevel8</td><td>Captures event when shutdown runlevel reaches 8 (RUNNING_RPE), any other runlevel is possible as well (note that this plugin must be active beforehand)</td></tr>
 <tr><td>client/*/session/*/event/connect</td><td>Captures event on client login (all clients)</td></tr>
 <tr><td>client/[subjectId]/session/[publicSessionId]/event/connect</td><td>Captures event on given client login, e.g. "client/joe/session/1/event/connect". The combination of publicSessionId=* and/or subjectId=* is supported.</td></tr>
 <tr><td>client/*/session/*/event/disconnect</td><td>Captures event on client logout (all clients)</td></tr>
 <tr><td>client/[subjectId]/session/[publicSessionId]/event/disconnect</td><td>Captures event on given client logout, e.g. "client/joe/session/1/event/disconnect". The combination of publicSessionId=* and/or subjectId=* is supported.</td></tr>
 <tr><td>topic/*/event/subscribe</td><td>Captures if subscribe() is invoked (on all topics)</td></tr>
 <tr><td>topic/[topicId]/event/subscribe</td><td>Captures if subscribe() on the specified topic is invoked</td></tr>
 <tr><td>client/[subjectId]/session/[publicSessionId]/event/subscribe</td><td>Captures if the given client has invoked subscribe(), e.g. "client/joe/session/1/event/subscribe". The publicSessionId can be a wildcard "*".</td></tr>
 <tr><td>topic/*/event/unSubscribe</td><td>Captures if unSubscribe() is invoked (on all topics)</td></tr>
 <tr><td>topic/[topicId]/event/unSubscribe</td><td>Captures if unSubscribe() on the specified topic is invoked</td></tr>
 <tr><td>client/[subjectId]/session/[publicSessionId]/event/unSubscribe</td><td>Captures if the given client has invoked unSubscribe(), e.g. "client/joe/session/1/event/unSubscribe". The publicSessionId can be a wildcard "*".</td></tr>
 <tr><td>topic/*/event/alive</td><td>Captures if a topic is created (on all topics)</td></tr>
 <tr><td>topic/[topicId]/event/alive</td><td>Captures event if the given topic is created, e.g. "topic/hello/event/alive"</td></tr>
 <tr><td>topic/*/event/dead</td><td>Captures if a topic is destroyed (on all topics)</td></tr>
 <tr><td>topic/[topicId]/event/dead</td><td>Captures event if the given topic is destroyed, e.g. "topic/hello/event/dead"</td></tr>
 <tr><td>client/[subjectId]/session/[publicSessionId]/event/callbackState</td><td>Captures event if the client callback server goes to ALIVE or POLLING, e.g. "client/joe/session/1/event/callbackState". Note that the status change to DEAD is currently not implemented (it is reported as POLLING). The subjectId and/or the publicSessionId can be a wildcard "*".</td></tr>
 <tr><td>client/*/session/*/event/remoteProperties</td><td>Captures event when the remote properties of a client change (all clients, triggered when a client publishes a message to topic <code>__sys__remoteProperties</code>)</td></tr>
 <tr><td>lowMemoryDetection</td><td>This is not directly supported. Note however that on JDK >= 1.5 the LowMemoryDetector does a logging/severe if the memory consumption of the JVM reaches 90% (see -xmlBlaster/jmx/memoryThresholdFactor setting). Please use 'logging/severe/*' to detect this.</td></tr>
 <tr><td>heartbeat.360000</td><td>Sends a heartbeat notification every given milli seconds. Setting <code>heartbeat</code> without millis specified defaults to one notification per day (86400000 millis).</td></tr>
 <tr>
    <td>client/[subjectId]/session/[publicSessionId]/queue/callback/event/threshold.90%</td>
    <td>
        Sends an event when the specified threshold for the given queue is reached. After the first event, additional
        increasing of the queue will only result in an event if the queue has first decreased under the threshold again.
        Only the main queues send events, i.e. if you have configured a CACHE having a RAM queue as its transient queue
        and a JDBC queue as its persistence, then only the CACHE queue itself will send an event. This can be sent for
        all types of destination (email, message, jmx ...).
        This behaviour is for all queue events (also topic and subject). 
    
        As subjectId and publicSessionId you can either pass a specific value or a '*' (star) as  wildcard. 
        Specific values are always stronger than wildcards. A wildcard on the publicSessionId and a specific 
        value on subjectId are stronger than the opposite. As a threshold you can either specify an absolute 
        value or a percentage (values higher than the max value of the queue result in a warning and the 
        threshold is set to the max value of the queue (100%).
    </td>
 </tr>
 <tr>
    <td>client/[subjectId]/queue/subject/event/threshold.90%</td>
    <td>The behaviour described for the callback queues is also valid here.
        As subjectId you can either pass a specific value or a '*' (star) as  wildcard. 
        Specific values are always stronger than wildcards. As a threshold you can either specify an absolute 
        value or a percentage (values higher than the max value of the queue result in a warning and the 
        threshold is set to the max value of the queue (100%).
    </td>
 </tr>
 <tr>
    <td>topic/[topicId]/queue/history/event/threshold.90%</td>
    <td>The behaviour described for the callback queues is also valid here.
        As topicId you can either pass a specific value or a '*' (star) as  wildcard. 
        Specific values are always stronger than wildcards. As a threshold you can either specify an absolute 
        value or a percentage (values higher than the max value of the queue result in a warning and the 
        threshold is set to the max value of the queue (100%).
    </td>
 </tr>
 <tr>
    <td>topic/[topicId]/persistence/msgUnitStore/event/threshold.90%</td>
    <td>The behaviour described for the history queues is also valid here.
        As topicId you can either pass a specific value or a '*' (star) as  wildcard. 
        Specific values are always stronger than wildcards. As a threshold you can either specify an absolute 
        value or a percentage (values higher than the max value of the queue result in a warning and the 
        threshold is set to the max value of the queue (100%).
    </td>
 </tr>
 </table>

      <p id="eventSinks" class="celltitel">List of supported event sinks</p>
      <p>Once an event occurs it is forwarded to one or multiple of the listed sinks described in the following table,
      see the configuration tags <font color="red">&lt;attribute id='destination.XXX'>...&lt;/attribute></font>.</p>
 <table class="BORDER" border="1">
      <tr>
      <th>Sink Name</th>
      <th>Description</th>
      </tr>
 <tr>
    <td>destination.smtp</td>
    <td>Sends an email about the occurred event.
    Collects multiple events to one mail depending on configuration.
    You need to configure at least the email address parameters
    <code>mail.stmp.from</code> and <code>mail.smtp.to</code> and
    activate the <code>SmtpClient</code> plugin in <code>xmlBlasterPlugins.xml</code>.
    If you have a reasonable email provider you can configure it to 
    forward the mail as an SMS (my provider offers this feature).
    </td>
 </tr>
 <tr>
    <td>destination.publish</td>
    <td>Publishes an xmlBlaster message which contains the occurred event,
     currently all messages are published into a topic named '__sys__Event'.
     On demand, you can configure the PublishKey and PublishQos as in this example:
<pre class="BORDER">
&lt;attribute id='destination.publish'>
   "publish.key=&lt;key oid='__sys__Logout'/>",
   "publish.qos=&lt;qos>&lt;expiration lifeTime='0'/>&lt;topic destroyDelay='30000'>
                        &lt;persistence relating='msgUnitStore' type='RAM'/>
                        &lt;queue relating='history' type='RAM'/>&lt;/topic>&lt;/qos>",
   "publish.content=$_{eventType}"
&lt;/attribute>
</pre>
     The separator between the properties <code>publish.key</code>,  <code>publish.qos</code>,  <code>publish.content</code>
     is a comma ','. If you have a comma in your markup, you can escape it with double quotes '"'.
     </td>
 </tr>
 <tr>
    <td>destination.jmx</td>
    <td>Emits an JMX notification for the occurred event.
     Open 'jconsole' and 'MBeans->org.xmlBlaster->node->xxx->service->EventPlugin[yyy]'
     there choose the 'Notifications[0]' tabulator and click the 'Subscribe' button.
     Now you receive the configured events.</td>
 </tr>
 </table>
 
      <p class="celltitel">Additional notes</p>
 <p>
 We access the xmlBlaster core directly to register the supported internal
 events, hence this plugin works only if it is in the same virtual
 machine (JVM) as the xmlBlaster server.
 </p>
 <p>
 All events don't throw any exceptions as this plugin should have
 no influence on the regular work-flow of xmlBlaster.
 </p>

      <p class="celltitel">Email sink features</p>
      <p>
      A delay can be defined to let the dispatcher wait between sent messages, this way, in case of many
      errors, several errors can be dispatched in the same email, avoiding unnecessary noise. In other
      words, if an error occurs an email is sent immediately, but after this email until the next email
      is sent the dispatcher sleeps.
      </p>
   </description>

   <example lang="XML" type="HTML">
      <p id="loginLogout" class="celltitel">Example sending client login/logout events</p>
      <p>Here is an example how to setup <code>xmlBlasterPlugins.xml</code>
      with an JMX and publish data sink. They all will receive
      events on coming and going clients.
      </p>
<pre class="BORDER">
&lt;plugin id='messageEvents' className='org.xmlBlaster.engine.EventPlugin'>
   &lt;action do='LOAD' onStartupRunlevel='8' sequence='4'/>
   &lt;action do='STOP' onShutdownRunlevel='7' sequence='4'/>
   <font color="blue">&lt;attribute id='eventTypes'>client/*/session/*/event/connect,client/*/session/*/event/disconnect&lt;/attribute></font>
   <font color="red">&lt;attribute id='destination.publish'/></font>
   <font color="red">&lt;attribute id='destination.jmx'/></font>
&lt;/plugin>
</pre>
   <h3>JMX Jconsole screenshot</h3>
   <p>The following screen shot shows the JMX events received by <code>jconsole</code>
   when a client logs in and logs out again</p>
   <p>
      <center><img src='admin.events.jmx.png' border='0' alt='JMX - xmlBlaster jconsole notification screenshot' /></center>
      </p>
   <h3>Received messages</h3>
   <p>A client subscribing to <code>__sys__Event</code> receives messages similar to the following.
   </p>
<pre class="BORDER">
 &lt;key oid='__sys__Event' contentMimeExtended='1.0'>
  &lt;org.xmlBlaster>&lt;event/>&lt;/org.xmlBlaster>
 &lt;/key>

 &lt;content size='33'>client/Publisher/-3/event/connect&lt;/content>
 
 &lt;qos>
  &lt;clientProperty name='_nodeId'>heron&lt;/clientProperty>
  &lt;clientProperty name='_subjectId'>Publisher&lt;/clientProperty>
  &lt;clientProperty name='_publicSessionId' type='long'>-3&lt;/clientProperty>
  &lt;clientProperty name='_absoluteName'>/node/heron/client/Publisher/-3&lt;/clientProperty>
  &lt;clientProperty name='_eventType'>client/Publisher/-3/event/connect&lt;/clientProperty>
  &lt;clientProperty name='_summary'>Login of client /node/heron/client/Publisher/-3&lt;/clientProperty>
  &lt;clientProperty name='_description'>Login of client /node/heron/client/Publisher/-3&lt;/clientProperty>
 &lt;/qos>
</pre>
   <p>The content carries the <code>eventType</code> which was the original reason for the message.</p>

   <p/>
   <p>If you want to receive the login/logout events like done in xmlBlaster before version 1.3, please read the
   <a href="engine.LoginLogoutEvent.html" target="others">engine.LoginLogoutEvent requirement</a>.
   In the example section is a configuration which can be used to simulate the old behaviour</p>


   </example>

   <example lang="XML" type="HTML">
      <p id="sms" class="celltitel">Example sending small emails capable for SMS</p>
      <p>Here is an example how to setup <code>xmlBlasterPlugins.xml</code>
      to send tiny emails which are useful to be forwarded as SMS on your mobile phone.
      You will be notified when an error occurs or when xmlBlaster is shutdown.
      </p>
      <p>To send emails you also need to configure the SmtpClient plugin as shown below,
      please set the <font color="green"><code>mail.smtp.url</code></font> variable to find your mail transfer agent (MTA).
      Additionally please adjust all email addresses to valid ones in your environment.</p>
<pre class="BORDER">
&lt;plugin id='smtp' className='org.xmlBlaster.util.protocol.email.SmtpClient'>
   &lt;action do='LOAD' onStartupRunlevel='4' sequence='7' 
            onFail='resource.configuration.pluginFailed'/>
   &lt;action do='STOP' onShutdownRunlevel='4' sequence='9'/>   
   &lt;attribute id='mail.smtp.url'><font color="green">smtp://xmlBlaster:xmlBlaster@localhost:25</font>&lt;/attribute>
&lt;/plugin>

&lt;plugin id='smallEmergencyEvents' className='org.xmlBlaster.engine.EventPlugin'>
   &lt;action do='LOAD' onStartupRunlevel='8' sequence='9'/>
   &lt;action do='STOP' onShutdownRunlevel='7' sequence='9'/>

   <font color="blue">&lt;attribute id='eventTypes'>logging/severe/*,service/RunlevelManager/event/shutdownRunlevel8&lt;/attribute></font>
   <font color="red">&lt;attribute id='destination.smtp'>
      mail.subject=xmlBlaster $_{eventType},
      mail.content=$_{datetime} $_{id} $_{errorCode} $_{summary},
      mail.contentSeparator=${line.separator}${line.separator},
      mail.smtp.from=xmlBlaster@somecompany.com,
      mail.smtp.to=admin@somecompany.com,
      "mail.smtp.cc=xmlBlaster@et.universe,somebody@somewhere.xx",
      mail.collectMillis=360000
   &lt;/attribute></font>
&lt;/plugin>
      </pre>
   <h3>Email GUI screenshot</h3>
   <p>The following screen shot shows the email received
   when xmlBlaster shuts down:</p>
   <p>
      <center><img src='admin.events.sms.png' border='0' alt='JMX - xmlBlaster jconsole notification screenshot' /></center>
      </p>
      <p>The mail send is very small and could be forwarded as an SMS to your mobile phone.
      </p>
   </example>


   <example lang="XML" type="HTML">
      <p id="sms" class="celltitel">Example sending heartbeat status messages</p>
      <p>Here is an example how to setup <code>xmlBlasterPlugins.xml</code>
      to send a heartbeat email every 12 hours. It contains some important status information
      about the xmlBlaster server with XML markup.</p>
      <p>To send emails you also need to configure the SmtpClient plugin as shown below,
      please set the <font color="green"><code>mail.smtp.url</code></font> variable to find your mail transfer agent (MTA).
      Additionally please adjust all email addresses to valid ones in your environment.</p>
<pre class="BORDER">
&lt;plugin id='smtp' className='org.xmlBlaster.util.protocol.email.SmtpClient'>
   &lt;action do='LOAD' onStartupRunlevel='4' sequence='7' 
            onFail='resource.configuration.pluginFailed'/>
   &lt;action do='STOP' onShutdownRunlevel='4' sequence='9'/>   
   &lt;attribute id='mail.smtp.url'><font color="green">smtp://xmlBlaster:xmlBlaster@localhost:25</font>&lt;/attribute>
&lt;/plugin>

&lt;plugin create='true' id='heartbeatEmail' className='org.xmlBlaster.engine.EventPlugin'>
   &lt;action do='LOAD' onStartupRunlevel='8' sequence='14'/>
   &lt;action do='STOP' onShutdownRunlevel='7' sequence='14'/>
   <font color="blue">&lt;attribute id='eventTypes'>
         logging/severe/*,
       heartbeat.43200000
   &lt;/attribute></font>
   <font color="red">&lt;attribute id='destination.smtp'>
      mail.smtp.from=xmlBlaster@localhost,
      mail.smtp.to=xmlblasterStatus@someadmin.somecompany.eu,
      mail.content=$_{xml},
      mail.collectMillis=0
   &lt;/attribute></font>
&lt;/plugin>
      </pre>

      <p>The value 43200000 are milliseconds (== 12 hours). Additionally we have configured
      to send a heartbeat if a severe logging occurs. 
      The email subject is <code>[XmlBlaster event: heartbeat.43200000] heron</code>
      and here is an example message which is transported in the body of the email, it
      replaces the <code>$_{xml}</code> placeholder:</p>

<pre class="BORDER">
 &lt;node id='heron'>
  &lt;uptime>18&lt;/uptime>
  &lt;runlevel>9&lt;/runlevel>
  &lt;instanceId>/xmlBlaster/node/heron/instanceId/1136980484733&lt;/instanceId>
  &lt;version>1.1&lt;/version>
  &lt;revisionNumber>14569:14573M&lt;/revisionNumber>
  &lt;freeMem>2647416&lt;/freeMem>
  &lt;maxFreeMem>68969848&lt;/maxFreeMem>
  &lt;maxMem>72876032&lt;/maxMem>
  &lt;usedMem>3906184&lt;/usedMem>
  &lt;serverTimestamp>2006-01-11 12:55:03.59&lt;/serverTimestamp>
  &lt;numClients>2&lt;/numClients>
  &lt;clientList>__sys__jdbc,__RequestBroker_internal[heron],joe&lt;/clientList>
  &lt;client id='joe'>
   &lt;session id='1'>
    &lt;state>ALIVE&lt;/state>
    &lt;remoteProperty name='logging/error'>Some severe problem occurred&lt;/remoteProperty>
   &lt;/session>
  &lt;/client>
  &lt;numTopics>1&lt;/numTopics>
  &lt;topicList>__sys__Event&lt;/topicList>
  &lt;numGet>0&lt;/numGet>
  &lt;numPublish>2&lt;/numPublish>
  &lt;numUpdate>0&lt;/numUpdate>
  &lt;lastWarning>[HtPasswd] Security risk, no access control:
        The passwd file is switched off with 'Security.Server.Plugin.htpasswd.secretfile=NONE'
  &lt;/lastWarning>
  &lt;lastError>&lt;/lastError>
  &lt;versionInfo>version=1.1,revision=14569:14573M,os.name=Linux,os.version=2.6.13-15-default,
                  java.vm.vendor=Sun Microsystems Inc.,java.vm.version=1.5.0_05-b05,os.arch=i386,
                  build.timestamp=01/11/2006 12:52 PM,build.java.vendor=Sun Microsystems Inc.,
                  build.java.version=1.5.0_05
  &lt;/versionInfo>
  &lt;see>http://www.xmlBlaster.org/xmlBlaster/doc/requirements/admin.events.html&lt;/see>
 &lt;/node>
</pre>
   <p>Note that the markup is similar to that described in the 
               <a href="admin.commands.html"
             target="others">admin.commands requirement</a>.
   </p>

   </example>


   <example lang="XML" type="HTML">
      <p id="messageFormat" class="celltitel">Examples of published messages</p>
      <p>The following list shows typical messages send by this plugin.
      Note the clientProperty names used.
      </p>
<pre class="BORDER">

 &lt;key oid='__sys__Event' contentMimeExtended='1.0'>
  &lt;org.xmlBlaster>&lt;event/>&lt;/org.xmlBlaster>
 &lt;/key>
 &lt;content size='23'>topic/*/event/subscribe&lt;/content>
 &lt;qos>
  &lt;clientProperty name='_subscriptionId'>__subId:heron-1136812798913000000&lt;/clientProperty>
  &lt;clientProperty name='_nodeId'>heron&lt;/clientProperty>
  &lt;clientProperty name='_description' encoding='base64'>...&lt;/clientProperty>
  &lt;clientProperty name='_eventType'>topic/*/event/subscribe&lt;/clientProperty>
  &lt;clientProperty name='_summary'>New subscription of client /node/heron/client/joe/1 
              on topic airport&lt;/clientProperty>
  &lt;clientProperty name='_publicSessionId' type='long'>1&lt;/clientProperty>
  &lt;clientProperty name='_subjectId'>joe&lt;/clientProperty>
  &lt;clientProperty name='_absoluteName'>/node/heron/client/joe/1&lt;/clientProperty>
  &lt;clientProperty name='_topicId'>airport&lt;/clientProperty>
 &lt;/qos>


 &lt;key oid='__sys__Event' contentMimeExtended='1.0'>
  &lt;org.xmlBlaster>&lt;event/>&lt;/org.xmlBlaster>
 &lt;/key>
 &lt;content size='47'>service/RunlevelManager/event/shutdownRunlevel8&lt;/content>
 &lt;qos>
  &lt;clientProperty name='_nodeId'>heron&lt;/clientProperty>
  &lt;clientProperty name='_description'>shutdown from RUNNING to RUNNING_PRE&lt;/clientProperty>
  &lt;clientProperty name='_eventType'>service/RunlevelManager/event/shutdownRunlevel8&lt;/clientProperty>
  &lt;clientProperty name='_summary'>Shutdown to RUNNING_PRE (8)&lt;/clientProperty>
 &lt;/qos>
</pre>
   </example>


   <example lang="XML" type="HTML">
      <p id="remoteProperty" class="celltitel">Observing the remote status of connected clients</p>
      <p>Clients can publish their status to xmlBlaster and this status can be observed by the EventPlugin framework.
      For example a client can choose to send its error logging to xmlBlaster or other fatal situations
      like low memory or lost database connections.
      The remoteProperties are available with JMX, so you can easily observe or manipulate them with the jconsole.
      </p>
      <p>
      To do this the steps are as follows:
      </p>
      <ol>
      <li>The client publishes a message to the topic <i>__sys__remoteProperties</i></li>
      <li>The PublishQos of the messages contains any number of client properties</li>
      <li>Those client properties are kept in RAM by the xmlBlaster SessionInfo instance to this client, they are named <i>remoteProperties</i></li>
      <li>If configured, a heartbeat EventPlugin will send those properties to any configured sink</li>
      <li>Note: You can use the <code>jconsole</code> GUI to see the current remote properties in the running server
          and manipulate them manually (add another, remove all). Access over telnet works as well.</li>
      <li>Note: Access over telnet works as well. Start a telnet session (see requirement admin.telnet)
                and type (with the connected 'publish' client from below):
          <code>get client/publish/1/?remoteProperties</code> or
          <code>set client/publish/1/?addRemoteProperty=someKey&amp;someValue</code> or
          <code>get client/publish/1/?clearRemoteProperties</code></li>
      <li>Note: On xmlBlaster restart those properties are lost, the client needs to resend them if desired</li>
      </ol>

      <p>Here is a simple java client sending remote properties to xmlBlaster, use this to start playing with the feature:</p> 
      <p>Start xmlBlaster with this <code>xmlBlasterPlugins.xml</code> setting</p>
<pre class="BORDER">
&lt;plugin create='true' id='heartbeatPropertyEvent' className='org.xmlBlaster.engine.EventPlugin'>
   &lt;action do='LOAD' onStartupRunlevel='8' sequence='14'/>
   &lt;action do='STOP' onShutdownRunlevel='7' sequence='14'/>
   <font color="blue">&lt;attribute id='eventTypes'>
        client/*/session/*/event/remoteProperties,
        heartbeat.43200000
   &lt;/attribute></font>
   <font color="red">
   &lt;attribute id='destination.publish'>
      publish.content=$_{xml}
   &lt;/attribute>
   &lt;attribute id='destination.smtp'>
      mail.smtp.from=xmlBlaster@localhost,
      mail.smtp.to=blue8@localhost,
      mail.content=$_{xml},
      mail.collectMillis=0
   &lt;/attribute>
   &lt;attribute id='destination.jmx'>
      jmx.content=$_{xml},
   &lt;/attribute>
   </font>
&lt;/plugin>
      </pre>

      <p>With the above configuration a heartbeat message is send every 12 hours (43200000 msec) and
      additionally an event is send when the remote properties are changed. The events
      are send to any JMX destination, additionally with email to <i>blue8@localhost</i> and finally
      to the topic <i>__sys__Event</i>
      </p>

      <p>Start a subscriber to receive the events:</p>
      <p>
      <code>java javaclients.HelloWorldSubscribe -session.name subscribe/1 -oid __sys__Event -maxContentLength 3000</code>
      </p>
      <p>And now publish three remote properties:
      </p>
      <p>
      <code>java javaclients.HelloWorldPublish -session.name publish/1 -oid __sys__remoteProperties -clientProperty[logging/error] "Some severe problem occurred" -clientProperty[myDatabase] "postgres@192.168.1.20" -clientProperty[someStrangeProperty] "(&lt;|@>?"</code>
      </p>
      <p>The event received by the above subscriber may look similar to this:</p>
      <pre>
&lt;node id='heron'>
  &lt;uptime>210&lt;/uptime>
  &lt;runlevel>9&lt;/runlevel>
  &lt;instanceId>/xmlBlaster/node/heron/instanceId/1141049201013&lt;/instanceId>
  &lt;version>1.1.1&lt;/version>
  ...
  &lt;client id='publish'>
   &lt;session id='1'>
    &lt;state>UNDEF&lt;/state>
    &lt;remoteProperty name='myDatabase'>postgres@192.168.1.20&lt;/remoteProperty>
    &lt;remoteProperty name='someStrangeProperty' encoding='base64'>KDx8QD4/&lt;/remoteProperty>
    &lt;remoteProperty name='logging/error'>Some severe problem occurred&lt;/remoteProperty>
   &lt;/session>
  &lt;/client>
  &lt;numTopics>1&lt;/numTopics>
  ...
&lt;/node>
      </pre>

      <p>It is possible to send remoteProperties on login with the ConnectQos clientProperties, see the
      <a href="interface.connect.html#remoteProperty" target="others">interface.connect</a> requirement.
      </p>
   </example>


   <configuration where="server">
      <p>
      These parameters allow to configure the plugin.
      </p>
<p class="celltitel">Email data sink specific settings</p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>mail.smtp.from</td>
            <td>xmlBlaster@localhost</td>
            <td>The email address used by the xmlBlaster server.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.smtp.to</td>
            <td>demo@localhost</td>
            <td>The user to receive the emails.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.smtp.cc</td>
            <td>"admin@localhost,joe@localhost"</td>
            <td>Other users to receive the emails.
            If you use multiple email addresses separate them with a comma and
            protect it with double quotes.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.smtp.bcc</td>
            <td>"admin@localhost,joe@localhost"</td>
            <td>Other users to receive the emails.
            If you use multiple email addresses separate them with a comma and
            protect it with double quotes.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.subject</td>
            <td>[XmlBlaster event: $_{eventType}] $_{nodeId}</td>
            <td>The template to generate the email subject line.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.content</td>
            <td>eventType:   $_{eventType}\ninstanceId:  $_{instanceId}\n\nsummary:     $_{summary}\ndescription: $_{description}\n\neventDate:   $_{datetime}\nversionInfo: $_{versionInfo}\n\n--\n http://www.xmlblaster.org/ xmlBlaster/doc/requirements/admin.events.html</td>
            <td>The template to generate the email content of the email.<br />
            Please replace '\n' with ${line.separator} to enforce a new line.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.contentSeparator</td>
            <td>\n\n========== NEXT ============\n\n</td>
            <td>The separator to use if many events are collected into one email.<br />
            Please replace '\n' with ${line.separator} to enforce a new line.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.collectMillis</td>
            <td>43200000</td>
            <td>If given > 0 the mails after the first one will be collected the given milli seconds.
            It defaults to 12 hours.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

      </table>
      <p>Valid variables to be replaced in the above templates are all configuration variables
      like ${user.home} and additionally the following context specific variables:
      </p>
      <code>
$_{datetime}
$_{summary}
$_{description}
$_{instanceId}
$_{nodeId}
$_{eventType}
$_{errorCode}
$_{versionInfo}
$_{xml}
      </code>
      <p>The <code>$_{xml}</code> creates a xml dump of the current situation, containing
      the current users, sessions, topics and some more detail data.</p>

<p class="celltitel">Publish message specific settings</p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>publish.key</td>
            <td>&lt;key oid='__sys__Event'/></td>
            <td>You can optionally choose another topic name.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>publish.qos</td>
            <td>&lt;qos>...&lt;/qos></td>
            <td>You can optionally choose another publish qos.
            The default qos is transient and has a history depth of 2.
            The messages have a unlimited life time and forceUpdate is set to true.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>publish.content</td>
            <td>$_{eventType}</td>
            <td>The template to generate the content of the message.<br />
            Use ${line.separator} instead of '\n' to enforce a new line.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

      </table>

<p class="celltitel">JMX specific settings</p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>jmx.content</td>
            <td>$_{eventType}: $_{summary}</td>
            <td>The template to generate the content of the message field of JMX.<br />
            Use ${line.separator} instead of '\n' to enforce a new line.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

      </table>
   </configuration>

   <see type="API">org.xmlBlaster.engine.EventPlugin</see>
   <see type="API">org.xmlBlaster.util.protocol.email.SmtpClient</see>
   <see type="REQ">admin</see>
   <see type="REQ">admin.jmx</see>
   <see type="REQ">admin.telnet</see>
   <see type="REQ">engine.LoginLogoutEvent</see>
   <see type="REQ">util.log.plugin</see>
   <author>xmlblast@marcelruff.info</author>
   <date>2006 01 03</date>                           
   <revision>$Revision: 1.1 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>TODO</comment>
      <test tool="SUITE">org.xmlBlaster.test.contrib.log.TestEmailErrorLog</test>
   </testcase>
</requirement>

