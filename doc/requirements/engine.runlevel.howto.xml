<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='engine.runlevel.howto' type='NEW' prio='HIGH' status="CLOSED">
   <topic>How to write a native client plugin for xmlBlaster</topic>
   
   <description>
     <p>
     XmlBlaster has a sophisticated runlevel manager to control startup and
     shutdown of the server. It is possible to write xmlBlaster clients and
     instead of starting them separately add them to be managed by the runlevel
     manager. Here follows an example how to write such a native plugin for
     xmlBlaster. It is started with xmlBlaster, and stopped with xmlBlaster
     automatically be the runlevel manager.
     </p>
     <p>
     A plugin needs to implement the <code>I_Plugin</code> interface and you
     need to register it in the <code>xmlBlasterPlugins.xml</code> configuration file,
     that's it.
     </p>
     <p>
     </p>
   </description>

   <example lang="Java" type="HTML">
      <p class="celltitel">Write your first plugin</p>
   <h3>Step 1: Write a client plugin</h3>

<pre bgcolor="#ffffff" text="#000000" class="embed" style="CODE.Java" title="javaclients.ClientPlugin">
<a name="line1" href="#line1"> 1</a> <font color="#444444">// xmlBlaster/demo/javaclients/ClientPlugin.java</font>
<a name="line2" href="#line2"> 2</a> <font color="0000ff"><strong>package javaclients;</strong></font>
<a name="line3" href="#line3"> 3</a> <font color="0000ff"><strong>import org.xmlBlaster.client.I_XmlBlasterAccess;</strong></font>
<a name="line4" href="#line4"> 4</a> <font color="0000ff"><strong>import org.xmlBlaster.client.XmlBlasterAccess;</strong></font>
<a name="line5" href="#line5"> 5</a> <font color="0000ff"><strong>import org.xmlBlaster.util.XmlBlasterException;</strong></font>
<a name="line6" href="#line6"> 6</a> <font color="0000ff"><strong>import org.xmlBlaster.util.MsgUnit;</strong></font>
<a name="line7" href="#line7"> 7</a> <font color="0000ff"><strong>import org.xmlBlaster.util.plugin.I_Plugin;</strong></font>
<a name="line8" href="#line8"> 8</a> <font color="0000ff"><strong>import org.xmlBlaster.util.plugin.PluginInfo;</strong></font>
<a name="line9" href="#line9"> 9</a> 
<a name="line10" href="#line10">10</a> 
<a name="line11" href="#line11">11</a> <font color="#444444"><i>/**
<a name="line12" href="#line12">12</a>  * This client is loaded by xmlBlaster as a plugin on startup, it then connects
<a name="line13" href="#line13">13</a>  * to xmlBlaster and gets synchronous a message and disconnects. 
<a name="line14" href="#line14">14</a>  * &lt;p /&gt;
<a name="line15" href="#line15">15</a>  * You need to add this plugin to xmlBlasterPlugins.xml.
<a name="line16" href="#line16">16</a>  */</i></font>
<a name="line17" href="#line17">17</a> <strong>public</strong> <strong>class</strong> <font color="#2040a0">ClientPlugin</font> <strong>implements</strong> <font color="#2040a0">I_Plugin</font>
<a name="line18" href="#line18">18</a> <font color="4444FF"><strong>{</strong></font>
<a name="line19" href="#line19">19</a>    <strong>public</strong> <strong>void</strong> <font color="#2040a0">init</font><font color="4444FF"><strong>(</strong></font><font color="#2040a0">org</font>.<font color="#2040a0">xmlBlaster</font>.<font color="#2040a0">util</font>.<font color="#2040a0">Global</font> <font color="#2040a0">glob</font>, <font color="#2040a0">PluginInfo</font> <font color="#2040a0">pluginInfo</font><font color="4444FF"><strong>)</strong></font>
<a name="line20" href="#line20">20</a>                                                <strong>throws</strong> <font color="#2040a0">XmlBlasterException</font> <font color="4444FF"><strong>{</strong></font>
<a name="line21" href="#line21">21</a>       <font color="#2040a0">doSomething</font><font color="4444FF"><strong>(</strong></font><font color="4444FF"><strong>)</strong></font><font color="4444FF">;</font>
<a name="line22" href="#line22">22</a>    <font color="4444FF"><strong>}</strong></font>
<a name="line23" href="#line23">23</a> 
<a name="line24" href="#line24">24</a>    <strong>public</strong> <font color="#2040a0">String</font> <font color="#2040a0">getType</font><font color="4444FF"><strong>(</strong></font><font color="4444FF"><strong>)</strong></font> <font color="4444FF"><strong>{</strong></font>
<a name="line25" href="#line25">25</a>       <strong>return</strong> <font color="#008000">&quot;ClientPlugin&quot;</font><font color="4444FF">;</font>
<a name="line26" href="#line26">26</a>    <font color="4444FF"><strong>}</strong></font>
<a name="line27" href="#line27">27</a> 
<a name="line28" href="#line28">28</a>    <strong>public</strong> <font color="#2040a0">String</font> <font color="#2040a0">getVersion</font><font color="4444FF"><strong>(</strong></font><font color="4444FF"><strong>)</strong></font> <font color="4444FF"><strong>{</strong></font>
<a name="line29" href="#line29">29</a>       <strong>return</strong> <font color="#008000">&quot;1.0&quot;</font><font color="4444FF">;</font>
<a name="line30" href="#line30">30</a>    <font color="4444FF"><strong>}</strong></font>
<a name="line31" href="#line31">31</a> 
<a name="line32" href="#line32">32</a>    <strong>public</strong> <strong>void</strong> <font color="#2040a0">shutdown</font><font color="4444FF"><strong>(</strong></font><font color="4444FF"><strong>)</strong></font> <strong>throws</strong> <font color="#2040a0">XmlBlasterException</font> <font color="4444FF"><strong>{</strong></font>
<a name="line33" href="#line33">33</a>    <font color="4444FF"><strong>}</strong></font>
<a name="line34" href="#line34">34</a> 
<a name="line35" href="#line35">35</a>    <font color="#444444"><i>/**
<a name="line36" href="#line36">36</a>     * We login to xmlBlaster and check the free memory
<a name="line37" href="#line37">37</a>     */</i></font>
<a name="line38" href="#line38">38</a>    <strong>private</strong> <strong>final</strong> <strong>void</strong> <font color="#2040a0">doSomething</font><font color="4444FF"><strong>(</strong></font><font color="4444FF"><strong>)</strong></font> <font color="4444FF"><strong>{</strong></font>
<a name="line39" href="#line39">39</a>       <strong>try</strong> <font color="4444FF"><strong>{</strong></font>
<a name="line40" href="#line40">40</a>          <font color="#2040a0">I_XmlBlasterAccess</font> <font color="#2040a0">con</font> <font color="4444FF">=</font> <strong>new</strong> <font color="#2040a0">XmlBlasterAccess</font><font color="4444FF"><strong>(</strong></font><strong>new</strong> <font color="#2040a0">String</font><font color="4444FF"><strong>[</strong></font><font color="#FF0000">0</font><font color="4444FF"><strong>]</strong></font><font color="4444FF"><strong>)</strong></font><font color="4444FF">;</font>
<a name="line41" href="#line41">41</a> 
<a name="line42" href="#line42">42</a>          <font color="#2040a0">con</font>.<font color="#2040a0">connect</font><font color="4444FF"><strong>(</strong></font><strong>null</strong>, <strong>null</strong><font color="4444FF"><strong>)</strong></font><font color="4444FF">;</font>    <font color="#444444">// Login to xmlBlaster</font>
<a name="line43" href="#line43">43</a> 
<a name="line44" href="#line44">44</a>          <font color="#2040a0">MsgUnit</font><font color="4444FF"><strong>[</strong></font><font color="4444FF"><strong>]</strong></font> <font color="#2040a0">msgs</font> <font color="4444FF">=</font> <font color="#2040a0">con</font>.<font color="#2040a0">get</font><font color="4444FF"><strong>(</strong></font><font color="#008000">&quot;&lt;key oid='__cmd:?freeMem'/&gt;&quot;</font>, <strong>null</strong><font color="4444FF"><strong>)</strong></font><font color="4444FF">;</font>
<a name="line45" href="#line45">45</a> 
<a name="line46" href="#line46">46</a>          <font color="#2040a0">System</font>.<font color="#2040a0">out</font>.<font color="#2040a0">println</font><font color="4444FF"><strong>(</strong></font><font color="#008000">&quot;<font color="#77dd77">\n</font>###ClientPlugin###: xmlBlaster has currently &quot;</font> <font color="4444FF">+</font>
<a name="line47" href="#line47">47</a>                 <strong>new</strong> <font color="#2040a0">String</font><font color="4444FF"><strong>(</strong></font><font color="#2040a0">msgs</font><font color="4444FF"><strong>[</strong></font><font color="#FF0000">0</font><font color="4444FF"><strong>]</strong></font>.<font color="#2040a0">getContent</font><font color="4444FF"><strong>(</strong></font><font color="4444FF"><strong>)</strong></font><font color="4444FF"><strong>)</strong></font> <font color="4444FF">+</font> <font color="#008000">&quot; bytes of free memory<font color="#77dd77">\n</font>&quot;</font><font color="4444FF"><strong>)</strong></font><font color="4444FF">;</font>
<a name="line48" href="#line48">48</a> 
<a name="line49" href="#line49">49</a>          <font color="#2040a0">con</font>.<font color="#2040a0">disconnect</font><font color="4444FF"><strong>(</strong></font><strong>null</strong><font color="4444FF"><strong>)</strong></font><font color="4444FF">;</font>
<a name="line50" href="#line50">50</a>       <font color="4444FF"><strong>}</strong></font>
<a name="line51" href="#line51">51</a>       <strong>catch</strong> <font color="4444FF"><strong>(</strong></font><font color="#2040a0">Exception</font> <font color="#2040a0">e</font><font color="4444FF"><strong>)</strong></font> <font color="4444FF"><strong>{</strong></font>
<a name="line52" href="#line52">52</a>          <font color="#2040a0">System</font>.<font color="#2040a0">err</font>.<font color="#2040a0">println</font><font color="4444FF"><strong>(</strong></font><font color="#008000">&quot;ClientPlugin: We have a problem: &quot;</font> <font color="4444FF">+</font> <font color="#2040a0">e</font>.<font color="#2040a0">toString</font><font color="4444FF"><strong>(</strong></font><font color="4444FF"><strong>)</strong></font><font color="4444FF"><strong>)</strong></font><font color="4444FF">;</font>
<a name="line53" href="#line53">53</a>       <font color="4444FF"><strong>}</strong></font>
<a name="line54" href="#line54">54</a>    <font color="4444FF"><strong>}</strong></font>
<a name="line55" href="#line55">55</a> <font color="4444FF"><strong>}</strong></font>
   </pre>
     <p>This is a very simple plugin, it implements the <code>I_Plugin</code> interface and
     is therefor forced to implement the methods <code>getType()</code> which returns the unique name
     of the plugin which is later used to register, <code>getVersion()</code> which returns an arbitrary version
     number, <code>init()</code> which
     is called after creating the plugin and <code>shutdown()</code> which is called before unloading the
     plugin.
     </p>
     <p>On line 38 we do some client specific code, here we login to xmlBlaster and
     check the used memory, then the plugin logs out and does nothing any more.
     Note that this plugin communicates over the default protocol CORBA with the server
     which is a bit of overkill. See requirement <code>protocol.local</code> how to connect
     natively as we are in the same JVM.
     </p> 
     <h3>Step 2: Register our plugin in <code>xmlBlasterPlugins.xml</code></h3>
     <p>
     First copy the xmlBlasterPlugins.xml file to your home directory, the
     following example is for UNIX, on Windows it is similar:
     </p>
     <pre>
cp xmlBlaster/config/xmlBlasterPlugins.xml.template  $HOME/xmlBlasterPlugins.xml
     </pre>
     <pre>
&lt;xmlBlaster>
   ...
   &lt;plugin id='ClientPlugin' className='javaclients.ClientPlugin'>
      &lt;action do='LOAD' onStartupRunlevel='9'/>
      &lt;action do='STOP' onShutdownRunlevel='6'/>
   &lt;/plugin>
   ...
&lt;/xmlBlaster>
     </pre>
     <p>In this configuration we tell the runlevel manager to load our
     plugin at the end of the startup sequence (9) and unload it
     in runlevel 6 again on shutdown of the server
     </p>                                                              
   </example>


   <example type="HTML">
      <p class="celltitel">Deploying to a running server</p>
      <a name="dynamic"/>
      <h3>This example shows how to deploy a plugin without restarting xmlBlaster</h3>
<b>Note: This feature has a high security risc as any authorized client can inject
any code into the xmlBlaster server. This code is executed with the rights of the
user running the xmlBlaster server. Therefore this features is switched off as a default
setting with <code>xmlBlaster/allowDynamicPlugins=false</code></b>.
      <p>
      You can send a xmlBlaster message containing the plugin jar file (with your coded plugin)
      and the xml markup to register the plugin. XmlBlaster than automatically
      extends its classpath with your jar file and loads the plugin according to your
      xml configuration.
      </p>
      <p>
      Here is an example using our HelloWorldPublish demo client to send such a plugin.
      First create a jar file with
      </p>
<pre class="BORDER">
jar cvf dynamic.jar javaclients/ClientPlugin.class
</pre>
      <p>and we will use this xml configuration for registration</p>

<pre class="BORDER">
   &lt;plugin id='ClientPlugin' className='javaclients.ClientPlugin'>
      &lt;action do='LOAD' onStartupRunlevel='9'/>
      &lt;action do='STOP' onShutdownRunlevel='6'/>
   &lt;/plugin>
</pre>
     <p>The LOAD directive is not important in this case as xmlBlaster is already
     up and running, there for we leave it away in the following command line example.
     </p>
      <p>
      Start the xmlBlaster server with dynamic plugins enabled:
      </p>

<pre class="BORDER">
  java org.xmlBlaster.Main -xmlBlaster/allowDynamicPlugins true                 
</pre>

      <p>
      Now we are ready to send the plugin to a already running xmlBlaster server (all in one line):
      </p>

<pre class="BORDER">
  java javaclients.HelloWorldPublish \
     -oid __sys__RunlevelManager \
     -contentFile dynamic.jar \
     -clientProperty[__plugin.jarName] dynamic.jar \
     -clientProperty[__plugin.xml] \
         "&lt;plugin create='true' id='ClientPlugin' className='javaclients.ClientPlugin'> \
            &lt;action do='STOP' onShutdownRunlevel='6'/> \
          &lt;/plugin>"
</pre>
      <p>To register a plugin you need to send it to the topic <code>__sys__RunlevelManager</code>,
      the message content contains the jar file.<br />
      We use a client property <code>__plugin.jarName</code> to pass a nice name for the jar file, this is optional.
      The jar file will be dumped by the xmlBlaster server to the root directory of its CLASSPATH.
      </p>
      <p>
      Finally, the client property <code>__plugin.xml</code> contains the configuration for registering
      the plugin. 
      </p>
      <p>
      After sending the above message, you should see some server output telling you about the successful registration.
      </p>
      <p>
      Note that the registration is not persistent, on server restart
      the plugin is lost. If you wish to use the plugin permanently
      you need to register it in <code>xmlBlasterPlugins.xml</code> as well.
      </p>
      <p>
      Please use JMX (for example the jconsole GUI, see the admin.jmx requirement) to control the plugin
      when running in xmlBlaster.
      </p>
   </example>



   <configuration where="server">
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>
			<tr>
            <td>xmlBlaster/allowDynamicPlugins</td>
            <td>false</td>
            <td>Switching this feature on has a very high security risk, as any code can
be injected. This settings needs to be set on startup and can't be changed during a running server.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>
   </configuration>

   <see type="REQ">engine.runlevel</see>
   <see type="REQ">protocol.local</see>
   <see type="REQ">admin.jmx</see>
   <see type="API">javaclients.HelloWorldNative</see>
   <see type="INTERNET">http://www.xmlBlaster.org/xmlBlaster/demo/javaclients/HelloWorldNative.java.html</see>
   <see type="API">javaclients.HelloWorldNative2</see>
   <see type="INTERNET">http://www.xmlBlaster.org/xmlBlaster/demo/javaclients/HelloWorldNative2.java.html</see>
   <see type="API">org.xmlBlaster.engine.runlevel.RunlevelManager</see>
   <see type="API">org.xmlBlaster.engine.runlevel.I_RunlevelListener</see>

   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 14</date>
   <revision>$Revision: 1.4 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE"></test>
   </testcase>
</requirement>

