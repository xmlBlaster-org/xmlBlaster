<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">


<requirement id='client.cpp.compile' type='NEW' prio='HIGH' status='CLOSED'>
   <topic>
      In order to build and run c++ clients, several preconditions need to be fulfilled.
   </topic>
   <description>
     <p>The impatient Unix user may directly jump to the <a href="#exampleSUSE">compilation example</a>,
     others should read the next paragraphs to save time.</p>

     <h2>Overview</h2>
     <p>You can use the <b><a href="http://ant.apache.org/" target="others">ant tool</a></b> with
     the C++ compile extension <b><a href="http://ant-contrib.sourceforge.net/cc.html" target="others">cpptasks</a></b>
     to compile the xmlBlaster client C++ library, the C++ demo clients and the C++ testsuite.
     All necessary compile tools are provide in the xmlBlaster distribution.
     </p>
     <p>Tested compilers are gcc/g++ 3.x and 4.x, Intels ICC, MS-Visual C++ 2003 and 2005
     and SUN-OS CC. Others standard conforming compilers should work without major effort.</p>

     <p>The rules to compile C++ code with ant are in the file <b>xmlBlaster/build.xml</b> which
     loads your configuration settings (like the installation path of your CORBA library or XML parser)
     from <b>build.properties</b>. See the configuration example below how to set up build.properties.
     </p>
     <p>
     The cpptasks support many compilers on many platforms (like OS 390/400, SUN, HP, IBM, g++, Intel icc, borland, VC++),
     our build.xml is tested currently on Linux and Windows.
     If you use an exotic platform please check cpptasks if this is supported
     and extend build.xml to your needs (feedback is welcome).
     </p>
     <p>
     Cory has added autoconf support but currently this support is outdated and
     needs reanimation, see <a href="http://www.xmlBlaster.org/xmlBlaster/config/README.autoconf">xmlBlaster/config/README.autoconf</a>.
     </p>
     <p>
     You may as well compile the client library with any other compile tool like
     jam, but currently there is no such support in the xmlBlaster distribution.
     </p>

     <h2>Setup</h2>
     <p>To use the C++ client library you need at least the Xerces XML library.</p>
     
     <p>If you want compression support or client side persistent queuing you
     need additionally the zlib and SQLite</p>

     <p>Finally, if you don't want to use our native SOCKET communication protocol
     you can install a CORBA library as well (MICO, TAO, OMNIORB, ORBACUS and ORBIX are supported)</p>

     <h2>Remarks</h2>

     <h3>The C++ threading abstraction library</h3>
        <b>Note: The omnithread library is included in the xmlBlaster distribution
        and is automatically compiled with our <code>xmlBlaster/build</code> task. For details how
        to switch the threading library please read the next paragraphs.
        </b>
        <p>In order to have multi threading support on all different operating systems
        we can link with the <b><a href="http://www.boost.org" target="others">boost</a> C++ multi threading
        library</b> or with the <b><a href="http://omniorb.sourceforge.net/" target="others">omniORB - omnithreads</a></b>
        multi threading library. Both support many platforms like Linux, Windows, Solaris, AIX, HPUX, MAC etc.
        </p>
        <p>
        Both libraries have a free license and the necessary code fragments of both are provided in the
        xmlBlaster distribution, so you don't need to download anything.
        </p>
        <p>
        The default library used is omnithread but can be switched to boost with an entry in build.properties:
        </p>
        <pre>
   thread.impl=BOOST
        </pre>
        <p>You may want to switch to use omnithreads if you have compilation problems with boost on your OS (like e.g. Solaris).
        </p>
        <p>In the build.properties there are two parameters which tell ant where to find the sources and
           the includes for the thread library. If you use the default don't make any change. If you use an
           external boost, then you can point to its thread sources with the variable THREADS_SRC and to the
           includes with THREADS_INC.
         </p>

     <h3>The XML library</h3>
     <p>
        You can download the xerces-c library from <a href="http://xml.apache.org/xerces-c/index.html">
        apache's homepage</a>. Please follow their instructions on how to install/build the xerces 
        library for your platform. <b>The versions tested are 2.6.0 (you need a version > 2.4 because of the used codeset,
        on this is a problem you can comment out some code snippets to be backward compatible to 1.x)</b>.
        <br/>
        Now, when building with ant, the xerces-c library will be used. In build.properties make sure that
        the $xerces.include.dir and $xerces.lib.dir are set correctly (see examples there) and that the link to the directory for xerces is correct.
     </p>
     
     <h3>The CORBA library</h3>
     <b>MICO</b><br/>
     If want to use MICO as the corba implementation you can download it from 
     <a href="http://www.mico.org">the mico homepage</a>. On how to install and build MICO please
     follow as usual the instructions given there. Once it is installed, open the file
     build.properties in the $XMBLASTER_HOME directory. There you must adjust <br/>
     <ul>
        <li>corba.product</li>
        <li>CORBACPP_HOME</li>
        <li>CORBACPP_VER</li>
     </ul>
     <p>to the correct values.</p>
     <br/>
     <b>TAO</b><br/>
     <p>
     If you want to use TAO please follow the <a href="client.cpp.tao.html">specific TAO requirement</a>
     </p>

     <h3>The compression library zlib</h3>
     <p>
        Optionally you can link this xmlBlaster C++ client library to the zlib compression library.
        You need to download zlib yourself at http://www.gzip.org/zlib/.
        Please choose version 1.2.1 or newer, the older version 1.1.4 does not seem to work properly in stream mode.
     </p>
     <p>The compression rate is impressive, see
     <a href="http://www.xmlblaster.org/xmlBlaster/doc/requirements/protocol.socket.html#compress" target="req">protocol.socket</a>
     and
     <a href="http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.c.queue.html" target="req">client.c.queue</a>
     </p>
     <p>You need to adjust in <i>build.properties</i> following settings:
     </p>
     <ul>
       <li>zlib.include.dir is the path to "zlib.h"</li>
       <li>zlib.lib.dir is on Unix the path to the shared library libz.so and
           on Windows to zlib.dll and zlib.lib (for compilation)</li>
     </ul>
     <p>This settings usually works on a Windows box:</p>
     <pre>
-> Entry in build.properties:
XMLBLASTER_ZLIB=1
zlib.include.dir=C:/zlib/include
zlib.lib.dir=C:/zlib
zlib.lib.name=zlib1

-> Directory listing of C:\zlib (zlib1.lib is a copy of lib\zdll.lib)
include
lib
README.txt
test
USAGE.txt
zlib1.dll
zlib1.lib
      </pre>

     <p>As many zlib versions may fly around on your PC you can add a zlib name
     which contains all references for statical linkage (e.g. zlib.lib on Windows), example:</p>
     <pre>
XMLBLASTER_ZLIB=1
zlib.include.dir=/opt/zlib-bin/include
zlib.lib.dir=/opt/zlib-bin/lib
# On Windows you have to choose the name, usually 'zlib' or 'zlib1' (defaults to 'z' for UNIX):
#zlib.lib.name=zlib
</pre>

     <h2>Example command line settings for Windows</h2>
<pre>
REM Visual C++ 2005 Express Edition Beta 2
REM C and C++

REM ========== Global env settings ======
set JAVA_HOME=C:\PROGRA~1\Java\JDK15~2.0_0
set XMLBLASTER_HOME=C:\xmlBlaster
set CLASSPATH=%XMLBLASTER_HOME%\lib\xmlBlaster.jar

REM ========== C/C++ compilation ========
set PATH=%PATH%;C:\PROGRA~1\MICROS~4\Common7\IDE;C:\PROGRA~1\MICROS~4\VC\bin
set PATH=%PATH%;%XMLBLASTER_HOME%\lib;%XMLBLASTER_HOME%\bin;
set PATH=%PATH%;%XMLBLASTER_HOME%\demo\c\socket\bin;%XMLBLASTER_HOME%\demo\c++\bin

REM stdio.h and Winsock2.h (C:\Program Files\Microsoft Platform SDK)
set INCLUDE=%INCLUDE%;C:\PROGRA~1\MICROS~2\Include

REM uuid.lib (C:\Program Files\Microsoft Platform SDK\Lib)
set lib=%lib%;C:\PROGRA~1\MICROS~2\lib

REM ========== C++ runtime ========
REM C++ only: xerces-c_2_6D.dll (from C:\xerces-c_2_6_0-windows_nt-msvc_60)
set PATH=%PATH%;C:\xerces-c_2_6_0-windows_nt-msvc_60\bin

REM C++ with debug only: MSVCRTD.dll  (where from???)
</pre>


     <h2>The compilation step</h2>
     <p>
     After adjusting build.properties as described you can compile like this:
     </p>
<pre>
  cd xmlBlaster

  build  cpp

Get help with

  build  usage

Supported tasks are
  cpp-lib     --> generates C++ libxmlBlasterClient.sl (shared library .so .sl .dll)
                  Check build.properties settings for C++ CORBA and C++ XML libraries
  cpp-test    --> generates C++ test clients
  cpp-demo    --> generates C++ demo clients
  cpp         --> builds cpp-lib, cpp-test and cpp-demo
  cpp-clean   --> cleans up C++ generated files (object files, corba files etc)
  cpp-delete  --> like 'cpp-clean', but delete shared library and C++ test clients as well

</pre>
  You can later check the shared libraries used like this:
<pre>
  tasklist /M        (Windows DOS box)
  ldd PublishDemo    (Linux, Solaris)
</pre>
   </description>

   <example lang="CPP" type="HTML">
      <h2><a NAME="exampleSUSE"></a>Example on Linux SUSE 10.0 64bit</h2>
      <p>Installing xmlBlaster C++ client library on a SUSE 10.0 32 or 64 bit system
      is very simple: Just install the delivered g++ 4.0.2, xerces 2.6, SQLLite 2.8.16, zlib 1.2.3
      with yast2 from the distribution DVD.</p>
      <p>Now configure a <code>$HOME/build.properties</code></p>
      <pre>
COMPILE_SOCKET_PLUGIN = 1
COMPILE_CORBA_PLUGIN  = 0
corba.product         = NONE

XMLBLASTER_ZLIB=1
zlib.include.dir=/usr/include
zlib.lib.dir=/usr/lib64

XMLBLASTER_PERSISTENT_QUEUE=1
sqlite.include.dir=/usr/include
sqlite.lib.dir=/usr/lib64

xerces.include.dir=/usr/include
xerces.lib.dir=/usr/lib64
xerces.lib.name=xerces-c
   </pre>
   <p>And compile the xmlBlaster C++ client library:</p>
   <pre>
cd xmlBlaster
./build c cpp
   </pre>
   <p>Now you should have shared libraries for C (<code>xmlBlaster/lib/libxmlBlasterClientC.so</code>)
   and C++ (<code>xmlBlaster/lib/libxmlBlasterClient.so</code>)
   and a complete set of examples in <code>xmlBlaster/demo/c/socket/bin</code>
   and <code>xmlBlaster/demo/c++/bin</code>
   </p>
   </example>

   <example lang="CPP" type="HTML">
      <h2><a NAME="exampleSunOS"></a>Example on SunOS 5.11 with CC compiler</h2>
      <p>Installing xmlBlaster C++ client library on a SunOS 5.11 system
      is very simple: First install xerces 2.7, SQLLite 2.8.16, zlib 1.2.3</p>
      <p>Now configure a <code>$HOME/build.properties</code></p>
      <pre>
# CC: Sun C++ 5.8 2005/10/13
# build -Duse-CC=true c

use-CC=true

CFLAGS=-R /home/xmlblast/xmlBlaster/lib
CFLAGS3=-D__sunos__=1
#c.debug       = false
#cpp.debug     = false

XMLBLASTER_COMPILE_LOG4CPLUS_PLUGIN=1

XMLBLASTER_ZLIB=1
zlib.include.dir=/opt/csw/include
zlib.lib.dir=/opt/csw/lib

xerces.include.dir=/opt/xerces-c-src_2_7_0-bin/include
xerces.lib.dir=/opt/xerces-c-src_2_7_0-bin/lib
xerces.lib.name=xerces-c

XMLBLASTER_PERSISTENT_QUEUE=1
sqlite.include.dir=/opt/csw/include
sqlite.lib.dir=/opt/csw/lib

COMPILE_SOCKET_PLUGIN = 1
COMPILE_CORBA_PLUGIN  = 0
corba.product         = NONE
   </pre>
   <p>And compile the xmlBlaster C++ client library:</p>
   <pre>
cd xmlBlaster
./build c cpp
   </pre>
   </example>


   <example lang="CPP" type="HTML">
      <h2><a NAME="exampleEclipse"></a>Example with eclipse</h2>
      <p>If you have installed compiled and installed the dlls, following steps are
      needed to setup your first own client.</p>
    <pre>
    Properties -> GCC -> Directories:
       ${XMLBLASTER_HOME}/src/c++

    Properties -> Linker -> Libraries:
      xerces-c
      sqlite
      z
      xmlBlasterClientCD
      xmlBlasterClientD

    Properties -> Linker -> Library search path:
      ${XMLBLASTER_HOME}/lib
      ${zlib_lib_dir}
      ${sqlite_lib_dir}
      ${xerces_lib_dir}
      ${usr_lib_dir}

    Properties -> Linker -> Miscellaneous -> Linker flags:
      "-Wl,-rpath=${xerces_lib_dir} -Wl,-rpath=${zlib_lib_dir} -Wl,-rpath=${sqlite_lib_dir} -Wl,-rpath=${usr_lib_dir} -Wl,-rpath=${XMLBLASTER_HOME}/lib"

   </pre>
   assuming your environment contains:
    <pre>
   export usr_lib_dir=/usr/lib
   export zlib_lib_dir=/opt/zlib-bin/lib
   export sqlite_lib_dir=/opt/sqlite-bin/lib
   export xerces_lib_dir=/opt/xerces-c-src_2_7_0-bin/lib
   </pre>

   On Windows you need to set the preprocessor define <code>/D_WINDOWS</code>.
   </example>

   <configuration where="client">
   <p>
   Take a copy from xmlBlaster/build.properties to ${user.home}/build.properties and
   edit it to find the installation directory of the XERCES lib (and optionally
   CORBA libs, zlib and sqlite lib).
   </p>
<pre>
#------------------------------------------------------------------------------
# Switch debugging of C and C++ client library to true or false
# The debugging shared library name has added a 'D' to its name
#c.debug       = false
#cpp.debug     = false
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Set to 1 if you want to use log4cplus instead of our primitive native logging
# We provide the complete source code with xmlBlaster.
# For configuration hints see http://log4cplus.sourceforge.net
#XMLBLASTER_COMPILE_LOG4CPLUS_PLUGIN=1
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Enable compression with zlib http://www.gzip.org/zlib/ (1.2.1)
# The older version 1.1.4 does not seem to work properly in stream mode
# You need to download zlib yourself.
#  http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.c.queue.html
#  http://www.xmlblaster.org/xmlBlaster/doc/requirements/protocol.socket.html#compress
# - zlib.include.dir is the path to "zlib.h"
# - zlib.lib.dir is on Unix the path to the shared library libz.so and
#                on Windows to zlib.dll and zlib.lib (for compilation)
# As many zlib versions may fly around on your PC you can add a zlib name
# which contains all references for statical linkage (e.g. zlib.lib on Windows)
#
#XMLBLASTER_ZLIB=1
#zlib.include.dir=/opt/zlib-bin/include
#zlib.lib.dir=/opt/zlib-bin/lib
# On Windows you have to choose the name, usually 'zlib' or 'zlib1'
# (defaults to 'z' for UNIX):
#zlib.lib.name=zlib
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Settings of the Xerces-C++ validating XML parser.
# See http://xml.apache.org/xerces-c/ for more details.
#
# - xerces.include.dir is the path to the xercesc-include directry
#                      (assumes ./xercesc subdirectory);
#                      on Windows the setting could be: C:/xerces-c_2_6_0/src or
#                      C:/xerces-c_2_6_0-windows_nt-msvc_60/include
#                      (defaults to /usr/include)
# - xerces.lib.dir is on Unix the path to the shared library libxerces-c.so and
#                  on Windows to xerces-c_2.lib (for compilation)
#                  (defaults to /usr/lib)
# - xerces.lib.name=xerces-c
#                  on Windows set to xerces-c_2
#
#xerces.include.dir=/usr/include
#xerces.lib.dir=/usr/lib
#xerces.lib.name=xerces-c
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Persistent queue support in C or C++ client library with http://www.sqlite.org
# You need to download SQLite yourself, see:
#  http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.c.queue.html
#  http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.cpp.queue.html
# - sqlite.include.dir is the path to "sqlite.h"
# - sqlite.lib.dir is the path to the shared library (dll) libsqlite.so (libsqlite.dll)
#
#XMLBLASTER_PERSISTENT_QUEUE=1
#sqlite.include.dir=/opt/sqlite-bin/include
#sqlite.lib.dir=/opt/sqlite-bin/lib
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Compile the SOCKET plugin only, without CORBA.
# See http://www.xmlblaster.org/xmlBlaster/doc/requirements/client.cpp.socket.html
COMPILE_SOCKET_PLUGIN = 1
COMPILE_CORBA_PLUGIN  = 0
corba.product         = NONE
#------------------------------------------------------------------------------

# More corba examples are in build.properties
</pre>

   <h3>Debugging with Purify</h3>
   <p>
   If you want to check the C++ client library on your platform with Purify you
   can try this approach (the example is for Solaris using the CC compiler):
   </p>
   <p>First we rename the CC command to CC.ORIG and replace the CC command by
    a shell script which inserts purify:
   </p>
<pre>
#!/bin/sh

#
# Purify cannot produce shared objects.
# build -DCPP_LINK=static -verbose cpp > build.log
#

PATH=$PATH:/opt/rational/releases/PurifyPlusFamily.2003.06.00/sun4_solaris2/bin
export PATH

PUREOPTIONS=-cache-dir=/tmp/cache
export PUREOPTIONS

purify CC.ORIG $*
</pre>
   <p>
   Now we are ready to compile the code with purify:
   </p>
<pre>
build -DCPP_LINK=static -DPURIFY=PURIFY -verbose cpp > build.log
</pre>


<pre>
Platform        CPP defines (from omniORB)
Windows NT 4.0,2000,XP  __x86__ __NT__ __OSVERSION__=4 __WIN32__
Windows NT 3.5  __x86__ __NT__ __OSVERSION__=3 __WIN32__
Windows 95      __x86__ __WIN32__
Sun Solaris 2.5         __sparc__ __sunos__ __OSVERSION__=5
HPUX 10.x       __hppa__ __hpux__ __OSVERSION__=10
HPUX 11.x       __hppa__ __hpux__ __OSVERSION__=11
IBM AIX 4.x     __aix__ __powerpc__ __OSVERSION__=4
Digital Unix 3.2        __alpha__ __osf1__ __OSVERSION__=3
Linux 2.x (x86)         __x86__ __linux__ __OSVERSION__=2
Linux 2.x (powerpc)     __powerpc__ __linux__ __OSVERSION__=2
OpenVMS 6.x (alpha)     __alpha__ __vms __OSVERSION__=6
OpenVMS 6.x (vax)       __vax__ __vms __OSVERSION__=6
SGI Irix 6.x    __mips__ __irix__ __OSVERSION__=6
Reliant Unix 5.43       __mips__ __SINIX__ __OSVERSION__=5
ATMos 4.0       __arm__ __atmos__ __OSVERSION__=4
NextStep 3.x    __m68k__ __nextstep__ __OSVERSION__=3
Unixware 7      __x86__ __uw7__ __OSVERSION__=5
</pre>
   </configuration>

   <todo type="HTML">
      <p>Test with other compilers:</p>
<pre>
   Portland Group C++ Compiler for Linux
   PathScale C++
   Watcom C++ Compiler for Linux
   Green Hills C++ Compiler for Linux
</pre>
<!-- From OMNIOrb FAQ:
SSL transport over OpenSSL 0.9.6a is now supported. By default it is not built.

The ssl transport is built only if the make variable OPEN_SSL_ROOT is defined and points to the root directory of the openssl library.

For example, on linux with glibc2.1, the platform file i586_linux_2.0_glibc2.1.mk contains these lines at the end of the file:

# To build the SSL transport, OPEN_SSL_ROOT must be defined and points
# the top level directory of the openssl library.
#
#OPEN_SSL_ROOT = /usr/local/openssl
#
OPEN_SSL_CPPFLAGS = -I$(OPEN_SSL_ROOT)/include
OPEN_SSL_LIB = -L$(OPEN_SSL_ROOT)/lib -lssl -lcrypto
OMNIORB_SSL_LIB += $(OPEN_SSL_LIB)
OMNIORB_SSL_CPPFLAGS += $(OPEN_SSL_CPPFLAGS)

If you have openssl installed in /usr/local/openssl, just uncomment the line and build the whole distribution. (In fact, you can just go into <top>/src/lib/omniORB/orbcore/ssl and do a gmake export.)

If you are using another platform, just copy the lines above into your platform file, e.g. for Solaris 2.5, copy the lines into <top>/mk/platform/sun4_sosV_5.5.mk.

The example <top>/src/examples/ssl_echo/ illustrates how to tell the ORB to use the ssl transport. Read the README file in the directory for details.
-->
   </todo>

   <see type="REQ">client.cpp</see>
   <see type="REQ">client.cpp.logging</see>
   <see type="REQ">client.cpp.tao</see>
   <see type="INTERNET" label="Xerces XML">http://xerces.apache.org/</see>
   <see type="INTERNET" label="SQLite Database">http://www.sqlite.org/</see>
   <see type="INTERNET" label="ZLib compression">http://www.zlib.net/</see>

<!--   <see type="REQ">cluster</see> -->
   <author><a href="mailto:laghi@swissinfo.org">Michele Laghi</a></author>
   <date>2003 01 07</date>
   <revision>$Revision: 1.19 $</revision>
</requirement>

