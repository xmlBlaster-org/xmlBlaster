<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='protocol.email' type='NEW' prio='HIGH' status="CLOSED">
   <topic>XmlBlaster has a protocol plugin to support access via email</topic>
   <description>
<p class="celltitel">Introduction</p>
     <p>
     It is possible for a client to send/receive messages to xmlBlaster via email. This way the
     user can publish messages or receive updates via common emails.
     </p>
     <p>
     Our java client library supports this automatically, you can switch to email just by setting
     <code>-protocol email</code> on startup (having configured the SMTP and POP3 beforhand).<br />
     It is possible to send such messages from a normal email software like pine, outlook or thunderbird
     as well, but you need to now how to format the mail to have success (examples follow in this document).
     </p>
     <p>
     In some cases it makes sense to use a client which
     uses the email protocol (transparently to the user) because the combination 
     hardware, platform and implementation language does not offer a better communication alternative 
     or for example to bypass fire walls etc.
     </p>
     <p>
     A further usage would be to send / receive messages from a cellular phone via sms.
     </p>
     <p>
     Even if the email protocol in its nature has sessionless characteristics, we will create a session
     since this protocol may be used transparently by clients written following the protocol 
     abstraction paradigm. So before any publishing or subscription can be done, the user must 
     connect to get a session id.
     </p>
<p class="celltitel">The big picture</p>
     <br /><a name="emailOverview"></a>
      <img src="protocol.email.overview.png" border="0" title="Email overview" alt="Email overview" />
     
     <p>In the above overview you see on the left side two client variants and on the right side a server.</p>
     <p>The pictures shows a java client which uses transparently the <code>email</code> protocol (instead of for example Corba)
     and an email client application like outlook where a human manually sends messages.</p>
     <p>The client needs to connect with SMTP to its MTA (mail transfer agent, for example <code>sendmail</code> or <code>postfix</code>)
     to be able to send outgoing messages
     and needs to connect with POP3 to its MTA to poll for incoming mails.</p>
     <p>The same setup applies for the xmlBlaster server.</p>
     <p>For testing purposes all can reuse the same MTA on your <code>localhost</code> (or from your internet provider) or you can
     even have four different MTAs one for client-SMTP, client-POP3, server-SMTP and server-POP3.
     </p>
     <p>To find the MTAs you need to configure the properties <code>mail.smtp.url</code> and <code>mail.pop3.url</code>.
     The POP3 syntax is of the form <code>pop3://user:password@host:port/INBOX</code>. Only 'INBOX' is
     supported for pop3. <br />
     For SMTP use <code>smtp://user:password@host:port</code>.<br />
     Finally you need to configure what is your email address.
     </p>
     <p>
     For fine-tuning there are many more parameters available.
     </p>
     <p>When the email specific configuration is done you can switch any java client to use the <code>email</code> protocol
     on the fly:</p>
<pre class="BORDER">
  java org.xmlBlaster.Main

  java HelloWorld3 -protocol email
</pre>
<p>Like this the HelloWorld3 client uses transparently emails for communication to the server instead
of CORBA or SOCKET.</p>
<!--
     <p>
     To simplify the usage, it is permitted to send any number of commands in a single email. It is 
     even permitted to send messages (publish messages) where the content of the message is sent as
     an attachment. This is useful where the contents are binary data (for example pictures).
     </p>
     <p>
     Every request to the xmlBlaster server must be valid xml and start with the element tag 
     'xmlBlaster'. If that is not the case, it will be threated in the exception handling. The 
     exception handling considers the following cases:
     <ul>
       <li><b>The content of the message does not start with pure xml</b>. Then it will be considered
           as an error has occured in sending an acknowledge to the client and a delivery problem
           aroze. In such cases the message is striped and the xml content is extracted. The xml
           content is logged and an exception is thrown (then a manual redelivery can be done).
           If no xml content is found an exception is thrown and the message is rejected.
       </li>
       <li><b>The content is correct xml but does not start with the 'xmlBlaster' tag.</b>Then an
           exception is thrown and the message is rejected (since it probably isn't intended for
           xmlBlaster). 
       </li>    
     </ul>
     </p>
     <p>
     The element tag 'xmlBlaster' accepts an attribute <pre>sendAck='true | false (true)'</pre>
     </p>
     <p>
     Commands which normally need a sessionId as a parameter have an alternative without sessionId
     for such cases where a 'connect' is done in the same email. This way you don't need to wait for
     the acknowledge telling you your session id and the result is a faster protocol and less 
     messages are needed.
     </p>      
-->
<p class="celltitel">Supported formats</p>
<a name="formats"/>
<p>The message needs to be serialized to be send in an email attachment.
This formatting is configurable,
currently we provide two variants. First the raw XBF (XmlBlasterFormat) format which is very
dense and used in the SOCKET protocol as well, second the human readable XmlScript format
which is used in the XML scripting framework of xmlBlaster already:
</p>
<pre class="BORDER">
XfbParser email attachment:
  Content-Type: "application/xmlBlaster-xbf; name=xmlBlasterMessage.xbf"
  fileName=xmlBlasterMessage.xbf


XmlScriptParser email attachment:
  Content-Type: "text/plain; name=xmlBlasterMessage.xml; charset=UTF-8"
  fileName = "xmlBlasterMessage.xml"      


Additional meta information attachment:
  Content-Type: text/plain; name=messageId.mid; charset=UTF-8
  Content-Disposition: attachment; filename=messageId.mid
</pre>
<p>The mime type <code>mimeType="application/xmlBlaster-xbfz; name=xmlBlasterMessage.xbfz"</code>
is used for zlib compressed messages.</p>
<p>If you have other formatting needs you can simply add your own Parser plugin.</p>
<p>The format and compression of received emails is auto-detected depending on the file name extension or mime type.</p>


<p class="celltitel">Email expiry</p>
<a name="expires"/>
<p>Each email send by xmlBlaster has an expiry date set on two places.
We add a header field to the email:</p>
<pre class="BORDER">
Expires: Thu, 15 Dec 2005 21:45:01 +0100 (CET)
</pre>
<p>and additionally we add an expires markup tag to the send messageId attachment (or subject line if configured with <code>mail.subject</code>),
it follows the Date/Time format of ISO 8601 and is the UTC (==GMT) time (see the trailing 'Z'):</p>
<pre class="BORDER">
&lt;messageId>...&lt;expires>2005-12-15T21:44:56.296Z&lt;/expires>&lt;/messageId>
</pre>
<p>The expires date value is determined
by the currently configured <code>responseTimeout</code>, <code>pingResponseTimeout</code> or <code>updateResponseTimeout</code>
(corresponding to the type of message send).</p>
<p>The <code>Expires: </code> header field is established for news groups (RFC1036) and additionally specified
in RFC2156 for X.400 -> RCF822(email) gateways as an optional header.
(In the preceeding document RFC1327 it was named <code>Expiry-Date:</code>)</p> 
<p>It is up to the used mail agent (MTA) if you can find a way to destroy expired emails.
This may be very useful if you have a high ping frequency configured and the xmlBlaster client
or xmlBlaster server is offline. The ping emails will fill up your mail box until the counter
part comes online again.
</p>
<p>If an expired email arrives at the destination, xmlBlaster throws it away.</p>
<p>You can prevent sending expire information by setting <code>useEmailExpiryTimestamp=false</code></p>

</description>


<example type="HTML">
<p>To get you going quickly we provide a step by step example:</p>
<ol>
<li>Setup a mail transfer agent (MTA) or use an existing on your network</li>
<li>Setup your preferred email application GUI to reach the MTA</li>
<li>Configure xmlBlaster and start it</li>
<li>Use your email application to send messages to xmlBlaster</li>
</ol>

    <h2 class="celltitel">Setup a POP3 and SMTP mail transfer agent (MTA)</h2>
    <a name="jamesSetup"></a>
    <p>The fastest way for a test environment is to use the James MTA http://james.apache.org. 
    Here are the steps for a running test environment (runs fine on Windows, Unix and Linux):
    </p>
    <p>Download james, unpack it and start it:</p>
<pre class="BORDER">
tar xzvf /opt/download/james-2.2.0.tar.gz
cd james-2.2.0/bin
# Change to be 'root' to have access to ports 25 (SMTP) and 110 (POP3)
./run.sh
</pre>

    <p>Configure some users, here we use <code>xmlBlaster</code> for the server and <code>demo</code> for the client:</p>
<pre class="BORDER">
telnet localhost 4555

# Login as 'root' with password 'root'

# Add users demo and xmlBlaster:
adduser xmlBlaster xmlBlaster
 User xmlBlaster added

adduser demo demo
 User demo added

listusers
 Existing accounts 2
 user: demo
 user: xmlBlaster

quit
</pre>
  <p>Now our MTA is ready for testing.</p>

  <p><b>Hint:</b> On UNIX and Linux you can avoid starting james as root.</p>
  <p>
  Just change the ports to be above 1000, you could change the SMTP port from 25 -> 8025
  and the POP3 port from 110 -> 8110.<br />
  Edit <code>james-2.2.0/apps/james-plus/SAR-INF/config.xml</code>
  to do this and remove the nntp service.
  Additionally add those ports to <code>xmlBlasterPlugins.xml</code>
  and <code>xmlBlaster.properties</code>, here is an example for SMTP <code>smtp://xmlBlaster:xmlBlaster@localhost:8025</code>
  and for POP3 <code>pop3://xmlBlaster:xmlBlaster@localhost:8110/INBOX</code>
  </p>

<p class="celltitel">Simple command line example to test your MTA</p>
<p>To test access to your MTA you can invoke our SMTP and POP3 implementation standalone on the command line.
This can be usefull to test if your connection URL (user name, password etc) is correct:
</p>
<p>
1. Start a command line poller for user 'xmlBlaster':
</p>
<code>
   java -Dmail.pop3.url=pop3://xmlBlaster:xmlBlaster@localhost:110/INBOX org.xmlBlaster.util.protocol.email.Pop3Driver -receivePolling true
</code>

<p>
2. Send from command line an email:
</p>

<code>
  java -Dmail.smtp.url=smtp://xmlBlaster:xmlBlaster@localhost:25 org.xmlBlaster.util.protocol.email.SmtpClient -from xmlBlaster@localhost -to xmlBlaster@localhost
</code>
<p>

For debugging, check in directory <code>james-2.2.0/apps/james/var/mail/inboxes/xmlBlaster</code>
for any pending and not yet delivered emails.
</p>


<p class="celltitel">Sending mails manually from your email client (outlook, thunderbird etc.)</p>
<p>After having a configured james MTA you can play with your email client software (outlook, thunderbird etc.)
and send manually emails to xmlBlaster.</p>

<p>The first step is to setup the server side configuration:</p>
<pre class="BORDER">
xmlBlasterPlugins.xml:
   &lt;!-- General EMAIL SMTP client service -->
   &lt;!-- needed by 'email' plugin and 'CbProtocolPlugin[email][1.0]' plugin -->
   &lt;plugin id='smtp' className='org.xmlBlaster.util.protocol.email.SmtpClient'>
      &lt;action do='LOAD' onStartupRunlevel='4' sequence='7' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='4' sequence='9'/>   
      &lt;attribute id='mail.smtp.url'>smtp://xmlBlaster:xmlBlaster@localhost:25&lt;/attribute>
   &lt;/plugin>

   &lt;!-- General EMAIL POP3 polling service -->
   &lt;!-- needed by 'email' plugin and 'CbProtocolPlugin[email][1.0]' plugin -->
   &lt;plugin id='pop3' className='org.xmlBlaster.util.protocol.email.Pop3Driver'>
      &lt;action do='LOAD' onStartupRunlevel='4' sequence='9' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='4' sequence='7'/>   
      &lt;attribute id='mail.pop3.url'>pop3://xmlBlaster:xmlBlaster@localhost:110/INBOX&lt;/attribute>
      &lt;attribute id='pop3PollingInterval'>500&lt;/attribute>
   &lt;/plugin>

   &lt;!-- EMAIL protocol driver (please activate 'pop3' and 'smtp' service at an earlier runlevel) -->
   &lt;plugin id='email' className='org.xmlBlaster.protocol.email.EmailDriver'>
      &lt;action do='LOAD' onStartupRunlevel='7' sequence='10' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='7' sequence='10'/>
      &lt;attribute id='mail.smtp.from'>xmlBlaster@localhost&lt;/attribute>   
      &lt;attribute id='compress/type'>zlib&lt;/attribute>
      &lt;attribute id='compress/minSize'>2000&lt;/attribute>
      &lt;attribute id='parserClass'>org.xmlBlaster.util.xbformat.XmlScriptParser&lt;/attribute>
      &lt;attribute id='mail.subject'>XmlBlaster generated mail&lt;/attribute>
   &lt;/plugin>
</pre>

<pre class="BORDER">
xmlBlaster.properties:
CbProtocolPlugin[email][1.0]=org.xmlBlaster.protocol.email.CallbackEmailDriver,\
                             mail.smtp.from=xmlBlaster@localhost,\
                             parserClass=org.xmlBlaster.util.xbformat.XmlScriptParser
</pre>

<pre class="BORDER">
Start xmlBlaster:

java -Dcom.sun.management.jmxremote org.xmlBlaster.Main -cluster.node.id heron
</pre>

<p>Now we are ready to send an XmlScript to xmlBlaster,
the following sequence shows a connect, two publishes, one subscribe and a disconnect.
Please take it with your mouse and paste it into your email application window.
Use as TO: destination <code>xmlBlaster@localhost</code>, you can
leave the SUBJECT: empty.
</p> 
<p>Note: If using james configured as described above you need to setup
your email GUI application with a new account <code>demo</code>
with password <code>demo</code>. Setup the outgoing SMTP to the above james <code>localhost:25</code>
and configure to poll on james for incoming mails with POP3 on <code>localhost:110</code>.
Take care to send the email as plain text only (not with HTML markup!).</p>
<pre class="BORDER">
&lt;xmlBlaster>
  &lt;connect>
    &lt;qos>
      &lt;securityService type="htpasswd" version="1.0">
        &lt;user>tester&lt;/user>
        &lt;passwd>tester&lt;/passwd>
      &lt;/securityService>
      &lt;session name='emailTester/1' timeout='-1'/>
      &lt;queue relating='connection'>
         &lt;address type="email" />
      &lt;/queue>
      &lt;queue relating='callback' maxEntries='5' maxEntriesCache='2'>
         &lt;callback type="email" pingInterval='0' retries='-1'>
           demo@localhost
         &lt;/callback>
      &lt;/queue>
    &lt;/qos>
 &lt;/connect>

 &lt;publish>
   &lt;key oid="Hello">&lt;airport />&lt;/key>
   &lt;content>Hi world&lt;/content>
 &lt;/publish>

 &lt;publish>
   &lt;key oid="Hello"/>
   &lt;content>Hi again&lt;/content>
 &lt;/publish>

 &lt;subscribe>
   &lt;key oid="__sys__Login">&lt;/key>
   &lt;qos>&lt;updateOneway>true&lt;/updateOneway>&lt;/qos>
 &lt;/subscribe>

 &lt;disconnect/>
&lt;/xmlBlaster>
</pre>

<p>Usually you need to take the private session id from the returned ConnectReturnQos email
and use it for further communication
(like 'sessionId:127.0.0.2-null-1134492824506--1769759418-3'). As we do all communication
in one mail and disconnect at the end we don't need to bother about this.<br />
We have set <code>pingInterval='0'</code> to not receive unwanted pings, and set <code>retries='-1'</code>
so that the server never deletes us until our disconnect arrives.
Further we have set with <code>timeout='-1'</code> the session expiry to unlimited.</p> 

<p>See our above subscribe(). Note that we have set <code>updateOneway=true</code> otherwise
we would need to acknowledge each received update message.</p>

<p>This screen dump shows the setup just before sending with mozilla/thunderbird,
the subject line is ignored:</p>
     <br /><a name="protocol.email.gui.multiple"></a>
      <img src="protocol.email.gui.multiple.png" border="0" title="Sending messages with thunderbird" alt="Sending messages with thunderbird" />

<p>As a response you will receive multiple of emails, one acknowledge for each request
and one update() message for the subscribe, this screen dump shows the received update() only:</p>
     <br /><a name="protocol.email.gui.updateOneway"></a>
      <img src="protocol.email.gui.updateOneway.png" border="0" title="Receiving update with thunderbird" alt="Receiving update with thunderbird" />

<p/>
<p class="celltitel">Sending requests in separate emails</p>

<p>You can send the above connect() in a single first email.</p>
     <br /><a name="protocol.email.gui.connect"></a>
      <img src="protocol.email.gui.connect.png" border="0" title="Sending messages with thunderbird" alt="Sending messages with thunderbird" />
<p>You will receive an email with the ConnectReturnQos in the email-body and your secret sessionId
in the email-subject. Just press your reply button to keep the subject and send the
next publish() request email. The publish is authenticated by the secret sessionId
in the subject.</p>
     <br /><a name="protocol.email.gui.publish"></a>
      <img src="protocol.email.gui.publish.png" border="0" title="Sending messages with thunderbird" alt="Sending messages with thunderbird" />

<p> </p>
<h2>Limitation</h2>
<p>Each email needs a unique and ascending <code>requestId</code>.
As we haven't supplied one in our above examples the <code>sent-date</code> of the
email header is chosen as a fallback. As this date is based on seconds you may
manually not send more than one email per second.
</p>
<p>You can send such a <code>requestId</code> in the subject as well, but now you have to take
care yourself to increment it manually for each follow up email:<br />
<code>&lt;messageId>
        &lt;sessionId>sessionId:127.0.0.2-null-1134491480448--1073813090-3&lt;/sessionId>
        &lt;requestId>1136486974900000000&lt;/requestId>
        &lt;methodName>subscribe&lt;/methodName>
        &lt;expires>2005-12-13T19:17:53.148Z&lt;/expires>
      &lt;/messageId></code>
</p>
<p>If you use our embedded java client protocol plugin for <code>email</code>
this limitation does not exist, here we correctly send a unique and ascending timestamp.
</p>

<p>Additional note: Optionally you can send an expire date, when this is elapsed the email is discarded by the xmlBlaster server.</p>
</example>


<example type="HTML">
<p class="celltitel">Example of the email structure</p>
<a name="structure"/>
<h3>This example shows the structure of an email transporting xmlBlaster messages:</h3>
<pre class="BORDER">
&lt;message>
  &lt;from>demo@localhost&lt;/from>
  &lt;to>xmlBlaster@localhost&lt;/to>
  &lt;subject>XmlBlaster Generated Email&lt;/subject>
  &lt;content>javax.mail.internet.MimeMultipart@16614e7&lt;/content>

  &lt;attachment>
    &lt;filename>xmlBlasterMessage.xml&lt;/filename>
    &lt;contenttype>text/plain; name=xmlBlasterMessage.xml; charset=UTF-8&lt;/contenttype>
    &lt;content>
      &lt;ping sessionId='unknown' requestId='1' type='I'/>
    &lt;/content>
  &lt;/attachment>

  &lt;attachment>
    &lt;filename>messageId.mid&lt;/filename>
    &lt;contenttype>text/plain; name=messageId.mid; charset=UTF-8&lt;/contenttype>
    &lt;content><![CDATA[&lt;messageId>&lt;sessionId>1132061265263000000&lt;/sessionId>
                &lt;requestId>1132965149890000000&lt;/requestId>
                &lt;methodName>ping&lt;/methodName>&lt;/messageId>
    ]]>&lt;/content>
  &lt;/attachment>
&lt;/message>
</pre>
<h3>The raw email content looks more like this</h3>
<pre class="BORDER">
Return-Path: &lt;demo@localhost>
Received: from localhost ([127.0.0.1])
          by linux (JAMES SMTP Server 2.2.0) with SMTP ID 248
          for &lt;xmlBlaster@localhost>;
          Thu, 17 Nov 2005 16:45:12 +0100 (CET)
Message-ID: &lt;5683514.1132242312629.JavaMail.root@linux>
Date: Thu, 17 Nov 2005 16:45:12 +0100 (CET)
From: demo@localhost
To: xmlBlaster@localhost
Subject: XmlBlaster Generated Email
MIME-Version: 1.0
Content-Type: multipart/mixed; 
   boundary="----=_Part_3_23776721.1132242312553"
Expires: Fri, 27 Jan 2006 13:01:17 +0100 (CET)
Delivered-To: xmlBlaster@localhost

------=_Part_3_23776721.1132242312553
Content-Type: text/plain; name=xmlBlasterMessage.xml; charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename=xmlBlasterMessage.xml


&lt;update sessionId='unknown' requestId='5' type='R'>
 &lt;qos>&lt;state id='OK'/>&lt;/qos>
&lt;/update>

------=_Part_3_23776721.1132242312553
Content-Type: text/plain; name=messageId.mid; charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename=messageId.mid

&lt;messageId>&lt;sessionId>xmlblast&lt;/sessionId>&lt;requestId>5&lt;/requestId>&lt;methodName>update&lt;/methodName>&lt;/messageId>
------=_Part_3_23776721.1132242312553--
</pre>
</example>
   
    <configuration where="server">

  <h2 class="celltitel">Debugging</h2>
<pre class="BORDER">
-logging/org.xmlBlaster.util.protocol.email.Pop3Driver FINEST
-logging/org.xmlBlaster.util.protocol.email.SmtpClient FINEST
-logging/org.xmlBlaster.util.protocol.email.EmailExecutor FINEST
</pre>

  <h2 class="celltitel">Example configuration server side</h2>
<a name="configure"/>
<p>The email driver plugin listening on incoming emails is configured in <code>xmlBlasterPlugins.xml</code>
 (for example listening on connect(), subscribe() and publish() requests)</p>
<pre class="BORDER">
   &lt;!-- General EMAIL SMTP client service -->
   &lt;!-- needed by 'email' plugin and 'CbProtocolPlugin[email][1.0]' plugin -->
   &lt;plugin id='smtp' className='org.xmlBlaster.util.protocol.email.SmtpClient'>
      &lt;action do='LOAD' onStartupRunlevel='4' sequence='7' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='4' sequence='9'/>   
      &lt;attribute id='mail.smtp.url'>smtp://xmlBlaster:xmlBlaster@localhost&lt;/attribute>
   &lt;/plugin>

   &lt;!-- General EMAIL POP3 polling service -->
   &lt;!-- needed by 'email' plugin and 'CbProtocolPlugin[email][1.0]' plugin -->
   &lt;plugin id='pop3' className='org.xmlBlaster.util.protocol.email.Pop3Driver'>
      &lt;action do='LOAD' onStartupRunlevel='4' sequence='9' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='4' sequence='7'/>   
      &lt;attribute id='mail.pop3.url'>pop3://xmlBlaster:xmlBlaster@localhost:110/INBOX&lt;/attribute>
      &lt;attribute id='pop3PollingInterval'>500&lt;/attribute>
   &lt;/plugin>

   &lt;!-- EMAIL protocol driver (please activate 'pop3' and 'smtp' service at an earlier runlevel) -->
   &lt;plugin id='email' className='org.xmlBlaster.protocol.email.EmailDriver'>
      &lt;action do='LOAD' onStartupRunlevel='7' sequence='10' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='7' sequence='10'/>
      &lt;attribute id='mail.smtp.from'>xmlBlaster@localhost&lt;/attribute>   
      &lt;attribute id='compress/type'>zlib&lt;/attribute>
      &lt;attribute id='compress/minSize'>200&lt;/attribute>
      &lt;attribute id='parserClass'>org.xmlBlaster.util.xbformat.XbfParser&lt;/attribute>
      &lt;attribute id='mail.subject'>XmlBlaster generated mail&lt;/attribute>
   &lt;/plugin>
</pre>

<p>The format of the returned messages from the xmlBlaster server to email clients
is configured in <code>xmlBlaster.properties</code> (for example PublishReturnQos, Update messages, ConnectReturnQos etc.)</p>
<pre class="BORDER">
CbProtocolPlugin[email][1.0]=org.xmlBlaster.protocol.email.CallbackEmailDriver,\
                             mail.user=xmlBlaster,\
                             mail.password=xmlBlaster,\
                             compress/type=zlib,\
                             compress/minSize=200,\
                             mail.subject=Server generated email,\
                             parserClass=org.xmlBlaster.util.xbformat.XbfParser
#                             parserClass=org.xmlBlaster.util.xbformat.XmlScriptParser

#plugin/email/responseTimeout=300000
#plugin/email/pingResponseTimeout=60000
#plugin/email/updateResponseTimeout=30000000
</pre>
<p>
The format of the message in the email is defined by our XbfParser (see protocl.socket requirement), additionally
messages bigger 200 bytes are compressed with zlib.
Optionally you can choose to send the message in clear text XML markup by using our XmlScriptParser
instead of XbfParser.
</p>

  <h2 class="celltitel">Example configuration for an email client</h2>
<p>The format of send messages from the client to the xmlBlaster server
or to listen on server messages
is configured in <code>xmlBlaster.properties</code> (for example sending publish() or receiving update() etc.)</p>
<pre class="BORDER">
ClientProtocolPlugin[email][1.0]=org.xmlBlaster.client.protocol.email.EmailConnection,\
                                 mail.smtp.url=smtp://demo:demo@localhost,\
                                 mail.smtp.from=demo@localhost,\
                                 mail.pop3.url=pop3://demo:demo@localhost/INBOX,\
                                 pop3PollingInterval=500,\
                                 holdbackExpireTimeout=20000,\
                                 compress/type=zlib,\
                                 compress/minSize=200,\
                                 parserClass=org.xmlBlaster.util.xbformat.XmlScriptParser
# parserClass=org.xmlBlaster.util.xbformat.XbfParser

# Register the client side callback server plugin (to listen on update() or publishReturnQos)
ClientCbServerProtocolPlugin[email][1.0]=
         org.xmlBlaster.client.protocol.email.EmailCallbackImpl,\
         mail.smtp.url=smtp://demo:demo@localhost,\
         mail.smtp.from=demo@localhost,\
         mail.pop3.url=pop3://demo:demo@localhost/INBOX,\
         pop3PollingInterval=500,\
         holdbackExpireTimeout=20000,\
         compress/type=zlib,\
         compress/minSize=200,\
         messageIdForceBase64=false,\
         contentForceBase64=false,\
         parserClass=org.xmlBlaster.util.xbformat.XbfParser
#schemaDeclaration=xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:noNamespaceSchemaLocation='mySchema.xsd',\
#xmlDeclaration=&lt;?xml version='1.0' encoding='UTF-8'?>,\
#mail.subject=Generated email,\
#sendResponseSessionId=false,\
#sendResponseRequestId=false,\
#sendSimpleExceptionFormat=true,\
#parserClass=org.xmlBlaster.util.xbformat.XmlScriptParser
</pre>
<p>The above client has chosen to not compress the outgoing mails.
Further it sends the UpdateReturnQos in clear XML text instead
of using our native XfbParser protocol.
</p>

<p class="celltitel">Configuration of SmtpClient.java</p>
<p>This plugin is responsible to send away emails with SMTP, it is used
on server side and on java client side.</p>
<p>Note that you can set additionally any system property which is supported by
javax.mail, as for example:</p>
<pre class="border">
java -Dmail.smtp.connectiontimeout=10000 -Dmail.smtp.timeout=10000 ...
</pre>
<p>
Click <a href="http://java.sun.com/products/javamail/javadocs/com/sun/mail/smtp/package-summary.html" target="others">here for a complete list of javax.mail properties</a>.
</p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>
         <tr>
            <td>mail.smtp.url</td>
            <td>smtp://user:password@host:port</td>
            <td>The SMTP connection URL, the port is optional.
             For example "smtp://demo:demo@localhost:25".
             If you leave the password away we try to connect
             to the MTA (mail transfer agent)
             with switched off authentication.
             If the username or password contains a '@' character it
             usually should be escaped by a '%40'. For easier usage
             we do this automatically for you.
             Other special characters like '%' are not handled
             by xmlBlaster and you need to url encode it yourself, in this
             case write '%25' instead (the hex 25 from the ASCII chart).
             </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>messageIdForceBase64</td>
            <td>false</td>
            <td>If the messageId markup contains illegal characters it is 
            automatically base64 encoded. By setting this to true you
            can enforce everything to base64, even it is not necessary.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>contentForceBase64</td>
            <td>false</td>
            <td>If the email payload (the message content) contains illegal characters it is 
            automatically base64 encoded, typically this happens for binary data like
            gif images. By setting this to true you
            can enforce every content email attachment to base64, even it is not necessary.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>inlineExtension</td>
            <td>.txt,.xml</td>
            <td>A comma separated list of attachment file name extensions which should be
            handled as inline. Such attachments are readable in your email body
            in your GUI (outlook,thunderbird)
            so you are not forced to open the attachment to see it.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>mail.debug</td>
            <td>false</td>
            <td>Switches on/off the javamail lowlevel debugging.
            Use as JVM setting like 'java -Dmail.debug=true ...'.<br />
            Further debugging can be switch on with
            <code>logging/org.xmlBlaster.util.protocol.email.SmtpClient FINEST</code>
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>

<p class="celltitel">Configuration of Pop3Driver.java</p>
<p>This plugin is responsible to poll for incoming emails with POP3, it is used
on server side and on java client side.</p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>mail.pop3.url</td>
            <td>pop3://user:password@host:port/INBOX</td>
            <td>The POP3 connection URL, the port is optional.
             For example "pop3://demo:demo@localhost:110/INBOX".
             If you leave the password away we try to connect
             to the MTA (mail transfer agent)
             with switched off authentication.
             </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>pop3PollingInterval</td>
            <td>500</td>
            <td>The polling interval in milli seconds to poll for incoming messages.
            Defaults to 2000 (2 seconds) but reducing it to 500 milli seconds shouldn't
            eat too much CPU time.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>holdbackExpireTimeout</td>
            <td>20000</td>
            <td>How many mill seconds do we keep emails for which no java bean is interested.
            This is solving the chicken/egg problem on xmlBlaster startup when the Pop3Poller
            is retrieving already emails but the email drivers are not yet ready.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>activate</td>
            <td>true</td>
            <td>If true the driver start polling for emails on startup immediately.
            If set to false you need to somehow activate the poller, for example
            manually using the JMX console.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>mail.debug</td>
            <td>false</td>
            <td>Switches on/off the javamail lowlevel debugging.
            Use as JVM setting like 'java -Dmail.debug=true ...'.<br />
            Further debugging can be switch on with
            <code>logging/org.xmlBlaster.util.protocol.email.Pop3Driver] FINEST</code> and
            <code>logging/org.xmlBlaster.util.protocol.email.EmailExecutor] FINEST</code>
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>


<p class="celltitel">Other general configurations</p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>parserClass</td>
            <td>org.xmlBlaster.util.xbformat.XmlScriptParser</td>
            <td>Specifies how to format the message inside the email:
            The <code>XmlScriptParser</code> use the simple XML markup of the
            <a href="client.script.html"
             target="others">client.script framework</a>
            where as the <code>org.xmlBlaster.util.xbformat.XbfParser</code>
            uses the more dense format of our
            <a href="protocol.socket.html"
             target="others">protocol.socket framework</a>.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>compress/type</td>
            <td>zlib</td>
            <td>If you want to compress the attachment set this property to <code>zlib</code>.
            It defaults to '', that is no compression is used.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>compress/minSize</td>
            <td>200</td>
            <td>If <code>compress/type</code> is set to <code>zlib</code> you can
            control the minimum size in bytes to switch on compression.
            For too small messages compression makes no sense as it would increase the size.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>useEmailExpiryTimestamp</td>
            <td>true</td>
            <td>Adds email header of type
            <code>Expires: Fri, 27 Jan 2006 13:01:17 +0100 (CET)</code>.
            If you have an intelligent MTA
            you can configure it to drop the mail if expired. The xmlBlaster library
            will discard expired mails if such arrives.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.subject</td>
            <td>XmlBlaster Generated Email $_{xmlBlaster/email/messageId}</td>
            <td>
            The subject to use. If your subject line contains a <code>$_{xmlBlaster/email/messageId}</code> token,
            a complete &lt;messageId> markup is added to the subject by xmlBlaster.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>xmlDeclaration</td>
            <td>&lt;?xml version='1.0' encoding='UTF-8'?></td>
            <td>
            The header to add to the attachment if formatted with XmlScriptParser.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>schemaDeclaration</td>
            <td>xmlns:xsi= 'http://www.w3.org/2001/XMLSchema-instance' xsi:noNamespaceSchemaLocation= 'mySchema.xsd'</td>
            <td>This allows to add a schema declaration to the XmlScriptParser.
            The attachment root tag is complemented with the given string.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>pingResponseTimeout</td>
            <td>60000</td>
            <td>When the <code>ping()</code> method is invoked we wait the given time [milli-seconds] on a response, 
            the value must be bigger than zero, it defaults to one minute.<br />
            The response is the return value or an exception for method invocations which
            are not marked oneway.<br />
            On timeout an exception is thrown which leads on server side to a dead message
            (depending on the installed error handler).
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

      </table>

<p class="celltitel">Other configurations server side only</p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>CbProtocolPlugin[email][1.0]</td>
            <td><pre>org.xmlBlaster.protocol.email.CallbackEmailDriver</pre></td>
            <td>You need to activate EMAIL support in your xmlBlaster.properties file
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.smtp.from</td>
            <td>xmlBlaster@localhost</td>
            <td>The email address used by the xmlBlaster server.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>updateResponseTimeout</td>
            <td>86400000</td>
            <td>When the <code>update()</code> callback method is invoked we wait the given time [milli-seconds] on a response, the value must be
            bigger than zero, use Integer.MAX_VALUE for an unlimited setting, the default is to wait for one day.<br />
            The response is the return value or an exception for method invocations which
            are not marked oneway.<br />
            On timeout an exception is thrown which leads on server side to a dead message
            (depending on the installed error handler).
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

      </table>

<p class="celltitel">Other configurations client side only</p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>ProtocolPlugin[email][1.0]</td>
            <td><pre>org.xmlBlaster.protocol.email.EmailDriver</pre></td>
            <td>You need to activate EMAIL support in your xmlBlaster.properties file
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>CbProtocolPlugin[email][1.0]</td>
            <td><pre>org.xmlBlaster.protocol.email.CallbackEmailDriver</pre></td>
            <td>You need to activate EMAIL support in your xmlBlaster.properties file
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>responseTimeout</td>
            <td>86400000</td>
            <td>When methods like <code>connect()</code>, <code>publish</code>, <code>subscribe</code> etc.
            is invoked we wait the given time [milli-seconds] on a response, the value must be
            bigger than zero, use Integer.MAX_VALUE for an unlimited setting, the default is to wait for one day.<br />
            The response is the return value or an exception for method invocations which
            are not marked oneway.<br />
            On timeout an exception is thrown which is forwarded to your client code.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>sendResponseSessionId</td>
            <td>true</td>
            <td>
            Add the <code>sessionId="..."</code> xml-attribute to the XmlScript markup?
            For example <code>&lt;update sessionId='fgg694' ...</code>.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>sendResponseRequestId</td>
            <td>true</td>
            <td>
            Add the <code>requestId="..."</code> xml-attribute to the XmlScript markup?
            For example <code>&lt;update requestId='17743005' ...</code>.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>sendSimpleExceptionFormat</td>
            <td>false</td>
            <td>
            If set to true and used with XmlScriptParser the UpdateReturnQos
            has a simple format (even for exceptions) which satisfies the XML-schema
            <a href="http://www.xmlblaster.org/xmlBlaster/src/java/org/xmlBlaster/util/protocol/email/simpleReturnQos.xsd">simpleReturnQos.xsd</a>.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

      </table>

      <p>Note: You can easily re-configure the POP3 and SMTP behavior on a running xmlBlaster
      with JMX</p>
      <p>Note: The current email callback implementation can handle max one connection per email account
       (like 'joe' on the POP3 server) if you don't supply a positive sessionId</p>

   </configuration>
   <todo type="HTML">
      <ol>
      <li>Make last requestId persistent to have loop and sequence protection after a restart</li>
      <li>Currently you can't publish from within an update (will dead lock)</li>
      </ol>
   </todo>
   <see type="REQ">protocol</see>
   <see type="REQ">admin.events</see>
   <see type="API">org.xmlBlaster.util.protocol.email.Pop3Driver</see>
   <see type="API">org.xmlBlaster.util.protocol.email.SmtpClient</see>
   <see type="API">org.xmlBlaster.protocol.email.EmailDriver</see>
   <see type="API">org.xmlBlaster.util.xbformat.XbfParser</see>
   <see type="API">org.xmlBlaster.util.xbformat.XmlScriptParser</see>
   <see type="INTERNET" label="Javamail API">http://java.sun.com/products/javamail/javadocs/index.html?com/sun/mail/smtp/package-summary.html</see>
   <author>mr@marcelruff.info</author>
   <date>2005 11 23</date>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.</test>
   </testcase>
</requirement>

