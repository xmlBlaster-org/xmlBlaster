<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='interface.update' type='NEW' prio='HIGH' status="CLOSED">
   <topic>Clients receive asynchronous messages with the update() method</topic>
   <description>
      <p>
      If clients want to receive callbacks from xmlBlaster they need to install
      a callback server.
      The messages arrive in the <b>update()</b> method.<br />
      The client side callback interface has to support following methods.
      </p>
      <p>
      Callback server method detail (CORBA IDL notation):
      </p>
      <pre>
   typedef string XmlType;
   typedef sequence&lt;XmlType> XmlTypeArr;
   typedef sequence&lt;MessageUnit> MessageUnitArr;

   XmlTypeArr update(in string cbSessionId, in MessageUnitArr msgUnitArr)
                                                     raises(XmlBlasterException);

   oneway void updateOneway(in string cbSessionId, in MessageUnitArr msgUnitArr);

   string ping(in string qos);
      </pre>

      <p>
      As you can see the client has to provide three methods
      (see <a href="http://www.xmlBlaster.org/xmlBlaster/src/java/org/xmlBlaster/protocol/corba/xmlBlaster.idl">xmlBlaster.idl</a>)
      </p>
      <ul>
        <li>update() This is the acknowledged update invocation</li>
        <li>updateOneway() This method has no return value, there is no application level ACK for
                           increased performance</li>
        <li>ping() Allows xmlBlaster to ping the client, currently empty strings "" are expected</li>
      </ul>

      <p>
      As default messages are sent acknowledged, if a client chooses to receive
      oneway messages it has to be configured with the connect QoS
      during <code>connect()</code> or during <code>subscribe()</code>.
      </p>

      <p>
      We discuss here update() only as updateOneway() is just a subtype without return value.
      </p>
         
      <table border="1">
         <tr>
         <th>Parameter</th><th>Type</th><th>Description</th>
         </tr>
         <tr>
         <td>cbSessionId</td><td>string</td><td>A session ID provided by the client on connect()
             by setting the <b>secretCbSessionId</b> in the callback address. It is <b>
             not</b> the normal sessionId used for the connection.
             This allows the clients callback server to decide if it trusts the callback</td>
         </tr>
         <tr>
         <td>msgUnitArr</td><td>MessageUnit[]</td><td>An array of messages</td>
         </tr>
         <tr>
         <td>return</td><td>string</td>
         <td>An array of XML encoded strings containing the status of each message.
         This is the status from the client point of view. The syntax is not
         specified yet, it will be specified when xmlBlaster gets transaction support
         and clients want to participate. For the time being return an empty string ""
         or an empty qos "&lt;qos/>".
         </td>
         </tr>
         <tr>
           <td>XmlBlasterException</td>
           <td>exception</td>
           <td>Thrown on error. The only allowed error codes are of type ErrorCode.USER_UPDATE_..., this is
           for example <i>user.update.internalError</i> or <i>user.update.security.authentication.accessDenied</i>
           See ErrorCode.java for a complete list of error codes.</td>
         </tr>
      </table>

      <p class="celltitel"><a name="exception"></a>Behavior on exceptions thrown by a client in update()</p>

      <p>If the <code>update()</code> methods throws an exception of type <code>
      <a href="http://www.xmlblaster.org/xmlBlaster/doc/client-api/org/xmlBlaster/util/def/ErrorCode.html" target="others">ErrorCode.USER_UPDATE_...</a></code>
      (for example <code>"user.update.error"</code>)
      the server forwards the rejected message to its error handler. The current
      error handler is implemented to publish this message as a 'dead letter', that
      is a message with the <code>key oid='__sys__deadMessage'</code>.<br />
      You can write a client which subscribes to such dead messages and handles
      them appropriate, or at least activate the DeadMessageDumper in <code>xmlBlasterPlugins.xml</code>
      as described in the <a href="admin.errorHandling.html" target="others">requirement admin.errorHandling</a>.</p>
      
      <p>If your client throws a <code>USER_UPDATE_HOLDBACK="user.update.holdback"</code>
      exception the server keeps the message in its callback queue and sets the <code>dispatcherActive=false</code>, that
      means that the xmlBlaster server goes to sleep for this client and won't deliver further update messages.
      It is now up to an administrative command to activate the callback dispatcher again to try to
      redeliver the last message.<br />This is done by a key oid <tt>__cmd:client/receiver/1/?dispatcherActive=true</tt>,
      for more details please see <a href="admin.commands.html#dispatcherActive" target="others">requirement admin.commands</a>.
      </p>
      <p>
      Please note that in the Java client library all other exception types thrown in your
      <code>update()</code> method are
      converted to an <code>ErrorCode.USER_UPDATE_INTERNALERROR="user.update.internalError"</code> before
      being propagated to the server.
      <br />If clients written in other programming languages send a weird exception error code, it is
      handled by the server as "user.update.internalError" (for Corba access since ever,
      for SOCKET and XMLRPC since xmlBlaster 1.3, befor it was a "internal.unknown" or "internal.illegalargument").
      </p>
      <p>If the server gets a communication exception from its dispatcher framework
      it assumes that the client has never seen or processed the message and
      retries to deliver it as configured. A communication exception occurs 
      for example if the network is down or if the client has disappeared. <br />
      The main configuration settings to control the redeliver behavior are
      <a href="client.failsafe.html#configuration" target="others"><code>-dispatch/callback/retries</code></a> and
      <a href="client.failsafe.html#configuration" target="others"><code>-dispatch/callback/delay</code></a>.
      </p>
      <p>A typical fail safe subscriber needs to set at least:</p>
      <pre class="BORDER">java javaclients.HelloWorldSubscribe -session.name SUBSCRIBER/1 -dispatch/callback/retries -1</pre>

      <p>The server side error handler is hidden by an interface and will be
      a plugin in a future version of xmlBlaster to support customized error behavior.<br />
      For example such a plugin can look at the thrown error code or error message and follow specific recovery
      strategies.
      </p>

      <p class="celltitel"><a name="timeout"></a>Behavior on blocking/timeout update()</p>
      <p>
      When the <code>update()</code> callback method is invoked we wait a given time on a response. This
      setting is depending on the communication protocol used.
      The response is the return value or an exception for method invocations which are not marked oneway.
      On timeout an exception is thrown which leads on server side to a dead message (depending on the installed error handler).<br />
      For the <a href="protocol.socket.html#configuration" target="others">SOCKET protocol</a> see <i>plugin/socket/updateResponseTimeout</i>, it defaults to forever - that means
      the <code>update()</code> callback does never timeout.
      </p>

      <h3>Note</h3>
      <p>
      Be prepared to receive all sorts of messages on update, like
      normal messages or internal xmlBlaster messages or administrative command messages.
      </p>

      <h3>Note for XML-RPC Clients</h3>
      <p>
      The update interface differs a little bit with the actual XMLRPC implementation.<br/>
      The update method signature looks like:
      </p>
      <pre>
        string update( string cbSessionId, string key, byte[] content, string qos )
      </pre>
      <p>
      The XmlRpcCallbackImpl.java:update() does not allow to send an array of messages.
      So for each message, XmlBlaster server will call the client's callback update method.<br/>
      </p>

   </description>


   <example lang="XML" type="HTML">
      <p>
      Here is an example of an update message:
      </p>
      <table border="1">
         <tr><td>Key</td><td>&lt;key oid='MyMessage' /></td></tr>
         <tr><td>content</td><td>Hello world</td></tr>
         <tr><td>QoS</td><td>&lt;qos>&lt;state id='OK'>&lt;/qos></td></tr>
      </table>
      <p>
      And a return value from the client (sent back to xmlBlaster):
    </p>
   <table border="1"><tr><td>
   <pre>return "&lt;qos>&lt;state id='OK'/>&lt;/qos>";</pre>
   </td></tr></table>
   </example>
   
   <example lang="XML" type="HTML">
      <p>
      Here is an example of an UpdateQos XML markup which you may receive in the <code>update()</code> method.<br />
      Usually, the first line of an XML document - the XML declaration - defines the XML version and the character encoding used in the document:
      <code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</code>.
      As we support UTF-8 only, which is the XML default, it can be omitted.
      The XML version is 1.0.
      </p>
      <pre>
&lt;qos> &lt;!-- UpdateQos -->

  &lt;state id='OK'/>  &lt;!-- OK,ERASED etc. see Constants.java -->

  &lt;sender>/node/heron/client/Tim/-2&lt;/sender>

  &lt;priority>5&lt;/priority>  <!-- "MIN", "LOW", "NORM", "HIGH", "MAX" -->

  &lt;subscribe id='__subId:heron-2'/>
                                 &lt;!-- Showing which subscription forced the update -->
                                 &lt;!-- PtP messages are marked with '__subId:PtP' -->

  &lt;!-- UTC time when message was created in xmlBlaster server with a publish() call,
          in nanoseconds since 1970 -->
  &lt;rcvTimestamp nanos='1007764305862000002'>
        2001-12-07 23:31:45.862000002 &lt;!-- The nanos from above but human readable -->
  &lt;/rcvTimestamp>

  &lt;!-- remainingLife is calculated relative to when xmlBlaster has sent the message -->
  &lt;expiration lifeTime='129595811' remainingLife='1200'/> <!-- [millisec] -->
  
  &lt;queue index='0' of='1'/> &lt;!-- If queued messages are flushed on login -->
  
  &lt;redeliver>4&lt;/redeliver> &lt;!-- Only sent if message sending had previous errors -->
  
  &lt;clientProperty name='myTransactionId'>0x23345&lt;/clientProperty>
  &lt;clientProperty name='myDescription' encoding="base64" charset="windows-1252">
     QUUgaXMgJ8QnDQpPRSBpcyAn1icNCnNzIGlzICffJw==
  &lt;/clientProperty>
  &lt;clientProperty name='myAge' type='int'>12&lt;/clientProperty>

  &lt;route> &lt;!-- Routing information in cluster environment -->
     &lt;node id='avalon' stratum='1' timestamp='1068026303739000001' dirtyRead='false'/>
     &lt;node id='heron' stratum='0' timestamp='1068026303773000001' dirtyRead='false'/>
  &lt;/route>
&lt;/qos>
      </pre>
   </example>
   
   <example lang="Java" type="HTML">
      <p>
      A typical Java client code to handle message updates:
      </p>
      <pre>
import org.xmlBlaster.client.key.UpdateKey;
import org.xmlBlaster.client.qos.UpdateQos;
...

   public String update(String cbSessionId, UpdateKey updateKey, byte[] content,
                        UpdateQos updateQos) {

      if (updateKey.isInternal()) { // key oids starting with "__" like "__cmd:..."
         System.out.println("Received internal message '" +
              updateKey.getOid() + " from xmlBlaster");
         return "&lt;qos/>";
      }

      if (updateQos.isOk()) {       // &lt;qos>&lt;state id='OK' ...
         System.out.println("Received asynchronous message '" + updateKey.getOid() +
                      "' state=" + updateQos.getState() +
                      " content=" + new String(content) + " from xmlBlaster");
      }
      else if (updateQos.isErased()) {   // &lt;qos>&lt;state id='ERASED' ...
         System.out.println("Topic '" + updateKey.getOid() + " is erased");
         // Remove my subscriptionId if i have cached it ...
         return "&lt;qos/>";
      }
      else {
         System.out.println("Ignoring asynchronous message '" + updateKey.getOid() +
                      "' state=" + updateQos.getState() + " is not handled");
      }
      return "&lt;qos/>";
   }
      </pre>
   <p>
   See xmlBlaster/demo/HelloWorld*.java for more examples.
   </p>
   </example>

   <example lang="Java" type="HTML">
      <p>
      We provide two demo clients which allow playing with the update behavior on command line.
      Here is an example how to simulate a subscriber which throws an exception:
      </p>
      <pre>

java -jar lib/xmlBlaster.jar

java javaclients.HelloWorldSubscribe -updateException.errorCode user.update.error 
                                     -updateException.message "I don't want this"

java javaclients.HelloWorldPublish -numPublish 100
      </pre>
      <p>We start a server and a subscriber which is configured to throw an exception
      if a message arrives, then we start a publisher and publish messages.
      </p>
      <p>
      If we want to look a the generated dead messages we start another subscriber:
      </p>
      <pre>

java javaclients.HelloWorldSubscribe -oid __sys__deadMessage
      </pre>
   </example>

   <configuration>
   </configuration>

   <see type="API">org.xmlBlaster.util.def.PriorityEnum</see>
   <see type="API">org.xmlBlaster.client.key.UpdateKey</see>
   <see type="API">org.xmlBlaster.client.qos.UpdateQos</see>
   <see type="API">org.xmlBlaster.client.I_XmlBlasterAccess</see>
   <see type="API">org.xmlBlaster.client.protocol.corba.CorbaCallbackServer</see>
   <see type="API">org.xmlBlaster.client.protocol.rmi.RmiCallbackServer</see>
   <see type="API">org.xmlBlaster.client.protocol.xmlrpc.XmlRpcCallbackServer</see>

   <see type="API">org.xmlBlaster.util.def.Constants</see>

   <see type="REQ">interface</see>
   <see type="REQ">engine.qos.update.queue</see>
   <see type="REQ">engine.qos.update.rcvTimestamp</see>
   <see type="REQ">engine.qos.update.sender</see>
   <see type="REQ">engine.qos.update.subscriptionId</see>
   <see type="REQ">admin.errorHandling</see>

   <see type="INTERNET">http://www.xmlBlaster.org/xmlBlaster/src/java/org/xmlBlaster/protocol/corba/xmlBlaster.idl</see>

   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 26</date>
   <revision>$Revision: 1.20 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>Tests the update method invocation, this is done implicitly with subscribe tests and erase event tests</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSub</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestErase</test>
   </testcase>
</requirement>

