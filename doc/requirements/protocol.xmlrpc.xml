<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='protocol.xmlrpc' type='NEW' prio='HIGH' status="CLOSED">
   <topic>XmlBlaster supports XmlRpc</topic>
   <description>
      <p>
      The XmlRpc protocol is very simple, it uses http as underlying protocol
      with some XML markup for remote method invocation.
      </p>
      <p>
      XmlBlaster has fully operational XmlRpc support, 
      we provide client examples in C, Perl, PHP, Python, Macromedia Flash, CSharp (C#) and Java which use
      XmlRpc to connect to xmlBlaster. Please see <i>xmlBlaster/demo/javaclients</i>.
      </p>
      <p>
         It is now possible to run xmlrpc over https and through an http Proxy or a reverse Proxy. You could
	 for example choose to run HTTPS to an Apache Server configured as a reverse proxy where the connection
	 to the XmlBlaster Server is done either by HTTP or by HTTPS. In the later case you can let the
	 XmlBlaster Server take care about the authentication of the client.
      </p>
   </description>

   <example lang="Java" type="HTML">
   </example>

   <configuration where="server">
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

         <tr>
            <td>plugin/xmlrpc/hostname</td>
            <td>localhost</td>
            <td>Specify a hostname where the XMLRPC server runs
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/port</td>
            <td>7607</td>
            <td>The XMLRPC server port
                </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/localHostname</td>
            <td>localhost</td>
            <td>The local address the xmlrpc is bound to. 
            Usually this is dynamically choosen by your operating system and you don't need
            to specify it.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/localPort</td>
            <td>8900</td>
            <td>The local port the xmlrpc is bound to.
                Default is -1 and the operating system chooses an arbitrary port.
                </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
<!--
         <tr>
            <td>plugin/xmlrpc/debug</td>
            <td>false</td>
            <td>true switches debugging on
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
-->
         <tr>
            <td>plugin/xmlrpc/useCDATA</td>
            <td>false</td>
            <td>
	       Encapsulates all parameters with a CDATA. Note that you can use this only if
	       you are sure that your Messages do not contain already a CDATA (the key, qos and
	       content), otherwise you will get an exception. This flag is only used for systems
	       which need to validate the content of the message on a protocol layer, for example
	       proxies or firewalls. If unsure leave this untouched. If you set this flag on the
	       server it will modify all updates and callback pings, if you set it on the client
	       it will influence all requests coming from the client. 
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/responseTimeout</td>
            <td>0</td>
            <td>
	    	The time it shall wait in milliseconds before interrupting the request. If zero
		or negative it is not set.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/SoTimeout</td>
            <td>0</td>
            <td>
	    	If zero or negative it is not set. It has the same meaning as for the SOCKET Protocol.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/compress/type</td>
            <td></td>
            <td>
	       Its only possible value is either an empty string (unset) or 'zlib'. Compression will be
	       done on the protocol layer. You only need to define this on the client side, the server
	       will then recognize if the client is expecting compressed or uncompressed data.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/proxyHost</td>
            <td>null</td>
            <td>
	    	If you use a proxy this specifies the hostname or IP of the host to use. Note that if
		you have not specified this property, it will be implicitly set to localhost if you
		specified <i>proxyPort</i>.
	    </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/proxyPort</td>
            <td>null</td>
            <td>
	       If you set this property the protocol will use a proxy, even if you did not explicitly
	       specify a proxyPort or the proxySet property. If you set this property and the proxyHost
	       property is not explicitly set, the later will be set to <i>localhost</i>.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/proxyHostSSL</td>
            <td></td>
            <td>
	       You specify this property only if you want HTTPS Traffic to be directed to a proxy
	       different from the HTTP Proxy. If you do not specify anything here, then the same
	       host will be used for HTTP and HTTPS.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/proxyPortSSL</td>
            <td></td>
            <td>
	       You specify this property only if you want HTTPS Traffic to be directed to a proxy
	       port different from the HTTP Proxy port. If you do not specify anything here, 
	       then the same port will be used for HTTP and HTTPS.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/basicUserName</td>
            <td></td>
            <td>
	       If basic authentication is activated on the server side (for example in a reverse proxy),
	       then you can pass that username here.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/basicPassword</td>
            <td></td>
            <td>
	       If basic authentication is activated on the server side (for example in a reverse proxy),
	       then you can pass the password to be used here.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/xmlrpc/basicEncoding</td>
            <td></td>
            <td>
	       If basic authentication is activated on the server side (for example in a reverse proxy),
	       then you can pass the encoding to be used here.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
<!--
         <tr>
            <td>plugin/xmlrpc/userAgent</td>
            <td>false</td>
            <td>
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
-->
      </table>
   </configuration>
   <configuration where="client">
      <p>The Java xmlrpc implementation on client side supports
         the same properties as the server.
         You need to add the "dispatch/callback/" or "dispatch/connection/" prefix
         to the property key.<br />
         You have thes additional features on client side:
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

      </table>
   </configuration>
   <todo type="HTML">
   </todo>
   <see type="REQ">protocol</see>
   <see type="INTERNET">http://www.xmlrpc.org/</see>
   <see type="API">org.xmlBlaster.protocol.xmlrpc.XmlRpcDriver</see>
   <see type="API">org.xmlBlaster.protocol.xmlrpc.XmlRpcUrl</see>
   <see type="API">org.xmlBlaster.client.protocol.xmlrpc.XmlRpcConnection</see>
   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 05 22</date>
   <revision>$Revision: 1.3 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.</test>
   </testcase>
</requirement>

