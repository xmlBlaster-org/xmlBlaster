<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='mime.plugin.access.xpath' type='NEW' prio='MEDIUM' status='CLOSED'>
   <topic>XmlBlaster allows to access messages filtered with XPath expressions</topic>
   <description>
      <p>
      XmlBlaster allows you to query messages based on their meta information with XPath.
      Sometimes this is not enough and you want to do sort of a <i>full text search</i> over
      the message content, also with XPath, thereby supplying full XML/XPath content based routing of messages.
      </p>
      <p>
      For this frequent use case we deliver a plugin using XPath expressions to check the message <i>content</i>,
      optionally, by setting the property <i>matchAgainstQos=true</i> you can match against
      the QoS of the published message instead of the content.
      </p>
      <p>
      The plugin is registered for the <code>text/xml</code> mime type.
      </p>
      <p>This filter is available for synchronous access with get() and asynchronous access with subscribe()
      and as a filter for xmlBlaster cluster support.<br />
      You can specify the filter rules with two xmlBlaster methods:
      <ol>
         <li>Synchronous access with the get() invocation:<br />
            Specify the filter rule in the QoS of the get() method to filter
            the desired messages. The messages are returned as the get() return value.
         </li>
         <li>Asynchronous access with the subscribe() invocation<br />
            Specify the filter rule in the QoS of the subscribe() method to filter
            the desired messages. The messages are returned with the asynchronous
            update() callback.
         </li>
      </ol>
      </p>
      <p>
      Multiple filters can be specified in one subscribe/get invocation.
      Each of them may address another plugin. They are sequentially executed and if
      one filter denies access (the match() method returns 'false') the message
      is not delivered. The filters are logically AND connected.
      </p>
      <p>
      The cascading approach for XPath/exact query and filters:<br />
      On subscribe first the usual XPATH or exact subscription is checked.
      The client is added as subscriber to all matching message types.
      If now real messages arrive, the filter plugin is additionally filtering
      messages away. The same applies for get() invocations. With the XPath filter is therefore possible to emulate a JMS like topic destination: send messages with the same OID. Subscribe with an exact query on the messages, and filter with the XPathFilter on the content.
      </p>
      <p>
      The XPathFilter is currently based on the Jaxen xpath engine. It is
      also possible to register Jaxen extension functions by specifying them
      in the property <code>engine.mime.xpath.extension_functions</code>. The
      functions must implement the <code>org.jaxen.Function</code> interface.
      </p>
      <p>
      It is possible to specify an XSL file name, this will be applied on the
      message content if the match was successful.
      </p>
   </description>
   <example lang="any" type="HTML">

      <h2>Example key and QoS of a <tt>get()</tt> or <tt>subscribe()</tt> invocation:</h2>

      <pre>
      <![CDATA[
      <key oid="News/>

      <qos>
         <filter type='XPathFilter'>
            /news[@type='sport']
         </filter>
      </qos>
      ]]>
      </pre>

      <p>
      All messages of the topic <tt>oid=News</tt> are first selected.
      Those message are further filtered to contain the attribute type equals sport in the news element.
      </p>
      <p>
      Don't forget to put your query in a   &lt;![CDATA[ ... ]]&gt;  section if you use "&lt;"
      in your query string.
      </p>
   </example>

   <example lang="Java" type="HTML">
      <h2>Code snippet in Java with the <tt>get()</tt> method</h2>
      <pre>
      <![CDATA[
   import org.xmlBlaster.client.qos.GetQos;
   import org.xmlBlaster.util.MsgUnit;
   import org.xmlBlaster.util.qos.AccessFilterQos;

   GetQos qos = new GetQos(glob);

   qos.addAccessFilter(
       new AccessFilterQos(glob, "XPathFilter",
                           "1.0", "/news[@type='sport']"));

   MsgUnit[] msgUnits = con.get(
            "<key oid='News'/>",
            qos.toXml());
      ]]>
      </pre>

      <p>
      The code snippet <code>new AccessFilterQos(...)</code> adds the above raw &lt;filter> xml ASCII string, so we don't need to
      do it our self. The second and third parameters "XPathFilter", "1.0" choose the plugin
      (in this case the XPath plugin) and the fourth parameter add the query rule for
      the plugin (in this case an XPath expression).
      </p>
   </example>

   <example lang="Java" type="HTML">
      <h2>Command line example: Testing your XPath syntax</h2>

      <p>This example allows you to test your XPath queries on command line, first set the CLASSPATH to
      contain the JAXEN libraries</p>
      <tt>export CLASSPATH=$CLASSPATH:$XMLBLASTER_HOME/lib/xpath/jaxen-core.jar: $XMLBLASTER_HOME/lib/xpath/saxpath.jar: $XMLBLASTER_HOME/lib/xpath/jaxen-dom.jar</tt>
      <p> now create a file <code>test.xml</code> with following content</p>
<pre>
&lt;qos>
   &lt;clientProperty name='corrId' type='int'>120001&lt;/clientProperty>

   &lt;clientProperty name='SayHello'>Hello World&lt;/clientProperty>

   &lt;clientProperty name='aKey'>aValue&lt;/clientProperty>

   &lt;clientProperty name='MyXmlString' type='String' encoding='base64'>
      QmxhPEJsYUJsYQ==
   &lt;/clientProperty>
&lt;/qos>
</pre>
      <p>and then start the command line test</p>

      <tt>java org.xmlBlaster.engine.mime.xpath.XPathFilter -inFile test.xml</tt>
      <pre>
xpath> /qos/clientProperty/@name='corrId'
Match: true

xpath> /qos/clientProperty/@name='corYX'
Match: false
      </pre>
      <p>You can now play further with the XPath query as shown above.</p>
   </example>

   <example lang="Java" type="HTML">
      <h2>Command line example: Testing XSLT transformation</h2>

      <p>This example allows you to test your XPath queries with XSLT transformation
      of the message content (first set the CLASSPATH as described in the previous example).
      </p>
      <p>Now change to the directory <code>xmlBlaster/testsuite/data/xml</code>,
      here we have some XML and one XSL file to play with.</p>
      <p>Start the command line test</p>

      <tt>java org.xmlBlaster.engine.mime.xpath.XPathFilter -inFile Airport.xml -xslContentTransformerFileName transformToKeyValue.xsl</tt>
      <pre>
xpath> //subscribe
Match: true
Transformed content:
 &lt;?xml version="1.0" encoding="UTF-8"?>
   &lt;generic>
     &lt;entity name="subscribe">
       &lt;entity name="key">
       ...
      </pre>
      <p>The original file <code>Airport.xml</code> is transformed to the above example output.</p>
   </example>

   <example lang="Java" type="HTML">
      <h2>Command line example: Test the plugin with xmlBlaster</h2>

      <p>Assure that the plugin is registered in xmlBlaster.properties</p>
      <tt>MimeAccessPlugin[XPathFilter][1.0]=org.xmlBlaster.engine.mime.xpath.XPathFilter</tt>

      <p>Start the server</p>
      <tt>java -jar lib/xmlBlaster.jar</tt>

      <p>Start a subscriber</p>
      <tt>java -cp lib/xmlBlaster.jar javaclients.HelloWorldSubscribe -oid Hello -filter.type XPathFilter -filter.query "//tomato"</tt>

      <p>Start a publisher with matching content</p>
      <tt>java -cp lib/xmlBlaster.jar javaclients.HelloWorldPublish -numPublish 10 -oid Hello -content "&lt;tomato/>"</tt>

      <p>Start a publisher with NO matching content</p>
      <tt>java -cp lib/xmlBlaster.jar javaclients.HelloWorldPublish -numPublish 10 -oid Hello -content "&lt;apple/>"</tt>

      <p>Now you can play with the full text filtering feature</p>
   </example>

   <configuration where="server">
      <p>
      If you make a xmlBlaster distribution you must make shure to copy
      </p>
<pre>
   xmlBlaster/lib/xpath/jaxen-core.jar
   xmlBlaster/lib/xpath/jaxen-dom.jar
   xmlBlaster/lib/xpath/saxpath.jar
</pre>
      <p>
      and add the jar files to the CLASSPATH.
      </p>
      
      <p>
      These parameters allow to configure the XPath plugin.
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>MimeAccessPlugin[XPathFilter][1.0]</td>
            <td>org.xmlBlaster.engine.mime.xpath.XPathFilter</td>
            <td>Loads the xpath plugin on demand.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>engine.mime.xpath.types</td>
            <td>text/xml;image/svg+xml</td>
            <td>List of mime type which will trigger this plugin.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>engine.mime.xpath.maxcachesize</td>
            <td>10</td>
            <td>Max cache of loaded DOM trees for messages.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>engine.mime.xpath.extension_functions</td>
            <td>:contains-ignore-case:
                org.xmlBlaster.engine.mime.xpath.ContainsIgnoreCaseFunction;:
                recursive-text:
                org.xmlBlaster.engine.mime.xpath.RecursiveTextFunction</td>
            <td>A semicolon separated list of function definitions.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>matchAgainstQos</td>
            <td>false</td>
            <td>In the default setting the XPath runs against the message content.
            If you set this property to 'true' the XPath runs against the publish QoS of the message.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>xslContentTransformerFileName</td>
            <td>/tmp/myTransform.xsl<br />
            http://www.xmlblaster.org/transformTest.xsl<br />
            ftp://somewhere/xy.xsl
            </td>
            <td>As default there is no XSL file specified. If you name an XSL file it will be
            looked up in the CLASSPATH and all other locations where xmlBlaster looks for configuration files.
            If, and only if, the filter match was successful the message content will be transformed
            with the given XSLT transformation.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>
      <p>Example for <tt>xmlBlaster.properties</tt>:</p>
      <tt>MimeAccessPlugin[XPathFilter][1.0]=org.xmlBlaster.engine.mime.xpath.XPathFilter,engine.mime.xpath.maxcachesize=20</tt>
   </configuration>

   <see type="API">org.xmlBlaster.engine.mime.xpath.XPathFilter</see>
   <see type="API">org.xmlBlaster.engine.mime.xpath.ContainsIgnoreCaseFunction</see>
   <see type="API">org.xmlBlaster.engine.mime.xpath.RecursiveTextFunction</see>
   <see type="API">org.xmlBlaster.util.qos.AccessFilterQos</see>
   <see type="API">org.xmlBlaster.engine.mime.I_AccessFilter</see>
   <see type="API">org.xmlBlaster.util.plugin.I_Plugin</see>
   <see type="REQ">mime.plugin.accessfilter.howto</see>
   <see type="REQ">mime.plugin.accessfilter</see>
   <see type="REQ">cluster</see>
   <author>pra@tim.se</author>
   <author>xmlblast@marcelruff.info</author>
   <date>2003 09 09</date>
   <revision>$Revision: 1.11 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.mime.TestXPathSubscribeFilter</test>
      <test tool="SUITE">org.xmlBlaster.test.mime.TestXPathTransformer</test>
   </testcase>
</requirement>

