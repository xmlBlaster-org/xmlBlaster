<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='client.cache' type='NEW' prio='LOW' status="CLOSED">
   <topic>
      Allows Java clients to poll synchronously for messages with the getCached() method,
      and access the up to date message high performing from a local cache.
   </topic>
   <description>
      <p>
      The Java I_XmlBlasterAccess class (the Java client side interface) has a built in cache.
      If you activate this
      cache with the <i>createSynchronousCache()</i> method,
      the <i>xmlBlasterAccess.getCached()</i> method accesses
      a message on the first call synchronously and returns it to you.
      </p>
      <p>
      Behind the scenes, a <i>subscribe()</i> is done as well, and incoming updates
      of this messages are put into the cache.
      This way the messages in the cache are never outdated.
      Following <i>getCached()</i> invocations for the same message, are retrieved from
      the local cache.
      </p>
      <p>
      <i>getCached()</i> requests where the GetKey contains an EXACT oid are automatically
      removed from cache when the topic with this oid is erased.
      XPATH queries are removed from cache on disconnect. You can explicitly 
      remove XPATH cache entries with 
<pre>
  GetKey getKey = new GetKey(glob, "//key[starts-with(@oid,'foo-')]", Constants.XPATH);
  ...
  SynchronousCache cache = xmlBlasterAccess.createSynchronousCache(100);
  ...
  cache.removeEntryByQueryString(cache.getQueryString(getKey));
</pre>
      </p>
      <p>
      Note that this is a pure client behavior, and for the moment the only reference implementation
      is in Java.
      </p>
      <p>
      A typical use case for this caching feature is a servlet environment
      where synchronous browser requests need high performing html responses.
      </p>
   </description>
   <example lang="Java">
      <![CDATA[
      try {
         xmlBlasterAccess = glob.getXmlBlasterAccess(); // Hides Corba/RMI stuff

         // Setup cache ...
         xmlBlasterAccess.createSynchronousCache(10);

         // and do the login ...
         xmlBlasterAccess.connect(null, this);

         GetKey getKey = new GetKey(glob, "HelloMessage");
         GetQos getQos = new GetQos(glob);

         // This getCached() is only on the first call a write through to xmlBlaster
         // Following calls retrieve the up to date data from the local cache:
         MsgUnit[] msgUnitArr = xmlBlasterAccess.getCached(getKey, getQos);
      }
      catch (XmlBlasterException e) {
          System.out.println("ERROR: " + e.getMessage());
      }
      ]]>
   </example>
   <see>org.xmlBlaster.client.I_XmlBlasterAccess</see>
   <see>org.xmlBlaster.client.SynchronousCache</see>
   <author>Konrad.Krafft@doubleSlash.de</author>
   <hacker>Konrad.Krafft@doubleSlash.de</hacker>
   <hacker>xmlBlaster@marcelruff.info</hacker>
   <date>2000 04 15</date>
   <revision>$Revision: 1.10 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.client.TestSynchronousCache</test>
   </testcase>
</requirement>

