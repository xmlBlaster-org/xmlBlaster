<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='interface.subscribe' type='NEW' prio='HIGH' status="CLOSED">
   <topic>Messages are asynchronous accessed with the subscribe() method</topic>
   <description>
      <p>
      The <b>subscribe()</b> method allows to subscribe for messages in xmlBlaster.
      You can subscribe with exactly one message by passing its oid, or by a
      selection of message by passing a XPATH query.
      </p>
      <p>
      Subscribed messages are sent to the callback servers update() method.
      Clients have to establish a callback server instance to allow asynchronous
      callbacks.
      </p>
      <p>
      Method detail (CORBA IDL notation):
      </p>
      <pre>
   typedef string XmlType;
   typedef sequence&lt;string> StringArr;

   XmlType subscribe(in XmlType xmlKey, in XmlType qos) raises(XmlBlasterException);
      </pre>
         
      <table border="1">
         <tr>
         <th>Parameter</th><th>Type</th><th>Description</th>
         </tr>
         <tr>
         <td>xmlKey</td><td>string</td><td>The XML encoded key containing the oid or XPATH query to select messages to subscribe</td>
         </tr>
         <tr>
         <td>xmlQos</td><td>string</td><td>The XML encoded Quality of Service QoS (see SubscribeQos link below)</td>
         </tr>
         <tr>
         <td>return</td><td>string</td>
         <td>An XML encoded string containing status and the unique
            subscription ID (see SubscribeReturnQos link below).
            You need to remember the subscriptionId for unsubscribing later.
         </td>
         </tr>
         <tr>
         <td>XmlBlasterException</td><td>exception</td><td>Thrown on error</td>
         </tr>
      </table>

      <br />

      <p>
      Here is an overview of all available <b>subscribe QoS</b>:
      </p>
      <pre>
&lt;qos>
   &lt;!-- Force a subscription ID from client side -->
   &lt;subscribe id='__subId:client/subscriber/session/1-exact:MyHelloTopic'/>

   &lt;!-- Recoverable subscription after server crash / restart -->
   &lt;persistent/>

   &lt;!-- Don't send me the xmlKey meta data on updates (default: true) -->
   &lt;meta>false&lt;/meta>
   
   &lt;!-- Don't send me the content data on updates (notify only) (default: true) -->
   &lt;content>false&lt;/content>
   
   &lt;!-- Ignore a second subscribe on same oid or XPATH (default: true) -->
   &lt;multiSubscribe>false&lt;/multiSubscribe>

   &lt;!-- Inhibit the delivery of messages to myself if i have published it (default: true) -->
   &lt;local>false&lt;/local>
   
   &lt;!-- don't send an initial message after subscribe (default: true) -->
   &lt;initialUpdate>false&lt;/initialUpdate>
   
   &lt;!-- send callbacks messages for this subscription with the better performing -->
   &lt;!-- updateOneway() instead of the more reliable update() (default: false) -->
   &lt;!-- Note: The SOCKET protocol plugin supports additionally the faster UDP transfer -->
   &lt;updateOneway>true&lt;/updateOneway>
   
   &lt;!-- Suppress erase event to subscribers (default: true) -->
   &lt;notify>false&lt;/notify>
   
   &lt;!-- Filters messages i have subscribed as implemented in your plugin -->
   &lt;!-- Here we use the RegEx filter and only want content starting with 'H' -->
   &lt;filter type='GnuRegexFilter' version='1.0'>^H.*$&lt;/filter>

   &lt;!-- http://www.xmlblaster.org/xmlBlaster/doc/requirements/engine.qos.queryspec.html -->
   &lt;querySpec type='QueueQuery' version='1.0'>
      &lt;![CDATA[maxEntries=3;maxSize=-1;consumable=false;waitingDelay=0]]&gt;
   &lt;/querySpec>
                                
   &lt;!-- Default is to deliver the current entry (numEntries='1'), '-1' deliver all (default: 1) -->
   &lt;!-- newestFirst let you change the delivery order, it defaults to true -->
   &lt;!-- The higher priority messages are always delivered first. -->
   &lt;!-- In one priority the newest message is delivered first with 'true', setting 'false' -->
   &lt;!-- reverts the delivery sequence in this priority. -->
   &lt;history numEntries='20' newestFirst='true'/>
&lt;/qos>
      </pre>
      <br />
      <h3>Detailed description</h3>
      <table width="100%" border="1">
      <tr>
         <th>Flag</th>
         <th>Description</th>
      </tr>
      <tr>
      <td>persistent</td>
      <td>You can mark a subscription to be persistent. If the server crashes or is restarted the
          clients session and this subscription is restored.
          Please read the 
          <a href="http://www.xmlBlaster.org/xmlBlaster/doc/requirements/engine.persistence.subscription.html">engine.persistence.subscription</a>
          requirements for details.
      </td>
      </tr>
      <tr>
      <td>multiSubscribe</td>
      <td>
     If you subscribe with the same client (the same login session) multiple 
     times to the same message you will receive this message multiple times,
     one update for each subscription. This can be suppressed, for details please
     read the 
     <a href="http://www.xmlBlaster.org/xmlBlaster/doc/requirements/engine.qos.subscribe.multiSubscribe.html">engine.qos.subscribe.multiSubscribe</a>
     requirement.
      </td>
      </tr>
      <tr>
      <td>notify</td>
      <td>If set to true (which is default) an erase notification message is sent
          to the subscriber when the topic is erased.
          The <i>state</i> in the message UpdateQoS is set to Constants.STATE_ERASED="ERASED"
          <br />
          <b>Note:</b> For <i>exact</i> subscriptions this subscription gets invalid when the topic is explicitly erased
          and you need to subscribe again. For <i>XPath</i> subscriptions the subscription remains,
          if the same topic is created again the Xpath will match and renew the subscription. Here you
          may choose to set notify to false.
      </td>
      </tr>
      <tr>
      <td>filter</td>
      <td>To further filter messages with a full text analyze you can add a filter rule.
          Please read the 
          <a href="http://www.xmlBlaster.org/xmlBlaster/doc/requirements/mime.plugin.accessfilter.html">mime.plugin.accessfilter</a>
          requirements for details. There are XPath, regular expression and SQL 92 filter plugins available.
      </td>
      </tr>
      </table>

      <h3>
      A special note how to subscribe in cluster environments:
      </h3>
      <p>
      If you subscribe to a cluster slave node, the subscription is only
      forwarded to a master node if the subscription key matches the configured
      master selection.
      </p>

      <p class="celltitel"><a name="return"></a>The return string of subscribe()</p>
      <p>
      On successful call the subscribe() method returns detailed informations:
      The state = "OK" means everything was successful. <br />
      A state = "WARNING" is indicating that a multiple subscription was ignored.<br />
      A stateInfo = "QUEUED" tells you that the subcription was queued on client side
      as there is currently no connection to the server (we are polling).
      Note that the returned subscriptionId is generated on client side
      and wont match a server side subscriptionId of a previous persistent subscribe.
      </p>
      <p>
     Note:<br />
    If a subscribe is queued on client side the return subscriptionId is generated on client side
    and may on later connect not force to be the same on server side.<br />
    The client side generated is assured to be identical if you use a positive public sessionId
    and have set multiSubscribe to false (a typical fail safe configured client).
    <br />
    1. If pubSessionId>0: &lt;sessionName>-[EXACT:|XPATH:|DOMAIN:][topicOid|queryString]
    <br />
    2. For none fail save clients any unique Id will do
    </p>
    <p>Example of a queued return qos:</p>
    <pre>
&lt;qos>
  &lt;state id='OK' info='QUEUED'/>
  &lt;subscribe id='__subId:client/joe/session/1-1166021247822779000'/>
&lt;/qos>
   </pre>

   </description>


   <example lang="XML" type="HTML">
      <p>
      Here is an example of an exact query:
      </p>
      <table border="1">
         <tr><td>Key</td><td>&lt;key oid='MyMessage' /></td></tr>
         <tr><td>QoS</td><td>&lt;qos>&lt;initialUpdate>false&lt;/initialUpdate>&lt;/qos></td></tr>
      </table>
      <p>
      The topic <i>MyMessage</i> is queried and no initial update
      of existing history messages is delivered.
      </p>
      <p>
      And a return value:
    </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>
   &lt;state id='OK'/>
   &lt;subscribe id='__subId:34023'/>
&lt;/qos>
   </pre>
   </td></tr></table>
   </example>
   
   <example lang="XML" type="HTML">
      <p>
      Here is an example of an XPATH query:
      </p>
      <table border="1">
         <tr><td>Key</td><td>&lt;key oid='' queryType='XPATH'> /xmlBlaster/key[starts-with(@oid,'radar.')]  &lt;/key></td></tr>
         <tr><td>QoS</td><td>&lt;qos/></td></tr>
      </table>
      <p>
      All topics which oid starts with <i>radar.</i> is queried.
      </p>
      <p>
      And the returned value:
    </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>
   &lt;state id='OK'/>
   &lt;subscribe id='__subId:XPATH67'/>
&lt;/qos>
   </pre>
   </td></tr></table>

   </example>

   <example lang="XML" type="HTML">
      <p>
      A subscription in a cluster environment belonging to domain <i>RUGBY_NEWS</i>
      </p>
      <table border="1">
         <tr><td>Key</td><td>&lt;key oid='MyMessage' domain='RUGBY_NEWS' /></td></tr>
         <tr><td>QoS</td><td>&lt;qos/></td></tr>
      </table>
      <p>
      And a return value:
    </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>
   &lt;state id='OK'/>
   &lt;subscribe id='__subId:34023'/>
&lt;/qos>
   </pre>
   </td></tr></table>
   </example>
   
   <example lang="XmlRpc" type="HTML">
      <p>
      This is the XmlRpc server interface variant:
      </p>
      <pre>
   public String subscribe(String sessionId, String xmlKey_literal, String qos_literal)
                                                         throws XmlBlasterException
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code for an EXACT subscription:
      </p>
      <pre>
   import org.xmlBlaster.client.key.SubscribeKey;
   import org.xmlBlaster.client.qos.SubscribeQos;
   import org.xmlBlaster.client.qos.SubscribeReturnQos;

   ...

   SubscribeKey sk = new SubscribeKey(glob, "MyOid");

   SubscribeQos sq = new SubscribeQos(glob);

   SubscribeReturnQos sr = con.subscribe(sk.toXml(), sq.toXml());

   System.out.println("Success, subscriptionId=" + sr.getSubscriptionId());

      </pre>
   <p>
   See xmlBlaster/demo/HelloWorld*.java for more examples.
   </p>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code for an XPATH subscription:
      </p>
      <pre>
   import org.xmlBlaster.client.key.SubscribeKey;
   import org.xmlBlaster.client.qos.SubscribeQos;
   import org.xmlBlaster.client.qos.SubscribeReturnQos;
   import org.xmlBlaster.util.def.Constants;

   ...

   SubscribeKey sk = new SubscribeKey(glob, "/xmlBlaster/key[@oid='radar.track']",
                            Constants.XPATH);

   SubscribeQos sq = new SubscribeQos(glob);

   SubscribeReturnQos sr = con.subscribe(sk.toXml(), sq.toXml());

   System.out.println("Success, subscriptionId=" + sr.getSubscriptionId());

      </pre>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code for a subscriptions in a cluster environment
      which uses selection of master nodes with message domains:
      </p>
      <pre>
   import org.xmlBlaster.client.key.SubscribeKey;
   import org.xmlBlaster.client.qos.SubscribeQos;
   import org.xmlBlaster.client.qos.SubscribeReturnQos;

   ...

   SubscribeKey sk = new SubscribeKey(glob, "MyMessageOid");

   sk.setDomain("RUGBY_NEWS"); // Subscription is forwarded from slaves to master
   // without setting the domain the subscribe would just be handled by the slave connected to

   SubscribeReturnQos sr = con.subscribe(sk.toXml(), null);

   System.out.println("Success, subscriptionId=" + sr.getSubscriptionId());

      </pre>
   </example>


   <configuration>
   </configuration>

   <see type="REQ">interface</see>
   <see type="REQ">engine.qos.subscribe.id</see>
   <see type="REQ">engine.qos.subscribe.duplicate</see>
   <see type="REQ">engine.qos.subscribe.multiSubscribe</see>
   <see type="REQ">client.subscribe.dispatch</see>
   <see type="REQ">mime.plugin.accessfilter</see>

   <see type="LOCAL">../../demo/javaclients/HelloWorldSubscribe.java.html</see>
   <see type="API">org.xmlBlaster.engine.xml2java.XmlKey</see>
   <see type="API">org.xmlBlaster.client.qos.SubscribeQos</see>
   <see type="API">org.xmlBlaster.client.qos.SubscribeReturnQos</see>
   <see type="API">org.xmlBlaster.client.I_XmlBlasterAccess</see>
   <see type="API">org.xmlBlaster.protocol.xmlrpc.XmlBlasterImpl</see>

   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 01</date>
   <revision>$Revision: 1.24 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>Tests the subscribe method invocation</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSub</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubExact</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubXPath</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubManyClients</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubNoDup</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubNotify</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubNoLocal</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubXPathMany</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubDispatch</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubLostClient</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubMulti</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubMultiSubscribe</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.qos.StatusQosFactoryTest</test>
      <test tool="SUITE">org.xmlBlaster.test.cluster.SubscribeTest</test>
      <test tool="SUITE">org.xmlBlaster.test.cluster.SubscribeXPathTest</test>
   </testcase>
</requirement>

