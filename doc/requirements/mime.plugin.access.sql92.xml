<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='mime.plugin.access.sql92' type='NEW' prio='MEDIUM' status='CLOSED'>
   <topic>XmlBlaster allows to access messages filtered with statements conform to the search
          conditions of defined in sql92.
   </topic>
   <description>
      <p>
      XmlBlaster allows you to query messages based on their meta information with a syntax conform to
      the search conditions defined by sql92. This syntax is the same as the one adopted by the
      JMS specification (ver. 1.1).
      </p>
      <p>
      This plugin does a search on the client properties of the qos used to publish a given message.
      Note that the content of the message is not checked, please use the <i>mime.plugin.access.xpath</i>
      or <i>mime.plugin.access.regex</i> plugins for such full text filter tasks.
      </p>
      <p> A typical use case would be the same as you have for a message selector in jms. Suppose for example
      you have designed a solution to manage a taxi center in a town. The taxis are motorcycles, 
      small cars, big cars, mini-vans and limousines.
      The town is divided into several geographical areas. Every GUI is associated with one of these areas.
      You would choose an approach where each of the taxis is a topic (a given oid). Additionally you would
      give the topic's keys a structure similar to the following:
      <pre>&lt;taxi type='motorcycle|small car|big car|mini-van|limousine'/&gt;</pre>.<br/>
      Every unit would publish a message with a key <pre>&lt;key oid='ti4747'>&lt;taxi type='limousine' />&lt;/key></pre>
      (in this case a limo) and in the qos it would add a client property xPos=100 and yPos=120.

      Let's say your GUI is interested in all limos in a limited area. Then it would
      subscribe with XPATH to <pre>//taxi[@type='limousine']</pre> and with the query for the Sql92Filter 
      to be <pre>xPos BETWEEN 0 AND 100 AND yPos BETWEEN 20 AND 130</pre>.
      </p>
      <p>This filter is available for synchronous access with get() and asynchronous access with subscribe()
      and as a filter for xmlBlaster cluster support.<br />
      You can specify the filter rules with two xmlBlaster methods:
      <ol>
         <li>Synchronous access with the get() invocation:<br />
            Specify the filter rule in the QoS of the get() method to filter
            the desired messages. The messages are returned as the get() return value.
         </li>
         <li>Asynchronous access with the subscribe() invocation<br />
            Specify the filter rule in the QoS of the subscribe() method to filter
            the desired messages. The messages are returned with the asynchronous
            update() callback.
         </li>
      </ol>
      </p>
      <p>
      Multiple filters can be specified in one subscribe/get invocation.
      Each of them may address another plugin. They are sequentially executed and if
      one filter denies access (the match() method returns 'false') the message
      is not delivered. The filters are logically AND connected.
      </p>
      <p>
      The cascading approach for XPath/exact query and filters:<br />
      On subscribe first the usual XPATH or exact subscription is checked.
      The client is added as subscriber to all matching message types.
      If now real messages arrive, the filter plugin is additionally filtering
      messages away. The same applies for get() invocations.
      </p>
      <p>Query Syntax (based on the jms specification). It is practically the same as the
         jms specification with an additional REGEX keyword (see below) and a well defined
         behaviour for cases where the identifier is null (in jms the behaviour is undefined when
         an expression contains a null identifier (i.e. if the client property on which a query is
         made does not exist).
      </p>

      <p>
        <center>
        <table width="80%" border="1" BGCOLOR="#ffffaa">
          <tr>
            <td BGCOLOR="#ffffff">
                <b>Literals:</b>
                <ul>
                  <li>A string literal is enclosed in single quotes with an included
                      single quote represented by doubled single quote such as 'literal'
                      and 'literal''s'; like Java <i>String</i> literals these use the
                      unicode character encoding.
                  </li>
                  <li>An exact numeric literal is a numeric value without a decimal point
                      such as 57, -957, +62; numbers in the range of Java <i>long</i> are
                      supported. Exact numeric literals use the Java integer literal syntax.
                  </li>
                  <li>An approximate numeric literal is a numeric value in scientific
                      notation such as 7E3, -57.9E2 or a numeric value with a decimal such
                      as 7., -95.7, +6.2; numbers in the range of Java <i>double</i>
                      are supported. Approximate literals use the Java floating point
                      literal syntax.
                  </li>
                  <li>The boolean literals <i>TRUE </i>and <i>FALSE</i>.</li>
                </ul>
                <br/>
            </td>
          </tr>
          <tr>
            <td BGCOLOR="#ffffff">
                <b>Identifiers:</b>
                <ul>
                  <li>Identifiers use the Java identifier syntax. They are case sensitive.
                  </li>
                  <li>Identifiers cannot be the names <i>NULL</i>, <i>TRUE</i>, or
                      <i>FALSE</i>.
                  </li>
                  <li>Identifiers cannot be <i>NOT, AND, OR, BETWEEN, LIKE, IN</i>, and
                      <i>IS</i>.
                  </li>
                </ul>
                <br/>
            </td>
          </tr>
          <tr>
            <td BGCOLOR="#ffffff">
                <b>Expressions:</b>
                <ul>
                  <li>A selector is a conditional expression; a selector that evaluates to
                      true matches; a selector that evaluates to false or unknown does not
                      match.
                  </li>
                  <li>Arithmetic expressions are composed of themselves, arithmetic
                      operations, identifiers with numeric values and numeric literals.
                  </li>
                  <li>Conditional expressions are composed of themselves, comparison
                      operations, logical operations, identifiers with boolean values and
                      boolean literals.
                  </li>
                  <li>Standard bracketing () for ordering expression evaluation is
                      supported.
                  </li>
                  <li>Logical operators in precedence order: NOT, AND, OR.</li>
                  <li>Comparison operators: =, >, >=, &lt;, &lt;=, &lt;> (not equal). (for not 
                      equal we support also != and ^= which is not defined in jms)
                    <ul>
                      <li>Only <i>like </i>type values can be compared. One exception is that it
                          is valid to compare exact numeric values and approximate numeric
                          values (the type conversion required is defined by the rules of Java
                          numeric promotion). If the comparison of non-like type values is
                          attempted, the selector is always false.
                      </li>
                      <li>In jms <i>String</i> and <i>Boolean</i> comparison is restricted to = and
                          &lt;>. Two strings are equal if and only if they contain the same
                          sequence of characters. Here xmlBlaster has an own extention. Also comparisons
                          between <i>String</i> is allowed. (For example 'London' &lt; 'Paris': alphabetical comparison).
                      </li>
                    </ul>
                  </li>
                  <li>Arithmetic operators in precedence order:
               <ul>
                 <li>+, - unary</li>
                 <li>*, / multiplication and division</li>
                 <li>+, - addition and subtraction</li>
                 <li>Arithmetic operations use Java numeric promotion.</li>
                 <li>For arithmetic operations a NULL term is considered 0 (zero).(own xmlBlaster non jms specification)</li>
               </ul>
                  </li>
        
                  <li><i>arithmetic-expr1 </i>[NOT] BETWEEN <i>arithmetic-expr2 </i>AND<i>
                      arithmetic-expr3</i> comparison operator
                    <ul>
                      <li>age BETWEEN 15 and 19 is equivalent to age >= 15 AND age &lt;= 19
                      </li>
                      <li>age NOT BETWEEN 15 and 19 is equivalent to age &lt; 15 OR age > 19
                      </li>
                    </ul>
                  </li>
                  <li>
                    <i>identifier </i>[NOT] IN (<i>string-literal1, string-literal2,...</i>)<br/>
                      comparison operator where identifier has a <i>String</i> or NULL value.
                      <ul>
                        <li>Country IN ('UK', 'US', 'France') is true for 'UK' and false for
                            'Peru'. It is equivalent to the expression (Country = ' UK') OR
                            (Country = ' US') OR (Country = ' France')
                        </li>
                        <li>Country NOT IN (' UK', 'US', 'France') is false for 'UK' and true
                            for 'Peru'. It is equivalent to the expression NOT ((Country = 'UK')
                            OR (Country = 'US') OR (Country = 'France'))
                        </li>
                        <li>If <i>identifier </i>of an IN or NOT IN operation is NULL the value
                            of the operation is always false.
                        </li>
                      </ul>
                  </li>
        
                  <li><i>identifier </i>[NOT] LIKE <i>pattern-value</i> [ESCAPE<i>escape-character</i>]<br/>
                    comparison operator, where <i>identifier</i> has a <i>String</i> value; <i>pattern-value</i> 
                    is a string literal where '_' stands for any single character; '%' stands for any sequence 
                    of characters (including the empty sequence); and all other characters stand for
                    themselves. The optional <i>escape-character</i> is a single character string literal whose
                    character is used to escape the special meaning of the '_' and '%' in <i>pattern-value</i>.
               <ul>
                 <li><i>phone LIKE '12%3'</i> is true for '123', '12993' and false for '1234'</li>
                 <li><i>word LIKE 'l_se'</i> is true for 'lose' and false for 'loose'</li>
                 <li><i>underscored LIKE '\_%' ESCAPE '\'</i> is true for '_foo' and false for 'bar'</li>
                 <li><i>phone NOT LIKE '12%3'</i> is false for '123' and '12993' and true for '1234'</li>
                 <li>If <i>identifier</i> of a LIKE or NOT LIKE operation is NULL the value of 
                          the operation is false.
                 </li>
               </ul>
                  </li>
        
                  <li>Regex expressions,<br/>
                     where <i>identifier</i> has a <i>String</i>.<b>Note that this is an xmlBlaster specific 
                     extention not specified by jms.</b>
                    <ul>
                      <li><i>phone REGEX '12.*3'</i> is true for '123', '12993' and false for '1234'</li>
                      <li><i>word REGEX 'l.se'</i> is true for 'lose' and false for 'loose'</li>
                    </ul>
                  </li>
        
                  <li><i>identifier</i> IS NULL<br/>
                    comparison operator tests for a null header field value, or a missing property value.
                    <ul>
                      <li><i>prop_name</i> IS NULL</li>
                      <li><i>identifier</i> IS NOT NULL comparison operator tests for the
                          existence of a non null header field value or property value.
                      </li>
                      <li><i>prop_name</i> IS NOT NULL</li>
                    </ul>
                  </li>
                </ul>
            </td>
          </tr>
        </table>
        </center>
      </p>
   </description>

   <example lang="XML" type="HTML">
      <pre>
      <![CDATA[
<!-- cut and paste this text and save it in a file called     
 sql92.xml and then invoke in the same directory          
 java javaclients.script.XmlScript -requestFile sql92.xml 
 -->
<xmlBlaster>


  <connect/>

  <subscribe>
    <key queryType='XPATH'>//taxi[@type='limousine']</key>
    <qos>
       <filter type='Sql92Filter'>
         xPos BETWEEN 0 AND 100 AND yPos BETWEEN 20 AND 130
       </filter>
     </qos>
  </subscribe>
  
  <!-- you should become this one -->
  <publish>
    <key oid='ti4747'><taxi type='limousine'/></key>
    <content>just some content</content>
    <qos>
       <clientProperty type='Integer' name='xPos'>100</clientProperty>
       <clientProperty type='Integer' name='yPos'>120</clientProperty>
    </qos>
  </publish>

  <!-- this one should be rejected by the mime plugin -->
  <publish>
    <key oid='ti4747'><taxi type='limousine'/></key>
    <content>just some content</content>
    <qos>
       <clientProperty type='Integer' name='xPos'>110</clientProperty>
       <clientProperty type='Integer' name='yPos'>120</clientProperty>
    </qos>
  </publish>

  <unsubscribe><key queryType='XPATH'>//taxi[@type='limousine']</key></unsubscribe>
  <erase><key oid='ti4747'></erase>

  <disconnect />

</xmlBlaster>
      ]]>
      </pre>
   </example>

   <example lang="CPP" type="HTML">
      <p>Here an example with the C++ command line clients:
      </p>
      <pre>
java org.xmlBlaster.Main

PublishDemo -clientProperty.key phone -clientProperty.value 1200003

SubscribeDemo -filter.type Sql92Filter -filter.query "phone LIKE '12%3'" 
      </pre>
      <p>
      If you change the publisher <tt>-clientProperty.value</tt> to for example <tt>'1000003'</tt> the subscriber won't receive
      the message.
      </p>
   </example>

   <configuration where="server">
      <p>
      These parameters allow to configure the regex plugin.
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>MimeAccessPlugin[Sql92Filter][1.0]</td>
            <td>org.xmlBlaster.engine.mime.sql92.Sql92Filter</td>
            <td>Loads the sql92 plugin on demand.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>cacheQuery</td>
            <td>false</td>
            <td>if set to true: The query statement is parsed the first time and
            then the prepared query is reused on further queries. This improves 
            performance. Note that it is not clear if it is 100% supported by our cups implementation
            our test show however that it works fine.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>
      <p>
      Example entry in <code>xmlBlaster.properties</code>:
      </p>
      <pre class="BORDER">
MimeAccessPlugin[Sql92Filter][1.0]=org.xmlBlaster.engine.mime.sql92.Sql92Filter,cacheQuery=false
      </pre>
   </configuration>

   <see type="INTERNET">http://www.cacas.org/java/gnu/regexp/</see>
   <see type="INTERNET">http://developer.java.sun.com/developer/technicalArticles/releases/1.4regex/</see>
   <see type="API">org.xmlBlaster.engine.mime.sql92.Sql92Filter</see>
   <see type="API">org.xmlBlaster.util.qos.AccessFilterQos</see>
   <see type="API">org.xmlBlaster.engine.mime.I_AccessFilter</see>
   <see type="API">org.xmlBlaster.util.plugin.I_Plugin</see>
   <see type="REQ">mime.plugin.accessfilter.howto</see>
   <see type="REQ">mime.plugin.accessfilter</see>
   <see type="REQ">cluster</see>
   <author>michele@laghi.eu</author>
   <date>2004 05 26</date>
   <revision>$Revision: 1.1 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.mime.TestGetSql92Filter</test>
   </testcase>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.classtest.Sql92SelectorTest</test>
   </testcase>
</requirement>

