<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='admin.deploy' type='NEW' prio='LOW' status="CLOSED">
   <topic>You can automatically generate an xmlBlaster server distribution for easy deployment</topic>
   <description>
    <p>
    When you have coded your application the time comes where you want to deploy an xmlBlaster
    <b>server instance</b> to the destination hardware.
    This task can be done automatically with ant (build.xml).
    </p>
   </description>

   <example lang="Java" type="HTML">
    <p>
    Lets build a distribution (on UNIX with the shell script 'build', on Windows with 'build.bat'):
    </p>
    <table border="1"><tr><td><pre>

cd xmlBlaster

build  dist
    </pre></td></tr></table>

    <p> The result is:</p>
    <table border="1"><tr><td><pre>

  xmlBlasterDist.jar


and

  xmlBlasterDist-0.79e.zip
    </pre></td></tr></table>

    <p>
    The above jar file you can use directly to start xmlBlaster:
    </p>
    <table border="1"><tr><td><pre>

/opt/jdk/bin/java   -jar  xmlBlasterDist.jar
    </pre></td></tr></table>

    <p>
    The zip file contains the above jar file with some additional
    files:
    </p>
    <table border="1"><tr><td><pre>

xmlBlaster/bin/ns       
xmlBlaster/bin/xmlBlaster.sh  

xmlBlaster/lib/xmlBlaster.jar  

xmlBlaster/config/xmlBlaster.properties.template  
xmlBlaster/config/xmlBlaster.policy  
xmlBlaster/config/jacorb.properties.template  

xmlBlaster/.bashrc      
xmlBlaster/LICENSE      
xmlBlaster/README       
xmlBlaster/INSTALL      
    </pre></td></tr></table>
    <p>
    You can choose to use the jar file or to use the zip file,
    whatever suits your needs better.
    </p>
    <br />

      <p>
      Now one problem remains, how can you customize the included jar file
      and probably using an own property file.
      Imagine you only want to use the CORBA driver and customize the MoM 
      behavior to your needs:
      </p>
      <table border="1"><tr><td><pre> <!-- pre class="BORDER" width="80" (Netscape does not like it) -->

build -DADD_EMAIL=false -DADD_XMLRPC=false -DADD_PROP=my.properties  dist
      </pre></td></tr></table>

      <p>
      This won't add EMAIL and XMLRPC support to the distribution and will
      package your <code>my.properties</code> configuration file into
      xmlBlasterDist.jar instead of the default <code>xmlBlaster.properties</code>
      </p>
      <p>
      Here is a sample <code>my.properties</code>:
      </p>

      <table border="1"><tr><td><pre>

# We use the CORBA protocol driver only:
ProtocolPlugin[IOR][1.0]=org.xmlBlaster.protocol.corba.CorbaDriver
CbProtocolPlugin[IOR][1.0]=org.xmlBlaster.protocol.corba.CallbackCorbaDriver

# We allow a user to login up to one hundred times
session.maxSessions=100
      </pre></td></tr></table>

      <p>
      The nice thing is you can cascade your property files:
      </p>

      <table border="1"><tr><td><pre>

java org.xmlBlaster.Main  -propertyFile mySecond.properties
      </pre></td></tr></table>
      <p>
      Now <code>my.properties</code> is read first as you packaged it
      into the distribution jar file (see above), than your command line
      property file <code>mySecond.properties</code> is read next. The
      command line property file entries have precedence over the property
      file in the distribution jar file.
      </p>

      <p>
      And now a typical UNIX shell script starting xmlBlaster (all in one line):
      </p>
      <table border="1"><tr><td><pre>
      <![CDATA[
java -Xms12M -Xmx128M -jar lib/xmlBlasterDist.jar
      -admin.remoteconsole.port 0
      -logFile /tmp/xmlBlaster.log
      -plugin/xmlrpc/port 8081
      -useKeyboard false  > /tmp/xmlBlaster.log 2>&1 &

echo "xmlBlaster started, see tail -n 100 -f /tmp/xmlBlaster.log"
sleep 5
      ]]>
      </pre></td></tr></table>
   </example>

   <configuration where="server">
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

         <tr>
            <td>DIST_PATH</td>
            <td>local directory</td>
            <td>Choose a PATH where to put the distribution files xmlBlasterDist.jar and xmlBlasterDist-0.79e.zip</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>ADD_EMAIL</td>
            <td>true</td>
            <td>Switch on/off email protocol driver support. If set to true,
             it copies the email supporting jar files as well.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>ADD_CORBA</td>
            <td>true</td>
            <td>Switch on/off corba support. If set to true,
             it copies the IIOP supporting jar files as well.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>ADD_XMLRPC</td>
            <td>true</td>
            <td>Switch on/off XMLRPC support. If set to true,
             it copies the XMLRPC supporting jar files as well.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>ADD_J2EE</td>
            <td>false</td>
            <td>Switch on/off J2EE/JMS bean support. If set to true,
             it copies the EJB/J2EE supporting jar files as well.<br />
             Note: This feature only supports JBOSS with version smaller 2.0</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>ADD_JMXTOOLS</td>
            <td>false</td>
            <td>Switch on JMX HTMLAdaptor support. If set to true,
             it copies the jmxtools.jar as well, see
             http://www.xmlblaster.org/xmlBlaster/doc/requirements/admin.jmx.html#htmladaptor
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>ADD_PROP</td>
            <td>default</td>
            <td>We use the default xmlBlaster.properties. It is possible to use an own
             customized property file like: <code>-DADD_PROP=/home/heidi/my.properties</code>
             </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>ADD_POLICY</td>
            <td>default</td>
            <td>Allows to use a customized RMI security setting. This is only of interest
             if your clients RMI to communicate to xmlBlaster.
             We use the default xmlBlaster.policy file which has switched off all security checks.
             It is possible to use an own
             customized policy file like: <code>-DADD_PROP=/home/heidi/my.policy</code>
             </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>ADD_DIRECTORY</td>
            <td>false</td>
            <td>You can add your own class files to be added to xmlBlasterDist.jar. Typically
             this would be plugins you have written. Note that you can deploy such classes
             separate in your own jar file as well.
             Example: <code>-DADD_PROP=/home/heidi/myproject/classes</code><br />
             This assumes that your Java classes (top of the package) are in the given directory.
             </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>
   </configuration>

   <author>xmlBlaster@marcelruff.info</author>
   
   <date>2002 06 04</date>
   
   <revision>$Revision: 1.14 $</revision>

   <testcase status="CLOSED">
      <name>-</name>
      <comment>Currently not tested</comment>
      <test tool="SUITE"></test>
   </testcase>
</requirement>

