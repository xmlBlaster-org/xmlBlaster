<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">


<requirement id='client.c.windowsCE' type='NEW' prio='HIGH' status='CLOSED'>
   <topic>
      Windows CE based xmlBlaster clients (C, C++, C#).
   </topic>
   <description>
     <p>
     The C client library supports the Windows CE environment. This setup
     is tested for Windows CE 4.2 (Windows Pocket PC 2003) target on a ARMV5 processor (compatible to ARMV4).
     and a Windows Mobile CE 5.2 target with a ARMV8 processor.
     </p>
      <table border="1">
       <tr>
       <th>OS</th>
       <th>Processor</th>
       <th>Comment</th>
       </tr>

       <tr>
       <td>Windows CE 4.2</td>
       <td>ARM</td>
       <td>It should run on any Smart Device (Pocket PC 2003 or
       <a href="http://channel9.msdn.com/wiki/default.aspx/MobileDeveloper.WindowsMobileFAQ"
     target="others">Windows Smartphone 2003</a>
        </td>
       </tr>

       <tr>
       <td>Windows Mobile CE 5.1</td>
       <td>ARM</td>
       <td>HP IPAQ hw6910</td>
       </tr>

      </table>

      <p class="celltitel" id="windows">Unmanaged code access (C,C++)</p>
     <p>To compile the xmlBlasterClientC DLL use the -DWINCE command line setting.</p>
     <p>The outcome is xmlBlasterClientC-Arm4.dll, pthreads270-Arm4.dll and zlib123-Arm4.dll.</p>
     <p>You are now ready to use any C or C++ code to link against the dll.</p>

      <p class="celltitel" id="windows">Managed code access (C#)</p>
     <p>There exists a P/Invoke wrapper around the above C dll
     which allows you to develop in the managed .net world.</p>
     <p>When compiled the default target chosen is Win32 .net 2.x, this works fine
     for example on Windows XP or Windows 2003.</p>
     <p>Please use the following preprocessor defines:</p>
      <table border="1">
       <tr>
       <th>define</th>
       <th>Platform</th>
       <th>Comment</th>
       </tr>

       <tr>
       <td>WINCE</td>
       <td>Windows CE</td>
       <td>To force Windows CE support, any of 'WINCE || Smartphone || PocketPC || WindowsCE' will do the same.
       </td>
       </tr>

       <tr>
       <td>XMLBLASTER_MONO</td>
       <td>Linux</td>
       <td>To compile with mono 1.2 (C# 1 'mcs' or C# 2 'gmcs') on Linux</td>
       </tr>

       <tr>
       <td>DOTNET1</td>
       <td>Windows (XP etc)</td>
       <td>You can force .net 1.x compatible compilation with this flag.
       The outcome is not yet tested. As a default we assume .net 2.x</td>
       </tr>

       <tr>
       <td>CF1</td>
       <td>Windows CE</td>
       <td>To have Windows CE compact framework .net 1.x support, no callbacks are available in this case.
       It is strongly recommended to use the compact framework 2.x, you can
       just install it on your PDA and it will coexist with the CF1.
       </td>
       </tr>

       <tr>
       <td>FORCE_NATIVEC_PLUGIN</td>
       <td>Windows (XP etc)</td>
       <td>All Windows targets use as a default the well tested PInvokeCE.cs wrapper plugin.
         Linux/Mono uses as a default the less tested NativeC.cs wrapper plugin.
         By setting this define on command line you can force the Windows Win32 target to use the NativeC plugin as well
         (don't try it with Windows CE, it will not work).<br />
         You can as well edit XmlBlasterAccess.cs and change the plugin there.</td>
       </tr>
       
      </table>
      <p>Example compilation on a Windows platform (Win32 or CE)</p>
<pre>
cd xmlBlaster\src\csharp

csc /unsafe -debug+ -out:TestPInvoke.exe PInvokeCE.cs XmlBlasterAccess.cs TestPInvoke.cs
</pre>

   <p>Note: The xmlBlasterClientC.dll library is assumed to be in the same directory as the executable
   or available over the PATH setting. You can however force any fixed path by editing PInvokeCE.cs
   and recompile (search for the "xmlBlasterClientC" string).
   </p>

      <p>Example compilation on a Linux platform (mono 1.2)</p>
<pre>
cd xmlBlaster\src\csharp

mcs /d:XMLBLASTER_MONO -debug+ -out:Hello.exe NativeC.cs XmlBlasterAccess.cs Hello.cs
</pre>

      <p class="celltitel" id="windows">Managed code access (C++,VB.net,C#)</p>
      <p>There is a first - not finished - prototype of a managed C++ code.
      Probably this approach is dropped again as the above C# approach covers
      all and can act as a gateway for other .net languages.<br />
      This XmlBlasterManaged.cpp code is based on the new C++/CLI specification
      and is only supported in VC++ 2005 or newer.
      </p>
   </description>

   
   <example lang="C" type="HTML">
      <p class="celltitel" id="windows">Example for a Windows XP setup</p>
      <p>
      Here is an example how to setup the development environment for free on Windows,
      using our ant build to compile.
      </p>
     <p>
     See <a href="http://channel9.msdn.com/wiki/default.aspx/MobileDeveloper.WindowsMobileFAQ" target="others">Visual Studio 2005 versus embedded VC++ 4</a>.
     </p>
     <p>
     Use the zlib 1.2.3 - http://www.zlib.net/ - and compile yourself for Windows CE.
     Set /DZLIB_DLL  (and /D_WIN32_WCE if not defined yet) and switch off pre-compiled headers
     (exclude gzio.c and example.c).<br />
     To switch zlib on during xmlBlasterClientC compilation use the compiler define XMLBLASTER_ZLIB=1.
     </p>
     <p>
     To have single threaded xmlBlaster access (to publish(), get(), but no update())
     please set the compiler define XB_NO_PTHREADS=1. Like this you avoid to install pthreads.
     </p>
     <p>
     To have full multi threaded access with xmlBlaster callbacks please
     link against the pthreads-win32 2.7.0 library from http://sources.redhat.com/pthreads-win32/.<br />
     Download the patch for Windows CE from http://www.xmlBlaster.org/wince/pthreads-2006-11-29.patch
     and apply it on pthreads 2.7.0 or better the cvs checkout from 2006-11-29.<br />
     Compile pthread.c, pthread.h and config.h with the compiler defines /DWINCE and /D_ARM_. (all other files
     are automatically added by pthread.c)<br />
     </p>
   </example>

   <example lang="C" type="HTML">
      <p class="celltitel" id="linux">Example for a Linux development setup</p>
      <p>
      Here is an example how to setup the development environment for free on Linux.
      </p>
      <table border="1">
       <tr>
       <th>Tool</th>
       <th>Version</th>
       <th>Comment</th>
       </tr>

       <tr>
       <td>synce tools</td>
       <td><a href="http://synce.sourceforge.net" target="others">synce</a></td>
       <td>Access your PDA from Linux over USB, bluetooth or Ethernet (WLAN),
        get the PDA GUI onto your Linux desktop</td>
       </tr>

       <tr>
       <td>g++ crossompiler</td>
       <td><a href="http://sourceforge.net/projects/cegcc" target="others">cegcc</a></td>
       <td>Crosscompiler: Edit and compile on Linux, run on Windows CE</td>
       </tr>

      </table>
   </example>

   <example lang="Csharp" type="HTML">
      <p class="celltitel" id="csharp">Accessing xmlBlaster from C#</p>
      <p>
      We provide a wrapper around our Windows CE xmlBlaster client library called
      <a href="http://www.xmlBlaster.org/xmlBlaster/src/csharp/PInvokeCE.cs.html" target="others">xmlBlaster/src/csharp/PInvokeCE.cs</a>.
      </p>
      <p>
      It wraps the xmlBlasterClientC-Arm4.dll (and pthreads270-Arm4.dll, zlib123-Arm4.dll).
      Like this any C# code can access xmlBlaster with compression support, multithreaded and with
      tunneled callbacks.
      </p>
      <p>
      A demo client to get you started is 
      <a href="http://www.xmlBlaster.org/xmlBlaster/src/csharp/TestPInvoke.cs.html" target="others">xmlBlaster/src/csharp/TestPInvoke.cs</a>.
      </p>
      <p>
      You need to compile the three dlls yourself or download them at 
      <a href="http://www.xmlblaster.org/xmlBlaster-win-dll-1.4-15829M.zip" target="others">http://www.xmlblaster.org/xmlBlaster-win-dll-1.4-15829M.zip</a>.
      Then create a VC++ 8.0 project for Smartphone or PocketPC or Windows Mobile and compile Hello.cs, TestPInvoke.cs or your own client.
      </p>
   </example>

   <example lang="C" type="HTML">
      <p class="celltitel" id="linux">Example message delivery</p>
      <p>
      The following screenshot shows the connection properties (jconsole server side)
      from a Psion Workabout Pro running Windows CE 4.2 with a Intel XScale StrongARM
      400 MHz processor.
      </p>
      <p>
      It is connected over WLAN to a Linux box on which the xmlBlaster server is running.<br />
      At the time of the screenshot there were almost a quarter million messages delivered
      with a throttled publish rate of 12 messages/sec (the publisher runs on a Linux box).
      The latency (sending one message and receiving a ACK for it) is ~7 milliseconds.
      </p>
      <center><p>
      <img src="client.c.windowsCE.jconsoleToPsionArm5.png"
       border="0" title="Windows CE client example" alt="Example for a Windows CE client connected to xmlBlaster" />
      </p></center>
      <p>The test finished with one million messages send to the PDA without any problems.</p>
      <center><p>
      <img src="client.c.windowsCE.screenshot.png"
       border="0" title="Windows CE client screenshot" alt="Example for a Windows CE client connected to xmlBlaster" />
      </p></center>
   </example>

   <configuration where="client">
      <p><a NAME="config"></a>
      These configurations are tested:
      </p>
      <table border="1">
       <tr>
       <th>No.</th>
       <th>OS</th>
       <th>Compiler</th>
       <th>xmlBlaster</th>
       <th>Thread library</th>
       <th>Protocol library</th>
       <th>XML library</th>
       <th>Date</th>
       <th>Author</th>
       <th>Comment</th>
       </tr>

       <tr>
       <td>1</td>
       <td>Windows XP</td>
       <td><a href="http://www.microsoft.com/" target="others">VC++ 8.0</a></td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/CHANGES">1.4+</a></td>
       <td><a href="http://www.gnu.org/software/libc/" target="others">pthread 2.7.0</a></td>
       <td>SOCKET <a href="http://www.xmlBlaster.org/xmlBlaster/doc/requirements/protocol.socket.html" target="others">protocol.socket requirement</a></td>
       <td>-</td>
       <td>2006-11-28</td>
       <td><a href="mailto:xmlBlaster@marcelruff.info">Marcel</a></td>
       <td>If you need compressed communication please use <a href="http://www.zlib.net/" target="others">zlib 1.2.3</a></td>
       </tr>
       <tr>
       <td>2</td>
       <td>Linux</td>
       <td><a href="http://sourceforge.net/projects/cegcc/" target="others">CE g++ 4.1</a></td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/CHANGES">1.4+</a></td>
       <td>Linux pthreads</td>
       <td>SOCKET <a href="http://www.xmlBlaster.org/xmlBlaster/doc/requirements/protocol.socket.html" target="others">protocol.socket requirement</a></td>
       <td>-</td>
       <td>2006-11-28</td>
       <td><a href="mailto:xmlBlaster@marcelruff.info">Marcel</a></td>
       <td>If you need compressed communication please use <a href="http://www.zlib.net/" target="others">zlib 1.2.3</a>
       <a href="http://www.gnu.org/software/libc/" target="others">libc 2.4</a></td>
       </tr>
      </table>

   </configuration>

   <todo type='HTML'>
   </todo>

   <see type="CODE" lang="C">HelloWorld.c</see>
   <see type="CODE" lang="C">XmlBlasterAccessUnparsed.h</see>
   <see type="INTERNET">http://sources.redhat.com/pthreads-win32/</see>
   <see type="INTERNET">http://www.gzip.org/zlib/</see>
   <see type="REQ">client.c.socket</see>
   <see type="REQ">protocol.socket</see>
   <see type="REQ">client.c.queue</see>
   <see type="REQ">client.csharp</see>
   <see type="REQ">interface</see>

<!--   <see type="REQ">cluster</see> -->
   <author><a href="mailto:mr@marcelruff.info">Marcel Ruff</a></author>
   <date>2006 11 28</date>
   <revision></revision>

   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE" lang="C">TestMethods</test> <!-- TestMethods.c -->
   </testcase>
</requirement>

