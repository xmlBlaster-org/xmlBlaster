<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='interface.get' type='NEW' prio='HIGH' status="CLOSED">
   <topic>Synchronous message access with the get() method</topic>
   <description>
      <p>
      The <b>get()</b> method allows to retrieve messages from xmlBlaster.
      You can access exactly one message by passing its oid, or a
      selection of messages by passing an XPATH query.
      </p>
      <p>
      Method detail (CORBA IDL notation):
      </p>
      <pre>
   typedef string XmlType;
   typedef sequence&lt;MessageUnit> MessageUnitArr;

   MessageUnitArr get(in XmlType xmlKey, in XmlType xmlQos)
                                          raises(XmlBlasterException);
      </pre>
         
      <table border="1">
         <tr>
         <th>Parameter</th><th>Type</th><th>Description</th>
         </tr>
         <tr>
         <td>xmlKey</td><td>string</td><td>The XML encoded key containing the oid or XPATH query to select messages to get</td>
         </tr>
         <tr>
         <td>xmlQos</td><td>string</td><td>The XML encoded Quality of Service QoS (see GetQos link below)</td>
         </tr>
         <tr>
         <td>return</td><td>MessageUnit[]</td><td>An array of messages</td>
         </tr>
         <tr>
         <td>XmlBlasterException</td><td>exception</td><td>Thrown on error</td>
         </tr>
      </table>


       <p>
      Here is an overview of all available <b>get QoS</b>:
      </p>
      <pre>
&lt;qos>
   &lt;!-- Don't return the content data of the message (notify only) -->
   &lt;content>false&lt;/content>

   &lt;!-- Filters messages as implemented in the specified plugin -->
   &lt;!-- Here we use the regex filter and only want contents starting with the letter 'H' -->
   &lt;filter type='GnuRegexFilter' version='1.0'>
      ^H.*$
   &lt;/filter>

   &lt;!-- Default is to deliver the current entry (numEntries='1'), '-1' deliver all (default: 1) -->
   &lt;!-- newestFirst let you change the delivery order, it defaults to true -->
   &lt;!-- The higher priority messages are always delivered first. -->
   &lt;!-- In one priority the newest message is delivered first with 'true', setting 'false' -->
   &lt;!-- reverts the delivery sequence in this priority. -->
   &lt;history numEntries='20' newestFirst='true'/>
&lt;/qos>
      </pre>

      <br />
      <h3>
      A special note how to use get() in cluster environments:
      </h3>
      <p>
      If you invoke get() on a cluster slave node, the request is only
      forwarded to a master node if the key matches the configured
      master selection.
      </p>

   </description>


   <example lang="XML" type="HTML">
      <p>
      Here is an example of an exact query:
      </p>
      <table border="1">
         <tr><td>Key</td><td>&lt;key oid='MyMessage' /></td></tr>
         <tr><td>QoS</td><td>&lt;qos/></td></tr>
      </table>
      <p>
      And a return value:
    </p>
     <table border="1">
         <tr><td>Key</td><td>&lt;key oid='MyMessage' /></td></tr>
         <tr><td>content</td><td>Hello world</td></tr>
         <tr><td>QoS</td><td>&lt;qos>&lt;state id='OK'>&lt;/qos></td></tr>
     </table>
   </example>
   
   <example lang="XML" type="HTML">
      <p>
      Here is an example of an XPATH query:
      </p>
      <table border="1">
         <tr><td>Key</td><td>&lt;key oid='' queryType='XPATH'> /xmlBlaster/key[starts-with(@oid,'radar.')]  &lt;/key></td></tr>
         <tr><td>QoS</td><td>&lt;qos/></td></tr>
      </table>
   </example>

   <example lang="XML" type="HTML">
      <p>
      get() in a cluster environment belonging to domain <i>RUGBY_NEWS</i>
      </p>
      <table border="1">
         <tr><td>Key</td><td>&lt;key oid='MyMessage' domain='RUGBY_NEWS' /></td></tr>
         <tr><td>QoS</td><td>&lt;qos/></td></tr>
      </table>
   </example>
   
   <example lang="XmlRpc" type="HTML">
      <p>
      This is the XmlRpc server interface variant:
      </p>
      <pre>
   public Vector get(String sessionId, String xmlKey_literal, String qos_literal)
                     throws XmlBlasterException
      </pre>
   </example>

   <example lang="RMI" type="HTML">
      <p>
      This is the RMI server interface variant:
      </p>
      <pre>
   public MsgUnit[] get(String sessionId, String xmlKey_literal, String qos_literal)
                            throws RemoteException, XmlBlasterException
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code for an EXACT subscription:
      </p>
      <pre>
   import org.xmlBlaster.client.key.GetKey;
   import org.xmlBlaster.client.qos.GetQos;
   import org.xmlBlaster.util.MsgUnit;
   ...

   GetKey sk = new GetKey(glob, "MyOid");

   GetQos sq = new GetQos(glob);

   MsgUnit[] msgs = con.get(sk.toXml(), sq.toXml());

   System.out.println("Success, retrieved " + msgs.length + " messages.");

      </pre>
   <p>
   See xmlBlaster/demo/HelloWorld*.java for more examples.
   </p>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code for an XPATH subscription:
      </p>
      <pre>
   GetKey sk = new GetKey(glob, "/xmlBlaster/key[@oid='radar.track']",
                            Constants.XPATH);

   GetQos sq = new GetQos(glob);

   MsgUnit[] msgs = con.get(sk.toXml(), sq.toXml());
      </pre>
   <p>
   The same in raw XML notation:
   </p>
      <pre>
   MsgUnit[] msgs = con.get("&lt;key oid=\"/xmlBlaster/key[@oid='radar.track']\" />", "&lt;qos/>");
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code for retrieval in a cluster environment
      which uses selection of master nodes with message domains:
      </p>
      <pre>
   GetKey sk = new GetKey(glob, "MyMessageOid");

   sk.setDomain("RUGBY_NEWS"); // Subscription is forwarded from slaves to master
   // without setting the domain the get would just be handled by the slave connected to

   MsgUnit[] msgs = con.get(sk.toXml(), null);
      </pre>
   </example>


   <configuration>
   </configuration>

   <see type="REQ">interface</see>

   <see type="LOCAL">../../demo/javaclients/HelloWorldGet.java.html</see>
   <see type="API">org.xmlBlaster.client.qos.GetQos</see>
   <see type="API">org.xmlBlaster.client.I_XmlBlasterAccess</see>
   <see type="API">org.xmlBlaster.util.MsgUnit</see>
   <see type="API">org.xmlBlaster.protocol.xmlrpc.XmlBlasterImpl</see>
   <see type="API">org.xmlBlaster.protocol.rmi.XmlBlasterImpl</see>
   <see type="REQ" label="Query history/callback/subject queue (sync)">engine.qos.queryspec.QueueQuery</see>

   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 30</date>
   <revision>$Revision: 1.10 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>Tests the get method invocation (cluster test is missing!)</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestGet</test>
   </testcase>
</requirement>

