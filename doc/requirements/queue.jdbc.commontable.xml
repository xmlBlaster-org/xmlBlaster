<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">


<requirement id='queue.jdbc.commontable' type='NEW' prio='HIGH' status='DEPRECATED'>
   <topic>
     JDBC Plugin which stores all queues on a common table.
   </topic>

   <description>
   <p><b>
   This was the default persistence implementation until releas 1.6.4, please
   read <a href="http://www.xmlblaster.org/xmlBlaster/doc/requirements/queue.jdbc.html" target="others">queue.jdbc</a>
   for migration details.
   </b></p>
     <p>
     When using the <i>org.xmlBlaster.util.queue.jdbc.JdbcQueuePlugin</i> XmlBlaster handles jdbc persistent storage
     by using a pool of tables. When a queue is created, such a table is used to store messages of that queue.
     When the queue is destroyed, the associated table is put back in the pool of free tables. If there is 
     need for further tables, xmlBlaster automatically adds tables to the pool.
     </p>
     <p>
     For systems where the programmatical creation of tables on the DB is not allowed, it would become 
     unpractical or even prohibitive to create a sufficient amount of tables for the freetables pool by hand.<br/>
     For such situations an alternative approach can be used which uses a limited number of tables.
     This approach is used by the class <i>org.xmlBlaster.util.queue.jdbc.JdbcQueueCommonTablePlugin</i>.
     </p>
     <p>
       <b>Concept</b><br/>
       All necessary information will be contained in one table. The name of the table is configurable with
       the configuration file. More about that in the configuration section. Lets call the table
       <b><i>Entries</i></b>.
     </p>
     <p>
     As already said, all entries are put in a common bucket, unaware of which cluster they belong. In many
     applications this must be avoided. You can isolate the entries on a <i>per cluster basis</i> or on a 
     <i>per cluster-group basis</i> by having defined different names for the different tables.
     </p>
     <p>
     When you start xmlBlaster for the first time you may want to let it create the necessary table. In 
     other situations you would like to prevent it to be done (for example because lack of authorization).
     For these purposes you can use the <b><i>dbAdmin</i></b> flag
     </p>
     <p>
     If there is the need to create the tables manually here follows the code to use (note that it is
     parameterized).
     <pre>
#
# General settings (independent from database implementations)
# 
# ${Entries} XMLBLASTERENTRIES
#
#  For postgres:
#
# ${string}  text
# ${longint} bigint 
# ${int}     integer
# ${boolean} char(1)
# ${blob}    bytea
#
#  For Oracle:
#
# ${string}  VARCHAR(128)
# ${longint} NUMBER(19)
# ${int}     NUMBER(10)
# ${boolean} CHAR(1)
# ${blob}    long raw
#

CREATE TABLE ${Entries} (dataId ${longint},
                         queueName ${string},
                         prio ${int},
                         flag ${string},
                         durable ${boolean},
                         byteSize ${longint},
                         blob ${blob},
                         PRIMARY KEY (dataId, queueName),
     </pre>
     </p>
    </description>


   <configuration where="server">

     To activate persistence please add the following to your properties file:
     <pre>
persistence/defaultPlugin=CACHE,1.0
queue/defaultPlugin=CACHE,1.0
useTopicStore=true
     </pre>

     <pre>
StoragePlugin[JDBC][1.0]=org.xmlBlaster.util.queue.jdbc.JdbcQueueCommonTablePlugin,\
                         entriesTableName=ENTRIES,\
                         tableNamePrefix=XB,\
                         dbAdmin=true,\
                         configurationIdentifier=mySpecialDB
     </pre>
     <table border="1">
        <tr>
          <td><b>Property</b></td>
          <td><b>default</b></td>
          <td><b>comment</b></td>
        </tr>
        <tr>
          <td>entriesTableName</td>
          <td>ENTRIES</td>
          <td>the name postfix for the table containing the entries.</td>
        </tr>
        <tr>
          <td>tableNamePrefix</td>
          <td>XB</td>
          <td>the name prefix for the table containing the entries. Note that the complete names for the 
              tables are created by adding the tableNamePrefix to the names. So if you specify 
              <i>entriesTableName=ENTRIES</i> and <i>tableNamePrefix=XB_</i> you will get the name of the table 
              to be <i>XB_ENTRIES</i>.
          </td>
        </tr>
        <tr>
          <td>dbAdmin</td>
          <td>true</td>
          <td>if set to true xmlBlaster will try to create tables if needed.</td>
        </tr>
        <tr>
          <td>configurationIdentifier</td>
          <td>$DatabaseMetaData.getDatabaseProductName()$</td>
          <td>The ID to assign to this configuration. Its only purpose is to find the correct Mapping
              declaration for this database configuration. This name must match the name inside the
              square brackets. If you define configurationIdentifier=myStrangeDB here, then you will
              need to define the associated mapping: 
              JdbcDriver.mapping[myStrangeDB]=longint=numeric (19),boolean=char(1),blob=image. If
              you don't define anything here, then the database product name is taken (which you get
              with DatabaseMetaData.getDatabaseProductName()).
          </td>
        </tr>

         <tr>
            <td>connectionPoolSize</td>
            <td>1</td>
            <td>the number of connections to the DB (tests showed that a low number gives the best performance).</td>
         </tr>
         <tr>
            <td>connectionBusyTimeout</td>
            <td>90000</td>
            <td>The time to wait in milliseconds until to timeout when waiting for a connection to the DB.</td>
         </tr>
         <tr>
            <td>maxWaitingThreads</td>
            <td>300</td>
            <td>The maximum number of threads waiting for a connection to the DB.</td>
         </tr>
         <tr>
            <td>tableNamePrefix</td>
            <td>xmlBlaster</td>
            <td>The prefix to use in the tablenames. All tables used will start with the uppercase of the text specified here. Do not choose 
            names which are too long since many DB have a limited tablename length.</td>
         </tr>
         <tr>
            <td>maxStatementLength</td>
            <td>2048</td>
            <td>The maximum SQL statement length supported by this JDBC driver.
            If the JDBC meta data delivers this information this property is ignored.</td>
         </tr>
         <tr>
            <td>enableBatchMode</td>
            <td>true</td>
            <td>Tells the driver to make the addition of entries in batch mode, i.e. several entries are
                added in the same sweep. This can improve performance on some DB's significantly. The 
                drawback is that it could loose performance and create noisy logs in the case you insert
                several entries and one of them is already in the DB. Then everything would be rolled back
                and repeated in single mode (we can not save the current state since PostGres implicitly
                aborts transactions in case of an SQLException is thrown). If the DB used does not support
                batch mode, then this option is ignored.
            </td>
         </tr>
         <tr>
            <td>cascadeDeleteSupported</td>
            <td>true</td>
            <td>Tells the driver that cascade delete is supported. When this is set (default), deleting a
                queue will delete all entries within the same SQL statement.
            </td>
         </tr>
         <tr>
            <td>nestedBracketsSupported</td>
            <td>true</td>
            <td>Tells the driver wether nested brackets are supported or not. It normally is supported.
            </td>
         </tr>
     </table>

There is also the need to specify which mapping to use for the conversion from java types to the
types used for a particular database. This is done with the <b>JdbcDriver.mapping[xxx]</b> property. The
value specified here as <i>xxx</i> is the plugin property <b>configurationIdentifier</b>
     <pre>
JdbcDriver.mapping[myStrangeDB]=string=text,\
                                longint=bigint,\
                                int=integer,\
                                boolean=char(1),\
                                blob=bytea,\
                                pingStatement=SHOW ALL,\
                                blobVarName=blob,\
                                keyAttr=
     </pre>

     <table border="1">
        <tr>
          <td><b>Subproperty</b></td>
          <td><b>default</b></td>
          <td><b>comment</b></td>
        </tr>
        <tr>
          <td>string</td>
          <td>text</td>
          <td>The name be used for the java.String type</td>
        </tr>
        <tr>
          <td>longint</td>
          <td>bigint</td>
          <td>The name be used for the java.Long type (or long)</td>
        </tr>
        <tr>
          <td>int</td>
          <td>integer</td>
          <td>The name be used for the java.Integer (or int) type</td>
        </tr>
        <tr>
          <td>boolean</td>
          <td>char(1)</td>
          <td>The name be used for the java.Boolean (or boolean) type (a char is used since oracle does not support boolean)</td>
        </tr>
        <tr>
          <td>blob</td>
          <td>bytea</td>
          <td>The name be used for the blobs (mapped to byte[])</td>
        </tr>
        <tr>
          <td>pingStatement</td>
          <td>SHOW ALL</td>
          <td>The SQL stement to use to simulate a ping to the DB</td>
        </tr>
        <tr>
          <td>blobVarName</td>
          <td>blob</td>
          <td>The name to assign to the table column for the blob. This has been added since the name <i>blob</i>
              is invalid because it is an internal keyword.
          </td>
        </tr>
        <tr>
          <td>keyAttr</td>
          <td>(empty string)</td>
          <td>Additional attributes to the PRIMARY KEY to describe the primary key. Some DB need <i>not null</i> being added here</td>
        </tr>
     </table>
 Note that the separator for the subproperties is a comma (,). If for some reasons you need to use a 
 comma inside the subproperty (for example if you want to define  <i>...,longint=decimal(19,0),...</i>, then 
 you can surround <b>the whole subproperty</b> (important) by a double quote (") as 
 <i>...,"longint=decimal(19,0)",...</i>

   </configuration>

   <see type="API">org.xmlBlaster.util.queue.I_Queue</see>
   <see type="API">org.xmlBlaster.util.queue.jdbc.JdbcQueueCommonTablePlugin</see>
   <see type="API">org.xmlBlaster.util.queue.QueuePluginManager</see>
   <see type="API">org.xmlBlaster.util.queue.I_QueueEntry</see>
   <see type="API">org.xmlBlaster.util.qos.storage.QueuePropertyBase</see>
   <see type="API">org.xmlBlaster.util.I_Plugin</see>
   <see type="API">org.xmlBlaster.util.Global</see>
   <see type="REQ">queue</see>
   <see type="REQ">queue.jdbc</see>
   <see type="REQ">queue.jdbc.postgres</see>
   <see type="REQ">queue.jdbc.oracle</see>
   <see type="REQ">queue.jdbc.firebird</see>
   <see type="REQ">queue.jdbc.sqlserver</see>
   <see type="REQ">queue.jdbc.hsqldb</see>
   <see type="REQ">queue.jdbc.mysql</see>
   <see type="REQ">queue.jdbc.ldbc</see>

<!--   <see type="REQ">cluster</see> -->
   <author>michele@laghi.eu</author>
   <date>2003 01 28</date>
   <revision>$Revision: 1.12 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.classtest.queue.I_QueueTest</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.queue.JdbcQueueTest</test>
   </testcase>
</requirement>

