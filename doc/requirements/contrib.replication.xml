<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='contrib.replication' type='NEW' prio='HIGH' status="CLOSED">
   <topic>
      Replication is a plugin framework used to replicate data between database (RDBMS) sources and sinks.
   </topic>

   <description>
     <p>
     <h2>Replication Overview</h2>
       The Replication framework makes use of the DbWatcher- and the DbWriter frameworks. Its goal is to offer the xmlBlaster user a way to
       replicate data from one or several source databases to one or more sink databases. The framework has been designed for a singlemaster
       multislave approach. What does that mean ? It means that it does not offer any conflict resolution mechanism. In other words it is safe
       for cases where you have one master database, also called the source for the replication, and one or more slaves, also called the 
       sinks of the replication or replicas. It will not be safe where you have more than one master. There are situations where this 
       framework is currently used with more than one source for one sink, but there are limitations, for example you must ensure that the 
       same data (at least on a row granularity) always comes from one single source.
    </p>
    <p>
       <center><img src="replWithXmlBlaster.png" alt="replication with xmlBlaster"/></center>
    </p>
    <p>Which features does this framework offer ? <br />
      <ul>
        <li>Single Master / Multi Slave approach</li>
        <li>Conventional one to one Replication</li>
        <li>Replication with Data Manipulation on a per sink individual basis with no intervention on the master side</li>
        <li>Replication with Data Filtration on a per sink individual basis with no intervention on the master side</li>
        <li>Use of all Communication Protocols offered by XmlBlaster (even the most fancy ones)</li>
        <li>Persistence of Messages, Failover and guaranteed sequence of messages</li>
        <li>Transactions are handled atomically and sent in a single Message</li>
        <li>Possibility to interchange this with other sources/sinks for for example Meta-Databases</li>
        <li>Plugin approach to allow business-specific functionality</li>
        <li>Possibility to intermix different database versions and vendors</li>
        <li>Performance tuning for specific vendors (for example for initial update)</li>
        <li>Highly Compressed communication</li>
        <li>Encrypted and secure replication</li>
        <li>Unlimited number of sinks</li>
        <li>Efficient and reliable even on unreliable networks</li>
      </ul>
    </p>
    <p>
    Why yet another replication solution when there are so many out there already ?<br/>
    Because it is difficult (or impossible) to find a replication software which can offer all of the following:
    <ul>
      <li>Replicate between different databases (different versions or different vendors)</li>
      <li>Allow individual (specific for every sink) business specific manipulation or filtering</li>
      <li>pass complex and high secure gateways or firewalls</li>
      <li>open source</li>
      <li>replicated is xml based and can be used directly on an application level</li>
      <li>...</li>
    </ul>
    </p>
    <p>
      Since the framework is highly flexible, it is also quite complex. Probably the simplest way to describe it is with an easy 
      tutorial. I will start with a very simple use case. Parallely a description of what is going on behind the scenes will also be given.
      <b>Prerequisistes for this tutorial is that you have an oracle database up and running.</b>
    </p>
    <p>
      The demo is also available as a Flash movie <a href="http://www.xmlBlaster.org/liveDemos/replicationDemo.html">here</a>.
    </p>
    <p>
    <h2>Prepare, build and start the server</h2><br/>
       <ul>
         <li>To avoid messy and strange behaviours make sure you don't have any old configuration around. Consider that as cleaning up the
         kitchen before starting to cook a good meal, and believe me, this meal is really good! <br/>
         You can clean up by changing to your home directory and delete <tt>xmlBlaster.properties</tt> and <tt>xmlBlasterPlugins.xml</tt>
         </li>
         <li>Delete old peristent queues. These normally reside in your <tt>${HOME}/tmp</tt> directory. It normally suffices to 
             delete all <tt>xmlBlaster*</tt> and <tt>client*</tt> files.
         </li>                                                                          
         <li>open the ${HOME}/xmlBlasterPlugins.xml file and uncomment the <b>MX4JAdaptorPlugin</b>, this way it will become active.
         </li>
         <li>Go to your ${XMLBLASTER_HOME} Directory and set the environment (in unixes with <tt>. .bashrc</tt>).</li>
         <li>Start the xmlBlaster with JMX enabled: 
             <pre>

      java org.xmlBlaster.Main -xmlBlaster/jmx/HtmlAdaptor true

             </pre>
         </li>
       </ul>
    </p>

    <p><h2>Start the Demo Client for the Replication</h2>
    <ul>
      <li>Go to your ${XMLBLASTER_HOME} Directory and set the environment (in unixes with <tt>. .bashrc</tt>).</li>
      <li>Go to the directory where the demo resides: <tt>${XMLBLASTER_HOME}/demo/javaclients/contrib/replication</tt>.</li>
      <li>Put in this directory the jdbc driver you want to use. Currently we only have tested with Oracle, so copy the latest driver
          (we used <tt>ojdbc14.jar</tt>) and put it in this directory. </li>
      <li>Add this directory and the jar file to the CLASSPATH (unixes: <tt>export CLASSPATH=.:ojdbc14.jar:${CLASSPATH}</tt>).</li>
      <li>Edit the first three lines of the files in the current directory <tt>readerDemo1.properties</tt> and <tt>writerDemo1.properties</tt>
          to make them correspond to your database. The settings are currently pointing to an oracle database on the localhost on the default
          port with a SID=TEST, and a user (or schema) XMLBLASTER</li>
      <li>Now you will start the client. The client is composed by a master (the reader of the database or source), and a slave (which is the
          destination of the Replication). Internally xmlBlaster uses here a DbWatcher and a DbWriter. Invoke:
          <pre>

 java javaclients.contrib.replication.ReplDemo -master readerDemo1.properties -slave writerDemo1.properties -interactive true

          </pre>
          You will see the client starts and both the reader and the writer connect to the xmlBlaster. At the end you will see the
          text <b>REPLICATION AGENT IS NOW READY</b> and a prompt appears. If you press <tt>ENTER</tt>, then a new line appears.
          On the line you could now execute SQL Statements. The prompt tells you on which Database instance the SQL Statement will be executed.
          Here you see <b>master</b> telling you the statements will be executed on the master and therefore will be replicated. If you would 
          have started only the slave, the prompt <b>slave</b> would have appeared. Of course for the sake of simplicity we are using one single
          database here.
       </li>
       <li>In the configuration file you defined the tables to be replicated:
          <pre>

  table.${db.user}.DEMO_USERS=trigger=DEMO_USERS_TRG

          </pre>
          Meaning <b>DEMO_USERS</b> and <b>DEMO_ACCOUNTS</b> will be replicated, of course if and only if they exist. You also
          can see the trigger name used to detect changes on the <b>DEMO_USERS</b> will be called <b>DEMO_USERS_TRG</b>. Not choosing anything 
          here would let the application decide a name for it. 
<!--      
          In the second line you also have actions and sequence defined. <b>actions</b> is a list of 
          actions on which the trigger will fire. Here IDU stands for <tt>I(nsert), D(elete) and U(pdate)</tt>. These are the only three actions allowed.
          IDU is the default. <b>sequence</b> is the sequence number on which the Table will be replicated. This is important if you have foreign keys,
          then the referenced tables must be replicated first. Unspecified sequences will be processed before any specified. Internally, the
          sequence among all unspecified ones is determined by the application (this is currently undefined but plugins will allow control). 
-->

        </li>
        <li>Now you can add the table <b>DEMO_USERS</b> by typing on the command line of the started client:
        <pre>

  create table demo_users (account varchar(100) not null, name varchar(100), firstname varchar(100), primary key(account))
        
        </pre>
           When completed press <tt>ENTER</tt>.
        </li>
        <li>Once the table has been created it is time to populate it with some data:
           <pre>

  insert into demo_users values ('account1', 'Topo', 'Gigio')
  insert into demo_users values ('account2', 'Mister', 'Bean')

           </pre>
        </li>

    </ul>
    </p>
    <p><h2>Start the JMX Monitor to initiate the Replication</h2>
      Open an html browser of your choice, for example Firefox. Point it to <a href="http://localhost:9999">http://localhost:9999</a>. You 
      will see something like the following:
    </p>
    <p>
      <center>
        <img src="./contrib.replication.mx4j01.png" alt="start replication"/>
      </center>
    </p>
    <p>
      The <b>Source</b> (here DEMO_) is the prefix identifying the source of the replication. The <b>Destination</b> is the name identifying the
      Destination of the replication. In this demo you only have one possible combination allowed. So click on the <b>Initiate Repl.</b> Button.
      This way the replication will start. 
    </p>
    <p>By clicking on the button you will be redirected to another page displaying all initiated and running replications. In this case you only 
    have one single entry.
    </p>
    <p>
      <center>
        <img src="./contrib.replication.mx4j02.png" alt="replication list"/>
      </center>
    </p>
    <p>
     Note that the status is initially switching from blue to yellow. When it is in the blue phase (INITIAL), the source is prepared for the
     replication. During this phase the Active/Standby Status is in Standby. This means the replication is temporarly hold back, no message
     is sent to the destination. <br/>
     After a very short time the status switches to blue (TRANSITION). During this phase the source is ready and the messages are delivered to
     the destination but the destination is not completely up to date yet. You will see that during this phase the Active/Standby flag is on 
     <b>Active</b> meaning processed messages are delivered immediately.
    </p>
     <p>
     When all initial messages have been delivered, the status is switching again, this time from yellow to green (RUNNING). From now on the 
     destination is ready and the initial data have been replicated.
     </p>
     <p>On the server logs you will see that the initial command has been executed and on the client logs you will see the PL/SQL Code of 
        the trigger followed by a sequence of two XmlBlaster Messages each in xml format. The first of them is the <b>CREATE</b> statement 
        itself and the second is the message containing all initial data of the replicated table.
    </p>
    <p>You can now verify that the new table <b>DEMO_USERS_REPLICA</b> really has been created and that it contains the same entries as the
    source by invoking on the prompt:
      <pre>

   select * from demo_users_replica

      </pre>
      This way you replicated data from one table to another.
    </p>
    </description>

<!--
   <example lang="any" type="HTML">
     <h2 id="exampleTimestamp">Timestamp based polling example</h2>
     <p>Lets create a database table <tt>TEST_POLL</tt> which contains a <tt>TIMESTAMP</tt> column <tt>TS</tt> (tested on Oracle):</p>
   </example>

   <example lang="any" type="HTML">
     <h2 id="exampleMD5">MD5 based polling example</h2>
   </example>
-->

   <configuration where="server"> 
   </configuration>

   <see type="API">org.xmlBlaster.contrib.dbwriter.DbWriter</see>
   <see type="API">org.xmlBlaster.contrib.dbwatcher.DbWatcher</see>
   <see type="API">org.xmlBlaster.contrib.replication.ReplicationAgent</see>
   <see type="API">org.xmlBlaster.contrib.replication.ReplSlave</see>
   <see type="API">org.xmlBlaster.contrib.replication.impl.ReplManagerPlugin</see>
   <see type="INTERNET" label="Replication Documentation">http://www.xmlBlaster.org/replication/index.html</see>
   <see type="REQ">contrib.dbwatcher</see>
   <see type="REQ">contrib.dbwriter</see>
   <author>laghi@swissinfo.org</author>
   <hacker>laghi@swissinfo.org</hacker>
   <date>2005 12 19</date>
   <revision>$Revision$</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.contrib.dbwriter.TestRecordParsing</test>
   </testcase>
</requirement>

