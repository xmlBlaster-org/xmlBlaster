xmlBlaster/demo/javaclients/cluster/gateway/README  2008-04-14, marcel

Connect cluster slaves to a master and the master reuses the socket
to tunnel messages back to the slaves. Works with or without SSL configuration.

Please read the cluster requirement

  http://www.xmlblaster.org/xmlBlaster/doc/requirements/cluster.html

first.

This setup how many cluster nodes (avalon,frodo) use the same
gateway (heron) to communicate to each other.


 clientA -+
          |avalonDomain
  ...     +-- avalon(7501)---SOCKET-+
          |                         |
 clientN -+                         |
                                    +-(7700)heron -- (clients)
 clientP -+                         |
          |frodoDomain              |
  ...     +-- frodo(7503)---SOCKET--+
          |
 clientR -+


NOTE 1: You HAVE TO start all examples in the current directory
   xmlBlaster/demo/javaclients/cluster/socket
   to assure the xmlBlasterPlugins.xml and *.properties files are found.

NOTE 2: Assure that xmlBlasterPlugins.xml has the plugin 'cluster' configured
   with the create='true' attribute (this is the default setting)

NOTE 3: You can switch on specific logging to get a better idea what
   happens, typically this is a good choice:
   -logging/org.xmlBlaster.engine.RequestBroker FINER -logging/org.xmlBlaster.engine.cluster FINE -logging/org.xmlBlaster.client FINE

NOTE 4: You can monitor and control the cluster nodes with JMX (e.g. jconsole)
   See: MBeans -> org.xmlBlaster -> /node/heron/service/ClusterManager


2. Start avalon (the xmlBlaster slave node):
============================================

   cd xmlBlaster/demo/javaclients/cluster/socket

 Optionally edit avalon.properties and change the IP variable to your host
  
   java -Dcom.sun.management.jmxremote org.xmlBlaster.Main -propertyFile avalon.properties

 'avalon' listens now on socket port 7501.
 We have switched on logging of method calls in the 'core'
 to see when messages arrive.
 You can use the JMX 'jconsole' GUI application if you want to have more control over avalon.


 And frodo:

   cd xmlBlaster/demo/javaclients/cluster/socket
   java -Dcom.sun.management.jmxremote -Xdebug -Xrunjdwp:transport=dt_socket,address=localhost:8003,server=y,suspend=n org.xmlBlaster.Main -propertyFile frodo.properties


3. Start a client connecting to avalon:
=======================================

   java -Dcom.sun.management.jmxremote javaclients.HelloWorldPublish -dispatch/connection/plugin/socket/port 7501 -numPublish 2000 -session.name pubisher/2 -persistent true -oid Hello -domain frodoDomain -content "We win"
   
     (add -destination /node/heron/client/subscriber/session/1 for PtP)

 This publisher connects to the slave 'avalon'.
 The port 7501 is the same as specified for avalon in avalon.properties.
 We publish up to 20 messages, each must be sent by hitting
 enter on your console.
 We login with the name 'publisher' with the well known public
 session ID '2' which allows us to poll for the server 'avalon'
 if it is not yet running on our startup.


4. Start heron (the master):
============================

   java -Dcom.sun.management.jmxremote org.xmlBlaster.Main -propertyFile heron.properties -logging/org.xmlBlaster.engine.RequestBroker FINER

 Heron should be contacted by avalon and receive the
 tailed back message sent by pubisher/2


5. Add a subscriber at frodo:
=============================

   java -Dcom.sun.management.jmxremote javaclients.HelloWorldSubscribe -dispatch/connection/plugin/socket/port 7503 -oid Hello -session.name subscriber/1 -persistentSubscribe true -multiSubscribe false -dispatch/callback/retries -1 

 This subscriber connects to 'frodo' (port 7503) and subscribes to topic "Hello"

 An arriving message from the avalon publisher has a Qos like this:
  <qos>
  <subscribable/>
  <sender>/node/avalon/client/pubisher/2</sender>
  <subscribe id='__subId:client/subscriber/session/1-exact:Hello'/>
  <expiration lifeTime='-1' forceDestroy='false'/>
  <rcvTimestamp nanos='1208178261894000000'/>
  <queue index='0' size='1'/>
  <persistent/>
  <forceUpdate/>
  <route>
   <node id='avalon' stratum='2' timestamp='1208178261869000000' dirtyRead='false'/>
   <node id='heron' stratum='1' timestamp='1208178261887000000' dirtyRead='false'/>
   <node id='frodo' stratum='0' timestamp='1208178261894000000' dirtyRead='false'/>
  </route>
  <isUpdate/>
 </qos>



NOTE: You can now play with this setup, for example
kill a cluster node, publish a message and restart the cluster
node to verify that no messages are lost.


Example for a C++ client:
=========================

   PublishDemo -dispatch/connection/plugin/socket/port 7501 -numPublish 2000 -session.name pubisher/2 -persistent true -oid PublishToSlave.RUGBY_NEWS -domain RUGBY_NEWS -content "We win" -destination client/subscriber/session/1


Other examples:
===============

Publish to avalon without domain:
java -Dcom.sun.management.jmxremote javaclients.HelloWorldPublish -dispatch/connection/plugin/socket/port 7501 -numPublish 2000 -session.name pubisher/3 -persistent true -oid Hello

Publish to heron without domain:
java -Dcom.sun.management.jmxremote javaclients.HelloWorldPublish -dispatch/connection/plugin/socket/port 7700 -numPublish 2000 -session.name pubisherToHeron/2 -persistent true -oid Hello

Publish to heron with avalon domain:
java -Dcom.sun.management.jmxremote javaclients.HelloWorldPublish -dispatch/connection/plugin/socket/port 7700 -numPublish 2000 -session.name pubisherToHeron/2 -persistent true -oid Hello -domain avalonDomain

Subscribe to heron with avalon domain:
java -Dcom.sun.management.jmxremote javaclients.HelloWorldSubscribe -dispatch/connection/plugin/socket/port 7700 -oid Hello -session.name subscriberToHeron/1 -persistentSubscribe true -multiSubscribe false -dispatch/callback/retries -1 -domain avalonDomain

Subscribe to avalon with heronDomain:
java -Dcom.sun.management.jmxremote javaclients.HelloWorldSubscribe -dispatch/connection/plugin/socket/port 7501 -oid Hello -session.name subscriberToAvalon/1 -persistentSubscribe true -multiSubscribe false -dispatch/callback/retries -1 -domain heronDomain

Debug heron remotely:
java -Dcom.sun.management.jmxremote -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n org.xmlBlaster.Main -propertyFile heron.properties

Debug avalon remotely:
java -Dcom.sun.management.jmxremote -Xdebug -Xrunjdwp:transport=dt_socket,address=localhost:8002,server=y,suspend=n org.xmlBlaster.Main -propertyFile avalon.properties
