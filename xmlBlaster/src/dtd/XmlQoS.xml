xml version='1.0' encoding='ISO-8859-1' ?>

<!DOCTYPE xmlBlaster SYSTEM "XmlQoS.dtd">

<!-- Example of possible XML QoS (quality of services) -->
<!-- Note that the <demo> and <publish> etc. tags are NOT used when sending messages -->
<!-- you have to send only the <qos ...> tag and its descendant to the xmlBlaster -->

<demo>

   <!-- QoS when publishing without addressing (clients need to subscribe) -->
   <publish>
      <qos>
         <sender> <!-- Who published this message (the login name) -->
            jack
         </sender>
         <priority>5</priority>
      </qos>
   </publish>


   <!-- QoS when publishing with direct addressing or broadcast -->
   <publish>
      <qos>
         <destination queryType='EXACT'>
            Tim
            <ForceQueuing />                 <!-- If the destination client is not logged in, queue the messages ->
         </destination>                      <!-- Default is no queuing and you get an exception if the client is not reachable -->

         <destination queryType='EXACT'>
            Ben
            <ForceQueuing timeout='12000' /> <!-- If the destination client is not logged in, queue the messages -->
         </destination>                      <!-- for a maximum of timeout seconds (timeout is not yet supported!) -->

         <destination queryType='XPATH'>
            //[GROUP='Manager']
         </destination>

         <destination queryType='XPATH'>
            //ROLE/[@id='Developer']
         </destination>

         <sender> <!-- Who published this message (the login name) -->
            joe
         </sender>
      </qos>
   </publish>


   <!-- QoS when publishing, supported flags -->
   <publish>
      <qos>
         <sender> <!-- Who published this message (the login name) -->
            joe
         </sender>

         <priority>5</priority> <!-- Priority of message, 9 is highest whereas 0 is lowest -->

         <expiration remainingLife='12000' />  <!-- Expires after given milliseconds (message is erased),
                               clients will get a notify about expiration
                               This value is calculated relative to the rcvTimestamp in the xmlBlaster server -->
                          <!-- Default is no expiration (similar to pass -1 milliseconds) -->
                          <!-- A second attribute timestamp='' may be added in a future version,
                               allowing to pass absolute UTC millis since 1970 instead of the relative remainingLife
                               or a form of <expiration type='absolute' ... with year/month ... specified -->

         <isVolatile>false</isVolatile> 
                          <!-- A non-volatile messages stays in memory as long as the server runs or until it is erased explicitly -->
                          <!-- A volatile messages exists only during publish and processing it (doing the updates). -->
                          <!-- Default is false -->

         <isDurable />    <!-- The message shall be recoverable if xmlBlaster crashes -->
                          <!-- If you use this feature, you normally give the message a well known key oid -->
                          <!-- Default is transient -->

         <forceUpdate />  <!-- An update is forced even when the content and meta data didn't change (default) -->
                          <!-- Setting this to false does not resend identical messages (performance gain) -->

         <readonly />     <!-- A final/const message which may not be changed with further updates -->
                          <!-- Default is Read/Write -->

         <route>          <!-- server internal added routing informations -->
            <node id='bilbo' stratum='2' timestamp='34460239640'/>
            <node id='frodo' stratum='1' timestamp='34460239661'/>
            <node id='heron' stratum='0' timestamp='34460239590'/>
         </route>

         <!-- NOT YET SUPPORTED: START -->
         <defaultContent> <!-- Used content if the content given is null -->
            Empty
         </defaultContent>

         <check lang='TCL'> <!-- Allow content checking with a scripting language -->
            $content GE 100 <!-- Scripting inside xmlBlaster is not yet supported (JACL, Javascript) -->
         </check>

         <alter lang='TCL'> <!-- Allow content manipulation with a scripting language -->
            set content [$key('4711') * 1.2 + $content] <!-- Scripting inside xmlBlaster is not yet supported (JACL, Javascript) -->
         </alter>
         <!-- NOT YET SUPPORTED: END -->

      </qos>
   </publish>


   <!-- QoS when accessing messages -->
   <get>
      <qos>
         <meta>false</meta>       <!-- Don't send me the key meta data on updates -->
         <content>false</content> <!-- Don't send me the content data on updates (notify only) -->
      </qos>
   </get>


   <!-- QoS when subscribing to messages -->
   <subscribe>
      <qos>
         <meta>false</meta>       <!-- Don't send me the xmlKey meta data on updates -->
         <content>false</content> <!-- Don't send me the content data on updates (notify only) -->
         <local>false</local>     <!-- Inhibit the delivery of messages to myself if i have published it -->
         <filter type='ContentLenFilter' version='1.0'>
            800                   <!-- Demo Plugin limiting the max. update message content length to 800 bytes -->
         </filter>
         <queue relating='unrelated' maxMsg='1000' maxSize='4000' onOverflow='deadLetter'>
            <!-- Qualifies the session based queue, with a maximum of 1000 messages
                 or 4000 KBytes of capacity, whichever is reached first.
                 If exceeded a dead letter is published -->
            <callback type='EMAIL' sessionId='sd3lXjs9Fdlggh'>
               et@mars.universe   <!-- Sends messages to et with specified queue attributes -->
            </callback>
         </queue>
      </qos>
   </subscribe>


   <!-- QoS when unsubscribing from a message -->
   <unSubscribe>
      <qos>
      </qos>
   </unSubscribe>


   <!-- QoS when deleting messages -->
   <erase>
      <qos>
         <notify>false</notify>     <!-- The subscribers shall not be notified when this message is destroyed -->
      </qos>
   </erase>


   <!-- QoS when updating messages and for return values of get() method -->
   <update>
      <qos>
         <state id='EXPIRED'/>     <!-- Server state -->
                          <!-- OK | EXPIRED | ERASED -->

         <sender>         <!-- The publisher login name of this message -->
            Phillipe
         </sender>

         <subscriptionId> <!-- The same id which you got returned from your previous subscribe() call -->
            Subscription-00 0F 42 37 1A 20 1B 47 28 49 -192.168.10.212-null-952096108799-1
         </subscriptionId>

         <rcvTimestamp nanos='1007764305862000006' nanos='123456789'> <!-- UTC time when message was created in xmlBlaster server with a publish() call -->
            2001-12-07 23:31:45.862000006 <!-- The nanos from above human readable -->
         </rcvTimestamp>

         <expiration remainingLife='12000' />  <!-- Expires after given milliseconds (message is erased), clients will get a notify about expiration -->
                                            <!-- This value is calculated relative to the current time on sending the message from xmlBlaster -->

         <queue index='0' of='1'> <!-- If queued messages are flushed on login -->
         </queue>

         <redeliver>0</redeliver> <!-- If > 0, the message is redelivered after a failure -->

         <route>          <!-- server internal added routing informations -->
            <node id='bilbo' stratum='2' timestamp='34460239640'/>
            <node id='frodo' stratum='1' timestamp='34460239661'/>
            <node id='heron' stratum='0' timestamp='34460239590'/>
         </route>
      </qos>
   </update>


   <!-- From callback server returned QoS when updating messages (return values of update() method) -->
   <update>
      <qos>
         <state id='OK'/>   <!-- Server state OK | ERROR -->
      </qos>
   </update>


   <!-- QoS with login or connect -->
   <connect>
      <qos>
         <securityService type="simple" version="1.0">
           <![CDATA[
             <user>michele</user>
             <passwd>secret</passwd>
           ]]>
         </securityService>
         <session timeout='3600000' maxSessions='20'>
         </session>

         <!-- compress / burstMode / ptp are allowed in all callback types -->
         <!-- Use CORBA to callback messages, on error retry 5 times pausing 60000 millis between retries -->
         <callback type='IOR' sessionId='4e56890ghdFzj0' pingInterval='60000' retries='5' delay='60000' useForSubjectQueue='true' oneway='true'>
            IOR:00011200070009990000....
            <compress type='gzip' minSize='1000' />
                      <!-- compress messages bigger 1000 bytes before sending them to me -->

            <burstMode collectTime='400' /> <!-- Collect messages for 400 milliseconds and update
                       them in one callback (burst mode)
                       This update mode is a 'transaction' for all collected messages -->
                       <!-- other attributes like numMsg or maxSize could allow other 'transaction' ranges -->
         </callback>
         <callback type='XML-RPC' sessionId='sldg03loQ22'>
            http:/www.mars.universe:8080/RPC2
         </callback>
              <!-- The session id is passed to the client callback server, he can check
              if he trusts this sender, it defaults to the login name of the sender -->

         <callback type='SOCKET'>
            192.168.1.2:33301
         </callback>

         <queue relating='session' maxMsg='1000' maxSize='4000' onOverflow='deadLetter'/>
            <!-- Qualifies the session based queue, with a maximum of 1000 messages
                 or 4000 KBytes of capacity, whichever is reached first.
                 If exceeded a dead letter is published -->

         <queue relating='subject' maxMsg='1600' maxSize='2000' expires='360000000' onOverflow='block' onFailure='deadLetter'/>
            <!-- The login name based queue expires after given milliseconds.
                 If exceeded the oldest message(s) is discarded -->
            <callback type='EMAIL'>
               et@mars.universe
               <ptp>false</ptp> <!-- Set this flag if you don't want to receive any PtP messages -->
                         <!-- prevents 'spamming' -->
            </callback>
         </queue>
      </qos>
   </connect>

</demo>


