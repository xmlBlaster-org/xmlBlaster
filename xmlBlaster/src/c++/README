INTRODUCTION:
=============

This is the implementation of the xmlBlaster client classes in c++.
They are helper classes for simple CORBA or SOCKET based access to xmlBlaster.

The C++ source code is compiled to a shared library

   xmlBlaster/lib/libxmlBlasterClient.so

(the extension is .so on Linux, .sl on HPUX, .dll on Windows)


Please read:

  http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.cpp.html
  
  http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.cpp.compile.html

  http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.cpp.socket.html


Protocol:

  You can choose to use the CORBA plugin or the SOCKET plugin
  or compile both simultanously to access the Java xmlBlaster server.


HOW TO RUN THE TESTSUITE:
=========================

Read ${XMLBLASTER_HOME}/testsuite/src/c++/README

To manually start a test look at the file test.sh in that directory.


And now some additional notes:
==============================

These C++ classes are practically a clone to the java-client & util classes (at
the time of writing this, some of the util classes in java have moved out from
xmlBlaster to jutil). Some slight differences are:

- The classes you will not find in the Java-implementation:
        StringStripper, StringStripper2, StringTrim and NameServerControl.
        These are used to simplify the use of the NameService. StringTrim
        implements methods to handle trimming of strings the same way as
        String.trim() does in java.

- Locales are not implemented (this affects the way logging looks like).

- Notes on corba compatibility

     It is well known that different corba implementors handle things in
     different ways. This starts with the names of the corba header files, the
     names of the files generated from the idl compiler, idl-compiler flags,
     and to some extend method-names (sometimes even things wich are
     well-defined by the specification).

     In writing the c++ client classes I tried to keep the implementor-
     specific stuff in a header- and a source file:

        client/protocol/corba/CompatibleCorba.h and client/protocol/corba/CompatibleCorba.cpp

     In the header file, macros, header file names etc. are specified, while
     in the source file, special non-standard functions encapsulate
     implementor-specific (but usefull) functions.

     So if you want to make xmlBlaster work with other corba implementors, you
     must first define a new name (in CompatibleCorba.h) telling which corba
     to use. At present the following names are identified:

        - XMLBLASTER_OMNIORB
        - XMLBLASTER_ORBACUS
        - XMLBLASTER_MICO
        - XMLBLASTER_TAO
        - XMLBLASTER_ORBIX

     Then you define all the header filenames  (look at the MICO or TAO
     case).


Cheers & good Luck

Michele (laghi@swissinfo.org)
Marcel (xmlBlaster@marcelruff.info)
