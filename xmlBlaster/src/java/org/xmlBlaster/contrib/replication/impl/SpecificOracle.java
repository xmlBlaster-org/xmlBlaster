/*------------------------------------------------------------------------------
Name:      SpecificDefault.java
Project:   xmlBlaster.org
Copyright: xmlBlaster.org, see xmlBlaster-LICENSE file
------------------------------------------------------------------------------*/

package org.xmlBlaster.contrib.replication.impl;

import java.sql.Types;
import java.util.logging.Logger;

import org.xmlBlaster.contrib.dbwriter.info.DbUpdateInfoColDescription;
import org.xmlBlaster.contrib.dbwriter.info.DbUpdateInfoDescription;

public class SpecificOracle extends SpecificDefault {

   private static Logger log = Logger.getLogger(SpecificOracle.class.getName());
   
   /**
    * Not doing anything.
    */
   public SpecificOracle() {
      super();
   }
   
   /**
    * 
    * @param col 
    * @param prefix can be 'old' or 'new'
    * @return
    */
   protected String createVariableSqlPart(DbUpdateInfoDescription description, String prefix) {
      DbUpdateInfoColDescription[] cols = description.getUpdateInfoColDescriptions();
      StringBuffer buf = new StringBuffer("       ").append(prefix).append("Cont := '';\n");

      for (int i=0; i < cols.length; i++) {
         String colName = cols[i].getColName();
         int type = cols[i].getSqlType();
         if (type == Types.BINARY || type == Types.BLOB || type == Types.JAVA_OBJECT || type == Types.VARBINARY || type == Types.STRUCT) {
            buf.append("       blobCont := :" + prefix + "." + colName + ";\n");
            buf.append("       tmp := " + prefix + "Cont || repl_col2xml_base64('" + colName + "', blobCont);\n");
            buf.append("       " + prefix + "Cont := tmp;\n");
         }
         else {
            buf.append("       tmp := " + prefix + "Cont || repl_col2xml('" + colName + "',:" + prefix + "." + colName + ");\n");
            buf.append("       " + prefix + "Cont := tmp;\n");
         }
      }
      // buf.append("       oid := ROWIDTOCHAR(:").append(prefix).append(".rowid);\n");
      // TODO this has to be changed later on
      buf.append("       oid := ''; -- TODO: this has to be changed later on \n");
      return buf.toString();
   }
   
   /**
    * This method creates a function to be invoked by a triggerto detect INSERT DELETE and UPDATE 
    * operations on a particular table.
    * @param infoDescription the info object containing the necessary information for the table.
    * @return a String containing the sql update. It can be executed. 
    */
   public String createTableFunction(DbUpdateInfoDescription infoDescription) {

      String tableName = infoDescription.getIdentity();  // should be the table name
      String functionName =  tableName + "_repl_f";
      String triggerName = tableName + "_repl_t";
      String schemaName = infoDescription.getSchema();
      String catalogName = infoDescription.getCatalog();
      String dbName = "NULL"; // still unsure on how to retrieve this information on a correct way.
      StringBuffer buf = new StringBuffer();
      buf.append("-- ---------------------------------------------------------------------------- \n");
      buf.append("-- This is the function which will be registered to the triggers.               \n");
      buf.append("-- It must not take any parameter.                                              \n");
      buf.append("-- This is the only method which is business data specific. It is depending on  \n");
      buf.append("-- the table to be replicated. This should be generated by a tool.              \n");
      buf.append("--                                                                              \n");
      buf.append("-- For each table you should just write out in a sequence the complete content  \n");
      buf.append("-- of the row to replicate. You could make more fancy stuff here, for example   \n");
      buf.append("-- you could just send the minimal stuff, i.e. only the stuff which has changed \n");
      buf.append("-- (for the new stuff) and for the old one you could always send an empty one.  \n");
      buf.append("-- ---------------------------------------------------------------------------- \n");
      buf.append("\n");
      buf.append("CREATE OR REPLACE FUNCTION ").append(functionName).append(" RETURN VARCHAR AS\n");
      buf.append("   blobCont BLOB; \n");
      buf.append("   oldCont CLOB; \n");
      buf.append("   newCont CLOB;\n");
      buf.append("   tmp     CLOB;\n");
      buf.append("   oid     VARCHAR(30);\n");
      buf.append("   replKey INTEGER;\n");
      buf.append("   ret     VARCHAR(10);\n");
      buf.append("   transId VARCHAR2(30);\n");
      buf.append("   op      VARCHAR(10);\n");
      buf.append("BEGIN\n");

      buf.append("    oldCont := NULL;\n");
      buf.append("    newCont := NULL;\n");
      buf.append("\n");
      buf.append("    IF INSERTING THEN\n");
      buf.append("      op := 'INSERT';\n");
      buf.append(createVariableSqlPart(infoDescription, "old"));
      buf.append("    ELSIF DELETING THEN\n");
      buf.append("      op := 'DELETE';\n");
      buf.append(createVariableSqlPart(infoDescription, "new"));
      buf.append("    END IF;\n");

      String dbNameTmp = null;
      String tableNameTmp = "'" + tableName + "'";
      String schemaNameTmp = null;
      if (dbName == null)
         dbNameTmp = "NULL";
      else
         dbNameTmp = "'" + dbName + "'";
      if (schemaName == null)
         schemaNameTmp = "NULL";
      else
         schemaNameTmp = "'" + schemaName + "'";
      
      buf.append("    SELECT repl_seq.nextval INTO replKey FROM DUAL;\n");
      buf.append("    transId := DBMS_TRANSACTION.LOCAL_TRANSACTION_ID(FALSE);\n");
      buf.append("    INSERT INTO repl_items (repl_key, trans_key, dbId, tablename, guid,\n");
      buf.append("                           db_action, db_catalog, db_schema, \n");
      buf.append("                           content, oldContent, version) values \n");
      buf.append("                           (replKey, transId,").append(dbNameTmp).append(",\n");
      buf.append("            ").append(tableNameTmp).append(", oid, op, NULL, ").append(schemaNameTmp).append(", newCont, \n");
      buf.append("            oldCont, '0.0');\n");
      buf.append("\n");
      buf.append("    RETURN 'DUMMY';\n");
      buf.append("END ").append(functionName).append(";\n");
      buf.append("\n");
      return buf.toString();
   }
   
   
   /**
    * This method creates a trigger to detect INSERT DELETE and UPDATE 
    * operations on a particular table.
    * @param infoDescription the info object containing the necessary information for the table.
    * @return a String containing the sql update. It can be executed. 
    */
   public String createTableTrigger(DbUpdateInfoDescription infoDescription) {
      StringBuffer buf = new StringBuffer();
      // and now append the associated trigger ....
      String tableName = infoDescription.getIdentity();  // should be the table name
      String functionName =  tableName + "_repl_f";
      String triggerName = tableName + "_repl_t";

      buf.append("-- ---------------------------------------------------------------------------- \n");
      buf.append("-- THE TRIGGER FOR THE replTest TABLE                                           \n");
      buf.append("-- ---------------------------------------------------------------------------- \n");
      buf.append("\n");
      buf.append("CREATE OR REPLACE TRIGGER ").append(triggerName).append("\n");
      buf.append("AFTER UPDATE OR DELETE OR INSERT\n");
      buf.append("ON ").append(tableName).append("\n");
      buf.append("FOR EACH ROW\n");
      
      buf.append("DECLARE\n");
      buf.append("   ret VARCHAR(10);\n");
      buf.append("BEGIN\n");
      buf.append("  ret := ").append(functionName).append("();\n");
      buf.append("END ").append(triggerName).append(";\n");
      buf.append("\n");
      
      return buf.toString();
   }   
  
}
