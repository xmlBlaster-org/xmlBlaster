/*
 * This Java file has been generated by smidump 0.3.1. It
 * is intended to be edited by the application programmer and
 * to be used within a Java AgentX sub-agent environment.
 *
 * $Id: SessionEntryImpl.java,v 1.1 2002/07/05 06:56:00 ruff Exp $
 */
package org.xmlBlaster.engine.admin.extern.snmp;

/**
 *  This class extends the Java AgentX (JAX) implementation of
 *  the table row sessionEntry defined in XMLBLASTER-MIB.
 *  SessionEntryImpl 
 *  - is the interface side of a bridge pattern.
 *  - contains a reference to the implementation side of the bridge pattern (= SessionEntryImplPeer).
 *  - implements its methods by forwarding its calls to SessionEntryImplPeer.
 *  
 *  @version @VERSION@
 *  @author Udo Thalmann
 */

import jax.AgentXOID;
import jax.AgentXSetPhase;
import jax.AgentXResponsePDU;
import jax.AgentXEntry;

public class SessionEntryImpl extends SessionEntry
{

    /**
     * SessionEntryImpl
     * - initializes mib variables.
     * - builds a reference to SessionEntryImplPeer, which implements SessionEntryImpl methods.
     */
    public SessionEntryImpl(long nodeIndex,
                        long clientIndex,
                        long sessionIndex,
                        String sessionNameVal,
                        long cbQueueMaxMsgsVal,
                        long cbQueueThresholdVal,
                        int clearCbQueueVal,
                        int closeSessionVal)
    {
        super(nodeIndex, clientIndex, sessionIndex);

        sessionName = sessionNameVal.getBytes();
        cbQueueMaxMsgs = cbQueueMaxMsgsVal;
        cbQueueThreshold = cbQueueThresholdVal;
        clearCbQueue = clearCbQueueVal;
        closeSession = closeSessionVal;
        // sessionEntryImplPeer = new SessionEntryImplPeer();
    }

    /**
     * get_sessionName
     * - forwards the call to sessionEntryImplPeer.get_sessionName().
     * 
     * @return byte[] sessionName: name of a client session.
     */
    public byte[] get_sessionName()
    {
        // sessionName = sessionEntryImplPeer.get_sessionName();
        return sessionName;
    }

    /**
     * get_cbQueueNumMsgs
     * - forwards the call to sessionEntryImplPeer.get_cbQueueNumMsgs().
     * 
     * @return long cbQueueNumMsgs: actual number of messages in the callback queue.
     */
    public long get_cbQueueNumMsgs()
    {
        // cbQueueNumMsgs = sessionEntryImplPeer.get_cbQueueNumMsgs();
        return cbQueueNumMsgs;
    }

    /**
     * get_cbQueueMaxMsgs
     * - forwards the call to sessionEntryImplPeer.get_cbQueueMaxMsgs().
     * 
     * @return long cbQueueMaxMsgs: maximum number of messages in the callback queue.
     */
    public long get_cbQueueMaxMsgs()
    {
        // cbQueueMaxMsgs = sessionEntryImplPeer.get_cbQueueMaxMsgs();
        return cbQueueMaxMsgs;
    }

    /**
     * set_cbQueueMaxMsgs
     * - implements the snmp set command for the mib object cbQueueMaxMsgs.
     *
     * @param AgentXSetPhase phase:
     * @param long value:
     * @return int AgentXResponsePDU.PROCESSING_ERROR:
     */
    public int set_cbQueueMaxMsgs(AgentXSetPhase phase, long value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_cbQueueMaxMsgs = cbQueueMaxMsgs;
            cbQueueMaxMsgs = value;
            break;
        case AgentXSetPhase.UNDO:
            cbQueueMaxMsgs = undo_cbQueueMaxMsgs;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }

    /**
     * get_cbQueueThreshold
     * - forwards the call to sessionEntryImplPeer.get_cbQueueThreshold().
     * 
     * @return long cbQueueThreshold: threshold (%) number of messages in the callback queue.
     */
    public long get_cbQueueThreshold()
    {
        // cbQueueThreshold = sessionEntryImplPeer.get_cbQueueThreshold();
        return cbQueueThreshold;
    }

    /**
     * set_cbQueueThreshold
     * - implements the snmp set command for the mib object cbQueueThreshold.
     *
     * @param AgentXSetPhase phase:
     * @param long value:
     * @return int AgentXResponsePDU.PROCESSING_ERROR:
     */
    public int set_cbQueueThreshold(AgentXSetPhase phase, long value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_cbQueueThreshold = cbQueueThreshold;
            cbQueueThreshold = value;
            break;
        case AgentXSetPhase.UNDO:
            cbQueueThreshold = undo_cbQueueThreshold;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }

    /**
     * get_clearCbQueue
     * - forwards the call to sessionEntryImplPeer.get_clearCbQueue().
     * 
     * @return int clearCbQueue: if set to true (= 1), the callback queue is emptied.
     */
    public int get_clearCbQueue()
    {
        // clearCbQueue = sessionEntryImplPeer.get_clearCbQueue();
        return clearCbQueue;
    }

    /**
     * set_clearCbQueue
     * - implements the snmp set command for the mib object clearCbQueue.
     *
     * @param AgentXSetPhase phase:
     * @param long value:
     * @return int AgentXResponsePDU.PROCESSING_ERROR:
     */
    public int set_clearCbQueue(AgentXSetPhase phase, int value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_clearCbQueue = clearCbQueue;
            clearCbQueue = value;
            break;
        case AgentXSetPhase.UNDO:
            clearCbQueue = undo_clearCbQueue;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }

    /**
     * get_closeSession
     * - forwards the call to sessionEntryImplPeer.get_closeSession().
     * 
     * @return int closeSession: if set to true (= 1), the session is closed.
     */
    public int get_closeSession()
    {
        // closeSession = sessionEntryImplPeer.get_closeSession();
        return closeSession;
    }

    /**
     * set_closeSession
     * - implements the snmp set command for the mib object closeSession.
     *
     * @param AgentXSetPhase phase:
     * @param long value:
     * @return int AgentXResponsePDU.PROCESSING_ERROR:
     */
    public int set_closeSession(AgentXSetPhase phase, int value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_closeSession = closeSession;
            closeSession = value;
            break;
        case AgentXSetPhase.UNDO:
            closeSession = undo_closeSession;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }
}


