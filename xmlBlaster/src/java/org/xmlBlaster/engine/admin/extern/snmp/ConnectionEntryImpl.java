/*
 * This Java file has been generated by smidump 0.3.1. It
 * is intended to be edited by the application programmer and
 * to be used within a Java AgentX sub-agent environment.
 *
 * $Id: ConnectionEntryImpl.java,v 1.1 2002/07/05 06:56:00 ruff Exp $
 */
package org.xmlBlaster.engine.admin.extern.snmp;

/**
 *  This class extends the Java AgentX (JAX) implementation of
 *  the table row connectionEntry defined in XMLBLASTER-MIB.
 *  ConnectionEntryImpl 
 *  - is the interface side of a bridge pattern.
 *  - contains a reference to the implementation side of the bridge pattern (= ConnectionEntryImplPeer).
 *  - implements its methods by forwarding its calls to ConnectionEntryImplPeer.
 *  
 *  @version @VERSION@
 *  @author Udo Thalmann
 */

import jax.AgentXOID;
import jax.AgentXSetPhase;
import jax.AgentXResponsePDU;
import jax.AgentXEntry;

public class ConnectionEntryImpl extends ConnectionEntry
{

    /**
     * ConnectionEntryImpl
     * - initializes mib variables.
     * - builds a reference to ConnectionEntryImplPeer, which implements ConnectionEntryImpl methods.
     */
    public ConnectionEntryImpl(long nodeIndex,
                           long connectionIndex,
                           String connectionHostVal,
                           long connectionPortVal,
                           String connectionAddressVal,
                           int connectionProtocolVal)
    {
        super(nodeIndex, connectionIndex);
        connectionHost = connectionHostVal.getBytes();
        connectionPort = connectionPortVal;
        connectionAddress = connectionAddressVal.getBytes();
        connectionProtocol = connectionProtocolVal;
        // connectionEntryImplPeer = new ConnectionEntryImplPeer();
    }

    /**
     * get_connectionHost
     * - forwards the call to connectionEntryImplPeer.get_connectionHost().
     * 
     * @return byte[] connectionHost: name of the connected host.
     */
    public byte[] get_connectionHost()
    {
        // connectionHost = connectionEntryImplPeer.get_connectionHost();
        return connectionHost;
    }

    /**
     * get_connectionPort
     * - forwards the call to connectionEntryImplPeer.get_connectionHost().
     * 
     * @return long connectionPort: port of the connected host.
     */
    public long get_connectionPort()
    {
        // connectionPort = connectionEntryImplPeer.get_connectionPort();
        return connectionPort;
    }

    /**
     * get_connectionAddress
     * - forwards the call to connectionEntryImplPeer.get_connectionAddress().
     * 
     * @return byte[] connectionAddress: address of the connected host.
     */
    public byte[] get_connectionAddress()
    {
        // connectionAddress = connectionEntryImplPeer.get_connectionAddress();
        return connectionAddress;
    }

    /**
     * get_connectionProtocol
     * - forwards the call to connectionEntryImplPeer.get_connectionProtocol().
     * 
     * @return int connectionProtocol: protocol used for connection, 
     * i.e. bootstrap, ior, rmi, xmlrpc, socket, etc.
     */
    public int get_connectionProtocol()
    {
        // connectionProtocol = connectionEntryImplPeer.get_connectionProtocol();
        return connectionProtocol;
    }

}



