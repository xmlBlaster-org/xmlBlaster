/*
 * This Java file has been generated by smidump 0.3.1. It
 * is intended to be edited by the application programmer and
 * to be used within a Java AgentX sub-agent environment.
 *
 * $Id: ClientEntryImpl.java,v 1.1 2002/07/05 06:56:00 ruff Exp $
 */
package org.xmlBlaster.engine.admin.extern.snmp;

/**
 *  This class extends the Java AgentX (JAX) implementation of
 *  the table row clientEntry defined in XMLBLASTER-MIB.
 *  ClientEntryImpl 
 *  - is the interface side of a bridge pattern.
 *  - contains a reference to the implementation side of the bridge pattern (= ClientEntryImplPeer).
 *  - implements its methods by forwarding its calls to ClientEntryImplPeer.
 *  
 *  @version @VERSION@
 *  @author Udo Thalmann
 */

import jax.AgentXOID;
import jax.AgentXSetPhase;
import jax.AgentXResponsePDU;
import jax.AgentXEntry;

public class ClientEntryImpl extends ClientEntry
{

    /**
     * ClientEntryImpl
     * - initializes mib variables.
     * - builds a reference to ClientEntryImplPeer, which implements ClientEntryImpl methods.
     */
    public ClientEntryImpl(long nodeIndex,
                       long clientIndex,
                       String clientNameVal,
                       int peerTypeVal,
                       int connectionStateVal,
                       long clientQueueMaxMsgsVal,
                       long clientQueueThresholdVal,
                       int clearClientQueueVal,
                       long maxSessionsVal,
                       long sessionThresholdVal)
    {
        super(nodeIndex, clientIndex);
        clientName = clientNameVal.getBytes();
        peerType = peerTypeVal;
        connectionState = connectionStateVal;
        clientQueueMaxMsgs = clientQueueMaxMsgsVal;
        clientQueueThreshold = clientQueueThresholdVal;
        clearClientQueue = clearClientQueueVal;
        maxSessions = maxSessionsVal;
        sessionThreshold = sessionThresholdVal;
        // clientEntryImplPeer = new ClientEntryImplPeer();
    }

    /**
     * get_clientName
     * - forwards the call to clientEntryImplPeer.get_clientName().
     * 
     * @return byte[] clientName: name of an xmlBlaster client.
     */
    public byte[] get_clientName()
    {
        // clientName = clientEntryImplPeer.get_clientName();
        return clientName;
    }

    /**
     * get_peerType
     * - forwards the call to clientEntryImplPeer.get_peerType().
     * 
     * @return int peerType: type of peer entity.
     *             0 = client type
     *             1 = mom type
     */
    public int get_peerType()
    {
        // peerType = clientEntryImplPeer.get_peerType();
        return peerType;
    }

    /**
     * get_connectionState
     * - forwards the call to clientEntryImplPeer.get_connectionState().
     * 
     * @return int connectionState: state of the client connection.
     *             0 = down
     *             1 = up
     */
    public int get_connectionState()
    {
        // connectionState = clientEntryImplPeer.get_connectionState();
        return connectionState;
    }

    /**
     * get_clientQueueNumMsgs
     * - forwards the call to clientEntryImplPeer.get_clientQueueNumMsgs().
     * 
     * @return long clientQueueNumMsgs: actual number of messages in the
     * point to point client queue.
     */
    public long get_clientQueueNumMsgs()
    {
        // clientQueueNumMsgs = clientEntryImplPeer.get_clientQueueNumMsgs();
        return clientQueueNumMsgs;
    }

    /**
     * get_clientQueueMaxMsgs
     * - forwards the call to clientEntryImplPeer.get_clientQueueMaxMsgs().
     * 
     * @return long clientQueueMaxMsgs: maximum number of messages in the
     * point to point client queue.
     */
    public long get_clientQueueMaxMsgs()
    {
        // clientQueueMaxMsgs = clientEntryImplPeer.get_clientQueueMaxMsgs();
        return clientQueueMaxMsgs;
    }

    /**
     * set_clientQueueMaxMsgs
     * - implements the snmp set command for the mib object clientQueueMaxMsgs.
     *
     * @param AgentXSetPhase phase:
     * @param long value:
     * @return int AgentXResponsePDU.PROCESSING_ERROR:
     */
    public int set_clientQueueMaxMsgs(AgentXSetPhase phase, long value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_clientQueueMaxMsgs = clientQueueMaxMsgs;
            clientQueueMaxMsgs = value;
            break;
        case AgentXSetPhase.UNDO:
            clientQueueMaxMsgs = undo_clientQueueMaxMsgs;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }

    /**
     * get_clientQueueThreshold
     * - forwards the call to clientEntryImplPeer.get_clientQueueThreshold().
     * 
     * @return long clientQueueThreshold: threshold (%) number of messages in the
     * point to point client queue.
     */
    public long get_clientQueueThreshold()
    {
        // clientQueueThreshold = clientEntryImplPeer.get_clientQueueThreshold();
        return clientQueueThreshold;
    }

    /**
     * set_clientQueueThreshold
     * - implements the snmp set command for the mib object clientQueueThreshold.
     *
     * @param AgentXSetPhase phase:
     * @param long value:
     * @return int AgentXResponsePDU.PROCESSING_ERROR:
     */
    public int set_clientQueueThreshold(AgentXSetPhase phase, long value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_clientQueueThreshold = clientQueueThreshold;
            clientQueueThreshold = value;
            break;
        case AgentXSetPhase.UNDO:
            clientQueueThreshold = undo_clientQueueThreshold;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }

    /**
     * get_clearClientQueue
     * - forwards the call to clientEntryImplPeer.get_clearClientQueue().
     * 
     * @return int clearClientQueue: if set to true (= 1),
     * the point to point client queue is emptied.
     */
    public int get_clearClientQueue()
    {
        // clearClientQueue = clientEntryImplPeer.get_clearClientQueue();
        return clearClientQueue;
    }

    /**
     * set_clearClientQueue
     * - implements the snmp set command for the mib object clearClientQueue.
     *
     * @param AgentXSetPhase phase:
     * @param long value:
     * @return int AgentXResponsePDU.PROCESSING_ERROR:
     */
    public int set_clearClientQueue(AgentXSetPhase phase, int value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_clearClientQueue = clearClientQueue;
            clearClientQueue = value;
            break;
        case AgentXSetPhase.UNDO:
            clearClientQueue = undo_clearClientQueue;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }

    /**
     * get_numSessions
     * - forwards the call to clientEntryImplPeer.get_numSessions().
     * 
     * @return long numSessions: actual number of client sessions in the session table.
     */
    public long get_numSessions()
    {
        // numSessions = clientEntryImplPeer.get_numSessions();
        return numSessions;
    }

    /**
     * get_maxSessions
     * - forwards the call to clientEntryImplPeer.get_maxSessions().
     * 
     * @return long maxSessions: maximum number of client sessions in the session table.
     */
    public long get_maxSessions()
    {
        // maxSessions = clientEntryImplPeer.get_maxSessions();
        return maxSessions;
    }

    /**
     * set_maxSessions
     * - implements the snmp set command for the mib object maxSessions.
     *
     * @param AgentXSetPhase phase:
     * @param long value:
     * @return int AgentXResponsePDU.PROCESSING_ERROR:
     */
    public int set_maxSessions(AgentXSetPhase phase, long value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_maxSessions = maxSessions;
            maxSessions = value;
            break;
        case AgentXSetPhase.UNDO:
            maxSessions = undo_maxSessions;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }

    /**
     * get_sessionThreshold
     * - forwards the call to clientEntryImplPeer.get_sessionThreshold().
     * 
     * @return long sessionThreshold: threshold (%) number of client sessions in the session table.
     */
    public long get_sessionThreshold()
    {
        // sessionThreshold = clientEntryImplPeer.get_sessionThreshold();
        return sessionThreshold;
    }

    /**
     * set_sessionThreshold
     * - implements the snmp set command for the mib object sessionThreshold.
     *
     * @param AgentXSetPhase phase:
     * @param long value:
     * @return int AgentXResponsePDU.PROCESSING_ERROR:
     */
    public int set_sessionThreshold(AgentXSetPhase phase, long value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_sessionThreshold = sessionThreshold;
            sessionThreshold = value;
            break;
        case AgentXSetPhase.UNDO:
            sessionThreshold = undo_sessionThreshold;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }

    /**
     * get_clientUptime
     * - forwards the call to clientEntryImplPeer.get_clientUptime().
     * 
     * @return long clientUptime: client connection uptime.
     */
    public long get_clientUptime()
    {
        // clientUptime = clientEntryImplPeer.get_clientUptime();
        return clientUptime;
    }

    /**
     * get_clientDowntime
     * - forwards the call to clientEntryImplPeer.get_clientDowntime().
     * 
     * @return long clientDowntime: client connection downtime.
     */
    public long get_clientDowntime()
    {
        // clientDowntime = clientEntryImplPeer.get_clientDowntime();
        return clientDowntime;
    }

}















