/*
 * This Java file has been generated by smidump 0.3.1. Do not edit!
 * It is intended to be used within a Java AgentX sub-agent environment.
 *
 * $Id: NodeEntry.java,v 1.1 2002/07/05 06:56:00 ruff Exp $
 */
package org.xmlBlaster.engine.admin.extern.snmp;

/**
    This class represents a Java AgentX (JAX) implementation of
    the table row nodeEntry defined in XMLBLASTER-MIB.

    @version 1
    @author  smidump 0.3.1
    @see     AgentXTable, AgentXEntry
 */

import jax.AgentXOID;
import jax.AgentXSetPhase;
import jax.AgentXResponsePDU;
import jax.AgentXEntry;

public class NodeEntry extends AgentXEntry
{

    protected long nodeIndex = 0;
    protected byte[] nodeName = new byte[0];
    protected long nodeUptime = 0;
    protected long totalMem = 0;
    protected long usedMem = 0;
    protected long freeMem = 0;
    protected byte[] hostname = new byte[0];
    protected long port = 0;
    protected long undo_port = 0;
    protected long numClients = 0;
    protected long maxClients = 0;
    protected long undo_maxClients = 0;
    protected long clientThreshold = 0;
    protected long undo_clientThreshold = 0;
    protected byte[] errorLogfile = new byte[0];
    protected byte[] undo_errorLogfile = new byte[0];
    protected int logLevel = 0;
    protected int undo_logLevel = 0;
    protected int runLevel = 0;
    protected int undo_runLevel = 0;

    public NodeEntry(long nodeIndex)
    {
        this.nodeIndex = nodeIndex;

        instance.append(nodeIndex);
    }

    public long get_nodeIndex()
    {
        return nodeIndex;
    }

    public byte[] get_nodeName()
    {
        return nodeName;
    }

    public long get_nodeUptime()
    {
        return nodeUptime;
    }

    public long get_totalMem()
    {
        return totalMem;
    }

    public long get_usedMem()
    {
        return usedMem;
    }

    public long get_freeMem()
    {
        return freeMem;
    }

    public byte[] get_hostname()
    {
        return hostname;
    }

    public long get_port()
    {
        return port;
    }

    public int set_port(AgentXSetPhase phase, long value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_port = port;
            port = value;
            break;
        case AgentXSetPhase.UNDO:
            port = undo_port;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }
    public long get_numClients()
    {
        return numClients;
    }

    public long get_maxClients()
    {
        return maxClients;
    }

    public int set_maxClients(AgentXSetPhase phase, long value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_maxClients = maxClients;
            maxClients = value;
            break;
        case AgentXSetPhase.UNDO:
            maxClients = undo_maxClients;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }
    public long get_clientThreshold()
    {
        return clientThreshold;
    }

    public int set_clientThreshold(AgentXSetPhase phase, long value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_clientThreshold = clientThreshold;
            clientThreshold = value;
            break;
        case AgentXSetPhase.UNDO:
            clientThreshold = undo_clientThreshold;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }
    public byte[] get_errorLogfile()
    {
        return errorLogfile;
    }

    public int set_errorLogfile(AgentXSetPhase phase, byte[] value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_errorLogfile = errorLogfile;
            errorLogfile = new byte[value.length];
            for(int i = 0; i < value.length; i++)
                errorLogfile[i] = value[i];
            break;
        case AgentXSetPhase.UNDO:
            errorLogfile = undo_errorLogfile;
            break;
        case AgentXSetPhase.CLEANUP:
            undo_errorLogfile = null;
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }
    public int get_logLevel()
    {
        return logLevel;
    }

    public int set_logLevel(AgentXSetPhase phase, int value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_logLevel = logLevel;
            logLevel = value;
            break;
        case AgentXSetPhase.UNDO:
            logLevel = undo_logLevel;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }
    public int get_runLevel()
    {
        return runLevel;
    }

    public int set_runLevel(AgentXSetPhase phase, int value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_runLevel = runLevel;
            runLevel = value;
            break;
        case AgentXSetPhase.UNDO:
            runLevel = undo_runLevel;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }
}

