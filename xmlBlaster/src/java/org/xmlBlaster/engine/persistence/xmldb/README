$Id: README,v 1.3 2002/02/08 00:48:18 goetzger Exp $

Integration of Xindice (former dbXML) into xmlBlaster as persistence plugin
---------------------------------------------------------------------------

STATE:      - beta
            - runs stable, afaik
	    - no experience till now, except in development environment
	    - needs own classloader to be implemented, conflicts with more
	      ORBs in CLASSPATH. see Mailinglist 


RESOURCES:  http://www.dbxml.org
	    http://www.xmlBlaster.org
	    soon there will be something under http://xml.apache.org/xindice (I hope)
            

TRAPS/BUGS: What is with BLOBs?
            How can we store best binary data?


TODO:       Need to finish Test-case! (need to implemet CLASSLOADER before)
            Run Xindice embedded


XMLDBPlugin.java is an implementation of I_PersistenceDriver.java.


To use it, you need a Xindice installed and running (tested and developed
with Xindice 1.0rc1 (DarkHorse)). Can be checked out as follows:

	Xindice is also available via Anonymous CVS access.
	You can perform a checkout with the following settings:

	CVSROOT=:pserver:anoncvs@cvs.apache.org:/home/cvspublic
	cvs login (password is anoncvs)
	cvs co xml-xindice

taken from http://www.dbxml.org 

Build Xindice as described in $XINDICE_HOME/INSTALL

Start Xindice:

$XINDICE_HOME/start

you should see something like:

	Starting Xindice
	----------------

	Xindice 1.0rc1 (DarkHorse)

	Database: 'db' initializing
	Script: 'GET' added to script storage
	Service: 'db' started
	Service: 'GopherServer' started @ gopher://localhost:4070/
	Service: 'HTTPServer' started @ http://localhost:4080/
	Service: 'APIService' started

	Server Running

Everything is ok now.

Create a collection manually by:

	xindiceadmin ac -c /db -n xmlBlaster

List collections:

	xindice lc -c /db

	        xmlBlaster
	        xmlBlaster_test
	        system

	Total collections: 3


Copy the config/xmlblaster.properties.templates to $HOME/xmlBlaster.properties and/or edit
it manually. You need to activate:

	Persistence.LazyRecovery=true

	Persistence.Driver.Type=xmldb
	Persistence.Driver.Version=xindice
	Persistence.Path=xmldb:xindice:///db
	Persistence.Collection=xmlBlaster


Start the xmlBlaster as described in $XMLBLASTER_HOME/INSTALL

if you can see something like:
.
.
[Feb 7, 2002 10:50:36 PM INFO  XMLDBPlugin] using collectionPath 'xmldb:xindice:///db/xmlBlaster'
[Feb 7, 2002 10:50:37 PM INFO  PluginManagerBase] Plugin 'org.xmlBlaster.engine.persistence.xmldb.XMLDBPlugin' successfully initialized!
[Feb 7, 2002 10:50:37 PM INFO  RequestBroker] Loaded persistence driver '[xmldb][xindice]'
[Feb 7, 2002 10:50:37 PM INFO  XMLDBPlugin] Successfully got 1 stored message-oids from xmldb:xindice:///db/xmlBlaster
.
.

you're on the right way ;-)
It says which plugin the persistence layer is using and that it got 1
message restored from it. This may differ on your system.

Publish some messages which are tagged 'durable', you can do this by using
the qos-tag:

      String qos = "<qos>" +
                   "   <isDurable />" +
                   "</qos>";

Check, if you want, by using for example
$ xindice ld -c /db/xmlBlaster
																		
        amIdurable-XmlCon.xml
        amIdurable-XmlKey.xml
        amIdurable-XmlQos.xml

Total documents: 3

and list a single content by using:
$ xindice rd -c /db/xmlBlaster -n amIdurable-XmlKey.xml
<?xml version="1.0"?>
<key oid="amIdurable" contentMime="text/plain">
</key>

Now you can subscribe to your messages and see if they arrive well.

After restarting xmlBlaster all messages tagged durable should be able to
subscribe to without being published now.


See another example here:

Feed some messages to the xmlBlaster:

	cd $XMLBLASTER_HOME/src/java/org/xmlBlaster/client/feeder

	java org.xmlBlaster.client.feeder.PublishFile -c Hello.txt -k Hello-Key.xml -q Hello-Qos.xml

Read the message from xmlBlaster:

	cd $XMLBLASTER_HOME/src/java/org/xmlBlaster/client/reader

	java org.xmlBlaster.client.reader.SubscribeMessage -name Tim -passwd secret -oid Hello.txt

	============= START Hello.txt =======================
	[Feb 7, 2002 10:55:50 PM INFO  SubscribeMessage] Receiving update of a message ...
	<xmlBlaster>
	<?xml version="1.0"?>
	<key oid="Hello.txt" contentMime="text/plain">
	      
	     <TestTag>
	      </TestTag>
	   </key>

	<content>
	Hello world

	</content>

	   <qos> <!-- UpdateQoS -->
	      <state>
	         OK
	      </state>
	      <sender>
	         PublishFile
	      </sender>
	      <subscriptionId>
	         Hello.txt
	      </subscriptionId>
	      <rcvTimestamp millis='1013118850714' nanos='0'>
	         2002-02-07 22:54:10.714
	      </rcvTimestamp>
	      <expiration timeToLive='129287067'/>
	   </qos>

	</xmlBlaster>
	============= END Hello.txt =========================



After restarting the xmlBlaster the reading of the message should just bring the same result.
See  $XMLBLASTER_HOME/src/java/org/xmlBlaster/client/feeder/README and
$XMLBLASTER_HOME/src/java/org/xmlBlaster/client/reader/README for more details on this example.

You can check the content of the Xindice databes by using the commandline interface:

See the collections:

	xindice lc -c /db

	        xmlBlaster
	        xmlBlaster_test
	        system

	Total collections: 3

See the content/documents of the xmlBlaster-collection:

	xindice ld -c /db/xmlBlaster

	        Hello.txt-XmlCon.xml
	        Hello.txt-XmlKey.xml
	        Hello.txt-XmlQos.xml

	Total documents: 3

See the document with the key Hello.txt-XmlCon.xml

	xindice rd -c /db/xmlBlaster -n Hello.txt-XmlCon.xml
	<?xml version="1.0"?>
	<content><![CDATA[Hello world
	]]></content>


### end of README
