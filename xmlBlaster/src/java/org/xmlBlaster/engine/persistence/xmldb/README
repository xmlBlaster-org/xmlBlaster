$Id: README,v 1.2 2002/01/15 23:33:45 goetzger Exp $

Integration of Xindice (former dbXML) into xmlBlaster as PersistenceDriver
--------------------------------------------------------------------------

STATE:      alpha
            runs stable, afaik
	    no experience at all, except in development environment
	    

RESOURCES:  http://www.dbxml.org
	    http://www.xmlBlaster.org
            

TRAPS/BUGS: What is with BLOBs?
            How can we store best binary data?


TODO:       Need to finish Test-case!
            Simple demo!

XindiceDriver.java is an implementation of I_PersistenceDriver.java


To use it, you need a dbXML installed and running (tested and developed
with 1.0b4). Can be downloaded at http://www.dbxml.org

Start dbXML:
change to the directory, where dbXML is installed and start it as described in the docu.

Copy the config/xmlblaster.properties.templates to $HOME or edit
it manually. You need to activate:

Persistence.LazyRecovery=true
Persistence.Path=xmldb:dbxml:///db
# (or wherever your db is running)
Persistence.Collection=xmlBlaster
# (which you need to create manually, but only once, by:
$ dbxmladmin ac -c /db -n xmlBlaster
check with:
$ dbxmladmin lc -c /db

Start the xmlBlaster.

if you can see something like:

[Jan 14, 2002 12:53:58 AM WARN  XindiceDriver] * * * This Driver is under development, it may not be used for production environment! * * *
[Jan 14, 2002 12:53:58 AM INFO  XindiceDriver] using collectionPath 'xmldb:dbxml:///db/xmlBlaster'
[Jan 14, 2002 12:53:58 AM INFO  RequestBroker] Loaded persistence driver 'org.xmlBlaster.engine.persistence.xmldb.xindice.XindiceDriver'
[Jan 14, 2002 12:53:58 AM INFO  XindiceDriver] Successfully got 1 stored message-oids from xmldb:dbxml:///db/xmlBlaster

you're on the right way ;-)
It says which driver the persistence layer is using and that it got 1
message restored from it. This may differ on your system.

Publish some messages which are tagged 'durable', you can do this by using
the qos-tag:

      String qos = "<qos>" +
                   "   <isDurable />" +
                   "</qos>";

Check, if you want, by using for example
$ dbxml ld -c /db/xmlBlaster
																		
        amIdurable-XmlCon.xml
        amIdurable-XmlKey.xml
        amIdurable-XmlQos.xml

Total documents: 3

and list a single content by using:
$ dbxml rd -c /db/xmlBlaster -n amIdurable-XmlKey.xml
<?xml version="1.0"?>
<key oid="amIdurable" contentMime="text/plain">
   </key>

Now you can subscribe to your messages and see if they arrive well.

After restarting xmlBlaster all messages tagged durable should be able to
subscribe to without being published now.


# end of file




