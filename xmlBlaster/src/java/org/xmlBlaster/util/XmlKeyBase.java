/*------------------------------------------------------------------------------
Name:      XmlKeyBase.java
Project:   xmlBlaster.org
Copyright: xmlBlaster.org, see xmlBlaster-LICENSE file
Comment:   Handling one xmlKey, knows how to parse it with SAX
------------------------------------------------------------------------------*/
package org.xmlBlaster.util;

import org.xmlBlaster.util.Log;
import org.xmlBlaster.util.Global;
import org.xmlBlaster.engine.helper.Constants;

import org.xml.sax.InputSource;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Attr;

import java.util.StringTokenizer;

/**
 * XmlKeyBase.
 * <p>
 * All XmlKey's have the same XML minimal structure:<p>
 * <pre>
 *    &lt;key oid="12345">
 *       &lt;!-- application specific tags -->
 *    &lt;/key>
 * </pre>
 *
 * where oid is a unique key.
 * <p>
 * A typical <b>publish()</b> would look like:
 * <pre>
 *    &lt;?xml version='1.0' encoding='ISO-8859-1' ?>
 *    &lt;key oid=\"KEY_FOR_SMILEY\" contentMime='text/plain' contentMimeExtended='1.5'>
 *    &lt;/key>
 * </pre>
 * <br>
 * or
 * <br>
 * <pre>
 *    &lt;?xml version='1.0' encoding='ISO-8859-1' ?>
 *    &lt;key oid='' contentMime='text/xml'>
 *       &lt;AGENT id='192.168.124.10' subId='1' type='generic'>
 *          &lt;DRIVER id='FileProof' pollingFreq='10'>
 *          &lt;/DRIVER>
 *       &lt;/AGENT>
 *    &lt;/key>
 * </pre>
 * A typical <b>subscribe()</b> would look like:
 * <pre>
 *    &lt;?xml version='1.0' encoding='ISO-8859-1' ?>
 *    &lt;key oid=\"KEY_FOR_SMILEY\" queryType='EXACT'>
 *    &lt;/key>
 * </pre>
 * <br>
 * or
 * <pre>
 *    &lt;?xml version='1.0' encoding='ISO-8859-1' ?>
 *    &lt;key oid='' queryType='XPATH'>
 *       //DRIVER[@id='FileProof']
 *    &lt;/key>
 * </pre>
 * <p />
 * More examples you find in xmlBlaster/src/dtd/XmlKey.xml
 * <p />
 * @see <a href="http://www.w3.org/TR/xpath">The W3C XPath specification</a>
 * @see org.xmlBlaster.client.UpdateKey
 */
public class XmlKeyBase
{
   private String ME = "XmlKeyBase";
   private Global glob;
   private XmlToDom xmlToDom = null;

   private static long uniqueCounter = 1L;

   public final static int PUBLISH     = 0; // no query: <key oid='myWhitePaper'><book><paper></paper></book></key> + content
   public final static int EXACT_QUERY = 1; // <key oid="myCarPrice" queryType="EXACT"></key>
   public final static int XPATH_QUERY = 2; // <key oid=""           queryType="XPATH">xmlBlaster/key/AGENT/DRIVER[@id!='FileProof']</key>
   public final static int REGEX_QUERY = 3; // <key oid="my.*"       queryType="REGEX"></key>
   private int queryType = -1;
   private String queryString = "";


   public final int XML_TYPE = 0;   // xml syntax
   public final int ASCII_TYPE = 1; // for trivial keys you can use a ASCII String (no XML)
   private int keyType = XML_TYPE;  // XmlKey uses XML syntax (default)

   private int isGeneratedOid = -1;      // is oid new generated by xmlBlaster?
   private boolean isPublish = false;    // called via subscribe()

   /** The XML ASCII string */
   protected String xmlKey_literal;
   /** A nicer formatted ASCII XML string (same content as xmlKey_literal but indented) */
   protected String xmlKey_nice;

   /** Value from attribute &lt;key oid="..."> */
   protected String keyOid = null;

   /** The MIME type of the content, RFC1521 */
   public static final String DEFAULT_contentMime = "text/plain";
   protected String contentMime = null;

   /** Some further content info, e.g. the version number */
   public static final String DEFAULT_contentMimeExtended = "";
   protected String contentMimeExtended = null;

   /** The domain attribute, can be used to classify the message for simple clustering */
   public static final String DEFAULT_domain = "";
   protected String domain = null; // set first to null to force parsing

   /** IP address to generate unique oid */
   private static String ip_addr = null; // jacorb.util.Environment.getProperty("OAIAddr");

   private static String oa_port = null; // jacorb.util.Environment.getProperty("OAPort");


   /**
    * Parses given xml string
    * DON'T use this constructor for publish() Messages
    *
    * @param The original key in XML syntax, for example:<br>
    *        <pre><key oid="This is the unique attribute"></key></pre>
    */
    /*
   public XmlKeyBase(String xmlKey_literal) throws XmlBlasterException
   {
      init(xmlKey_literal, false);
   }
      */

   /**
    * Parses given xml string
    * DON'T use this constructor for publish() Messages
    *
    * @param The original key in XML syntax, for example:<br>
    *        <pre><key oid="This is the unique attribute"></key></pre>
    */
   public XmlKeyBase(Global glob, String xmlKey_literal) throws XmlBlasterException
   {
      init(glob, xmlKey_literal, false);
   }


   /**
    * Parses given xml string.
    * USE THIS constructor when publish() is invoked (needs redesign)!
    *
    * @param The original key in XML syntax, for example:<br>
    *        <pre><key oid="This is the unique attribute"></key></pre>
    * @param isPublish true:  when invoked by publish()
    *                  false: all the other cases
    */
   public XmlKeyBase(Global glob, String xmlKey_literal, boolean isPublish) throws XmlBlasterException
   {
      init(glob, xmlKey_literal, isPublish);
   }


   /**
    */
   private void init(Global glob, String xmlKey_literal, boolean isPublish) throws XmlBlasterException
   {
      if (glob == null) {
         this.glob = new Global();
         glob.getLog().warn(ME, "Created new Global");
      }
      else
         this.glob = glob;

      this.isPublish = isPublish;

      if (Log.CALL) Log.trace(ME, "Creating new XmlKey for isPublish=" + isPublish);

      this.xmlKey_literal = xmlKey_literal.trim();

      if (!this.xmlKey_literal.startsWith("<")) {
         keyType = ASCII_TYPE;  // eg "Airport/Runway1/WindVeloc3"
         keyOid = this.xmlKey_literal;

         // Works well with ASCII, but is switched off for the moment
         // perhaps we should make it configurable through a property file !!!
         // Example: xmlKey_literal="Airport.*" as a regular expression

         Log.warn(ME+".XML", "Invalid XmlKey syntax, only XML syntax beginning with \"<\" is supported: '" + this.xmlKey_literal + "'");
         throw new XmlBlasterException(ME+".XML", "Invalid XmlKey syntax, only XML syntax beginning with \"<\" is supported");

      }
   }


   /**
    * Test if oid is '__sys__deadLetter'. 
    * <p />
    * Dead letters are unrecoverable lost messages, usually an administrator
    * should subscribe to those messages.
    */
   public boolean isDeadLetter() throws XmlBlasterException
   {
      return getUniqueKey().equals(Constants.OID_DEAD_LETTER);
   }


   /**
    * Access the literal ASCII xmlKey.
    * @return the literal ASCII xmlKey
    */
   public String toString()
   {
      return toXml();
   }


   /**
    * Access the literal ASCII xmlKey.
    * @return the literal ASCII xmlKey
    */
   public String toXml()
   {
      return xmlKey_literal;
   }


   /**
    * Access the literal XML-ASCII xmlKey.
    * <p />
    * Note that this may vary from the original ASCII string:<br />
    * When the key oid was generated locally, the literal string contains
    * this new generated oid as well.
    * @return the literal ASCII xmlKey
    */
   public String literal()
   {
      return xmlKey_literal;
   }


   /**
    * Synonym for getKeyOid().
    *
    * @return oid
    */
   public String getUniqueKey() throws XmlBlasterException
   {
      return getKeyOid();
   }


   /**
    * Is the key oid generated or given by the client?
    *
    * @return true generated oid by xmlBlaster
    */
   public boolean isGeneratedOid() throws XmlBlasterException
   {
      if (isGeneratedOid == -1)
         loadDomTree();
      return (isGeneratedOid==1) ? true : false;
   }


   /**
    * Find out which mime type (syntax) of the XmlKey_literal String.
    * @return "text/xml" only XML is supported
    */
    /*
   public String getMimeType() throws XmlBlasterException
   {
      loadDomTree();
      if (keyType == XML_TYPE)
         return "text/xml";
      else if (keyType == ASCII_TYPE) // not supported!
         return "text/plain";
      else
         return "text/plain";         // not supported!
   }
     */

   /**
    * Find out which mime type (syntax) the content of the message has.
    * @return The MIME type, for example "text/xml" in &lt;key oid='' contentMime='text/xml'><br />
    *         default is "text/plain" if not set
    * @see <a href="ftp://ftp.std.com/customers3/src/mail/imap-3.3/RFC1521.TXT">RFC1521 - MIME (Multipurpose Internet Mail Extensions)</a>
    */
   public String getContentMime() throws XmlBlasterException
   {
      if (contentMime == null) {
         parseRaw();
      }
      if (contentMime != null) {
         return contentMime;
      }
      loadDomTree();
      return contentMime;
   }

   /**
    * Some further specifying information of the content.
    * <p />
    * For example the application version number the document in the content.<br />
    * You may use this attribute for you own purposes.
    * @return The MIME-extended info, for example<br />
    *         "Version 1.1" in &lt;key oid='' contentMime='text/xml' contentMimeExtended='Version 1.1'><br />
    *         or "" (empty string) if not known
    */
   public String getContentMimeExtended() throws XmlBlasterException
   {
      if (contentMimeExtended == null) {
         parseRaw();
      }
      if (contentMimeExtended != null) {
         return contentMimeExtended;
      }
      loadDomTree();
      return contentMimeExtended;
   }

   /**
    * Access the domain for this message, can be used for a simple grouping of
    * messages to their master node with xmlBlaster clusters. 
    * @return The domain, any chosen string in your problem domain, e.g. "RUGBY" or "RADAR_TRACK"
    *         defaults to "" where the local xmlBlaster instance is the master of the message.
    * @see <a href="http://www.xmlblaster.org/xmlBlaster/doc/requirements/cluster.html">The cluster requirement</a>
    */
   public String getDomain() throws XmlBlasterException
   {
      if (domain == null) {
         parseRaw();
      }
      if (domain != null) {
         return domain;
      }
      loadDomTree();
      return domain;
   }

   /**
    * @return true if no domain is given (null or empty string). 
    */
   public boolean isDefaultDomain() throws XmlBlasterException
   {
      String domain = getDomain();
      if (domain == null || domain.equals(DEFAULT_domain))
         return true;
      return false;
   }

   /**
    * Accessing the unique oid of <key oid="...">.
    *
    * @return oid
    */
   public String getKeyOid() throws XmlBlasterException
   {
      if (keyOid == null) {
         parseRaw();
      }
      if (keyOid != null) {
         return keyOid;
      }
      //Log.info(ME, "keyOid='" + keyOid + "'");
      loadDomTree();
      return keyOid;
   }

   /**
    * Try to parse keyOid and queryType ourself
    */
   private final void parseRaw() throws XmlBlasterException
   {
      keyOid = parseRaw(xmlKey_literal, "<key oid=");
      if (keyOid != null) {
         if (keyOid.length() < 1) {
            keyOid = null;
            return; // failed
         }
         isGeneratedOid = 0;

         // try to find the queryType etc.:
         int start = xmlKey_literal.indexOf("<key oid=");
         int close = xmlKey_literal.indexOf('>', start);
         String keyToken = xmlKey_literal.substring(start, close);
         String tmp;

         tmp = parseRaw(keyToken, "queryType=");
         if (tmp != null && tmp.length() > 0) {
            setQueryType(tmp);
            //Log.info(ME, "queryType='" + tmp + "'");
         }
         else {
            queryType = (isPublish) ? PUBLISH : EXACT_QUERY;
         }

         tmp = parseRaw(keyToken, "contentMime=");
         if (tmp != null && tmp.length() > 0) {
            contentMime = tmp;
            //Log.info(ME, "contentMime='" + tmp + "'");
         }
         else {
            contentMime = DEFAULT_contentMime;
         }

         tmp = parseRaw(keyToken, "contentMimeExtended=");
         if (tmp != null && tmp.length() > 0) {
            contentMimeExtended = tmp;
            //Log.info(ME, "contentMimeExtended='" + tmp + "'");
         }
         else {
            contentMimeExtended = DEFAULT_contentMimeExtended;
         }

         tmp = parseRaw(keyToken, "domain=");
         if (tmp != null && tmp.length() > 0) {
            domain = tmp;
            //Log.info(ME, "domain='" + tmp + "'");
         }
         else {
            domain = DEFAULT_domain;
         }
      }
   }

   /**
    * Parse xml ourself, to gain performance
    */
   private final String parseRaw(String str, String token)
   {
      int index = str.indexOf(token);
      if (index >= 0) {
         int from = index+token.length();
         char apo = str.charAt(from);
         int end = str.indexOf(apo, from+1);
         if (end > 0) {
            return str.substring(from+1, end);
         }
      }
      return null;
   }

   /**
    * Accessing the internal state of xmlBlaster.
    * <br />
    * @return true if accessing <__sys__xy>
    */
   public final boolean isInternalStateQuery() throws XmlBlasterException
   {
      String tmp = getKeyOid();
      if (tmp.indexOf("__sys__") != -1)
         return true;
      else
         return false;
   }


   /**
    * Fills the DOM tree, and assures that a valid <key oid="..."> is used.
    */
   public org.w3c.dom.Node getRootNode() throws XmlBlasterException
   {
      loadDomTree();
      return xmlToDom.getRootNode();
   }


   /**
    * Fills the DOM tree, and assures that a valid <key oid="..."> is used.
    */
   public org.w3c.dom.Document getXmlDoc() throws XmlBlasterException
   {
      loadDomTree();
      return xmlToDom.getXmlDoc();
   }


   /**
    * The mode how a subscribe() or get() is formulated.
    * @return EXACT_QUERY or XPATH_QUERY
    */
   public final int getQueryType() throws XmlBlasterException
   {
      if (queryType == -1) {
         parseRaw();
      }
      if (queryType != -1) {
         return queryType;
      }

      loadDomTree();
      return queryType;
   }


   /**
    * The mode how a subscribe() or get() is formulated.
    * @return EXACT_QUERY or XPATH_QUERY
    */
   public final String getQueryTypeStr() throws XmlBlasterException
   {
      int type = getQueryType();
      if (type == XPATH_QUERY)
         return "XPATH";
      else if (type == EXACT_QUERY)
         return "EXACT";
      else if (type == REGEX_QUERY)
         return "REGEX";
      return "";
   }


   /**
    * Was subscribe() or get() formulated as a query?
    * @return true if XPATH_QUERY (or other, not exact query types)
    */
   public final boolean isQuery() throws XmlBlasterException
   {
      int type = getQueryType();
      if (type == XPATH_QUERY || type == REGEX_QUERY)
         return true;
      return false;
   }


   /**
    * Was subscribe() or get() invoked with an exact oid?
    * @return true if EXACT_QUERY
    */
   public final boolean isExact() throws XmlBlasterException
   {
      if (getQueryType() == EXACT_QUERY)
         return true;
      return false;
   }

   private final void setQueryType(String val) throws XmlBlasterException
   {
      if (val.equalsIgnoreCase("EXACT"))
         queryType = EXACT_QUERY;
      else if (val.equalsIgnoreCase("XPATH"))
         queryType = XPATH_QUERY;
      else if (val.equalsIgnoreCase("REGEX"))
         queryType = REGEX_QUERY;
      else {
         Log.warn(ME+".UnknownQueryType", "Unknown queryType " + val + ", setting default to EXACT");
         //throw new XmlBlasterException(ME+".UnknownQueryType", "Unknown queryType " + val + ", your xmlKey is invalid");
      }
   }

   public String getQueryString() throws XmlBlasterException
   {
      loadDomTree();
      return queryString;
   }


   /**
    * Fills the DOM tree, and assures that a valid <pre>&lt;key oid="..."></pre> is used.
    * <p>
    * keyOid will be set properly if no error occurs
    * xmlToDom will be set properly if no error occurs
    */
   private void loadDomTree() throws XmlBlasterException
   {
      if (xmlToDom != null)
         return;       // DOM tree is already loaded

      if (keyType == ASCII_TYPE)
         return;       // no XML -> no DOM

      xmlToDom = new XmlToDom(xmlKey_literal);
      org.w3c.dom.Node node = xmlToDom.getRootNode();

      // Finds the <key oid="..." queryType="..."> attributes, or inserts a unique oid if empty
      if (node == null) {
         Log.error(ME+".Internal", "root node = null");
         throw new XmlBlasterException(ME+"Internal", "root node = null");
      }

      String nodeName = node.getNodeName();

      if (!nodeName.equalsIgnoreCase("key")) {
         Log.error(ME+".WrongRootNode", "The root node must be named \"key\"\n" + xmlKey_literal);
         throw new XmlBlasterException(ME+".WrongRootNode", "The root node must be named \"key\"\n" + xmlKey_literal);
      }

      /*
      isInternalStateQuery = false;
      if (xmlKey_literal.indexOf("<__sys__internal>") != -1 && xmlKey_literal.indexOf("</__sys__internal>") != -1)
         isInternalStateQuery = true;
      */

      keyOid = null;
      queryType = (isPublish) ? PUBLISH : EXACT_QUERY;

      NamedNodeMap attributes = node.getAttributes();
      if (attributes != null && attributes.getLength() > 0) {
         int attributeCount = attributes.getLength();
         for (int i = 0; i < attributeCount; i++) {
            Attr attribute = (Attr)attributes.item(i);

            if (attribute.getNodeName().equalsIgnoreCase("oid")) {
               String val = attribute.getNodeValue();
               if (val.length() < 1) {
                  if (keyOid == null)
                     keyOid = generateKeyOid();
                  attribute.setNodeValue(keyOid);
                  if (Log.TRACE) Log.trace(ME, "Generated key oid=\"" + keyOid + "\"");
               }
               else {
                  keyOid = val;
                  isGeneratedOid = 0;
                  if (Log.TRACE) Log.trace(ME, "Found key oid=\"" + keyOid + "\"");
               }
            }

            if (isPublish && attribute.getNodeName().equalsIgnoreCase("contentMime")) {
               contentMime = attribute.getNodeValue();
               if (contentMime == null || contentMime.length()<1) contentMime = DEFAULT_contentMime;
            }

            if (isPublish && attribute.getNodeName().equalsIgnoreCase("contentMimeExtended")) {
               contentMimeExtended = attribute.getNodeValue();
               if (contentMimeExtended == null) contentMimeExtended = DEFAULT_contentMimeExtended;
            }

            if (attribute.getNodeName().equalsIgnoreCase("domain")) {
               domain = attribute.getNodeValue();
               if (domain == null || domain.length()<1) domain = DEFAULT_domain;
            }

            if (!isPublish && attribute.getNodeName().equalsIgnoreCase("queryType")) {
               String val = attribute.getNodeValue();
               setQueryType(val);
            }
         }
      }

      if (keyOid == null) {
         keyOid = generateKeyOid();
         //Log.error(ME+".WrongRootNode", "Missing \"oid\" attribute in \"key\" tag");
         //throw new XmlBlasterException(ME+".WrongRootNode", "Missing \"oid\" attribute in \"key\" tag");
      }

      //Log.info(ME+".DOM", "parsing DOM: " + keyOid);
      //Thread.currentThread().dumpStack();

      if (isPublish && contentMime == null) {
         Log.warn(ME+".MissingContentMime", "Missing \"contentMime\" attribute in \"key\" tag");
         contentMime = "text/plain";
      }

      //xmlKey_nice = toNiceXml("");

      // extract the query string <key ...>'The query string'</key>
      if (!isPublish && queryType != EXACT_QUERY) {
         NodeList children = node.getChildNodes();
         if (children != null) {
            int len = children.getLength();
            for (int i = 0; i < len; i++) {
               Node childNode = children.item(i);
               if (childNode.getNodeType() == Node.TEXT_NODE) {
                  queryString = childNode.getNodeValue().trim();
               }
            }
         }
         if (queryString==null || queryString.length() < 1) {
            Log.error(ME+".MissingQuery", "Missing query string in <key queryType='XPATH'>//key</key> tag");
            throw new XmlBlasterException(ME+".MissingQuery", "Missing query string in <key queryType='XPATH'>//key</key> tag");
         }
      }

      //Log.info(ME, "DOM parsed the XmlKey");
      //Thread.currentThread().dumpStack();

      //if (/*isPublish && */isGeneratedOid) We do it allways to have nice formatting for emails etc.
         xmlKey_literal = xmlToDom.domToXml("\n"); // write the generated key back to literal string
   }


   /**
    * Should be called by publish() to merge the local XmlKey DOM into the big xmlBlaster DOM tree
    */
   public void mergeRootNode(I_MergeDomNode merger) throws XmlBlasterException
   {
      if (isPublish) {
         if (Log.TRACE) Log.trace(ME, "Created DOM tree for " + getUniqueKey() + ", adding it to <xmlBlaster> tree");
         loadDomTree();
         xmlToDom.mergeRootNode(merger);
      }
      else {
         Log.plain(org.jutils.runtime.StackTrace.getStackTrace());
         Log.warn(ME, "You should call mergeNode only for publish");
      }
   }


   /**
    * Generates a unique key.
    * <p />
    * TODO: include IP adress and PID for global uniqueness
    */
   private final String generateKeyOid()
   {
      StringBuffer oid = new StringBuffer(80);

      if (ip_addr == null) {
         try {
            ip_addr = java.net.InetAddress.getLocalHost().getHostAddress(); // "192.168.1.1" from "swand.lake.de/192.168.1.1"
         } catch (java.net.UnknownHostException e) {
            if (Log.TRACE) Log.trace(ME, e.toString());
         }
         if (ip_addr == null)
            ip_addr = "127.0.0.0";
      }

      if (oa_port == null)
         oa_port = XmlBlasterProperty.get("iorPort", "7609"); // default xmlBlaster IOR publishing port is 7609 (HTTP_PORT)
         //  java.net.ServerSocket.getLocalPort();

      long currentTime = System.currentTimeMillis();

      oid.append(ip_addr).append("-").append(oa_port).append("-").append(currentTime).append("-").append(uniqueCounter);

      synchronized (XmlKeyBase.class) {
         uniqueCounter++;
      }

      isGeneratedOid = 1;
      return oid.toString();
   }


   /**
    * Dump state of this object into XML.
    * <br>
    * @return XML state of MessageUnitHandler
    */
   public final StringBuffer printOn()
   {
      return printOn((String)null);
   }


   /**
    * Dump state of this object into XML.
    * <br>
    * @param extraOffset indenting of tags
    * @return XML state of MessageUnitHandler
    */
   public final StringBuffer printOn(String extraOffset)
   {
      StringBuffer sb = new StringBuffer(256);
      String offset = "\n   ";
      if (extraOffset == null) extraOffset = "";
      offset += extraOffset;

      try {
         sb.append(offset).append("<XmlKeyBase oid='").append(getUniqueKey()).append("'");
         if (!DEFAULT_contentMime.equals(getContentMime()))
            sb.append(" contentMime='").append(contentMime).append("'");
         if (!DEFAULT_contentMimeExtended.equals(getContentMimeExtended()))
            sb.append(" contentMimeExtended='").append(contentMimeExtended).append("'");
         if (!DEFAULT_domain.equals(getDomain()))
            sb.append(" domain='").append(domain).append("'");
         if (queryType != PUBLISH)
            sb.append(" queryType='").append(getQueryTypeStr()).append("'");
         sb.append(">");

         if (queryString.length() > 0)
            sb.append(offset).append("   <queryString>").append(queryString).append("</queryString>");
         sb.append(offset).append("   <keyType>").append(keyType).append("</keyType>");
         sb.append(offset).append("   <isGeneratedOid>").append(isGeneratedOid()).append("</isGeneratedOid>");
         sb.append(offset).append("   <isPublish>").append(isPublish).append("</isPublish>");
         sb.append(offset).append("   <isInternalStateQuery>").append(isInternalStateQuery()).append("</isInternalStateQuery>");
         sb.append(xmlToDom.printOn(extraOffset + "   ").toString());
         sb.append(offset).append("</XmlKeyBase>");
      } catch (XmlBlasterException e) {
         Log.warn(ME, "Caught exception in printOn()");
      }
      return sb;
   }

}
