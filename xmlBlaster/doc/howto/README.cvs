Setting up CVS server for xmlBlaster [11/1/1999]:
=================================================
     cvs -d /www/cvsroot init
     export CVSROOT=/www/cvsroot
     cd xmlBlaster
     cvs import -m "Startup of xmlBlaster.org 11/1/1999" xmlBlaster INITIAL_XMLBLASTER start
     export CVSROOT=":pserver:USER@192.168.24.129:/www/cvsroot"


Creating a branch to work on separate code (Example):
=====================================================
  Create a CVS branch to work on the new MyHack.idl V0.8
    cd $HOME
    mv xmlBlaster xmlBlaster.MainBranch
  Set a tag in the repository for my branch:
    cvs rtag -b MyHackV08 xmlBlaster
  Check out the branch (before move away the main branch: e.g. cd $HOME;  mv xmlBlaster xmlBlaster.MainBranch):
    cvs checkout -r MyHackV08 xmlBlaster
  Check if you are on a branch:
    cvs status -v <file>
    -> The Sticky Tag should show MyHackV08


Merge the branch again with the main development:
=================================================
  1) For problem recovery reasons only:
      Set a tag into the main branch:
        cvs tag BEFORE_V08_MERGE
      With this you can checkout in case of problems the old main branch again:
        cvs checkout -r BEFORE_V08_MERGE xmlBlaster
      but - this should never be necessary

  2) Now merge branch V08 back into the main branch:
      cd $HOME
      mv  xmlBlaster  xmlBlaster.xmlBlasterV08   -> save MyHackV08 branch
      cvs checkout xmlBlaster                    -> get the current main branch as a working copy to merge
      cd xmlBlaster
      cvs update -d -P -j MyHackV08 -> merge all from the branch into the main code
                                    -> resolve possible conflicts
                                    -> compile and test it

   3) Then publish it for everybody:
      cvs commit


