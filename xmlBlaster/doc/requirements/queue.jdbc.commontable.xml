<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">


<requirement id='queue.jdbc.commontable' type='NEW' prio='HIGH' status='OPEN'>
   <topic>
     JDBC Plugin which stores all queues on a common table.
   </topic>

   <description>
     <p>
     When using the <i>org.xmlBlaster.util.queue.jdbc.JdbcQueuePlugin</i> XmlBlaster handles jdbc persistent storage
     by using a pool of tables. When a queue is created, such a table is used to store messages of that queue.
     When the queue is destroyed, the associated table is put back in the pool of free tables. If there is 
     need for further tables, xmlBlaster automatically adds tables to the pool.
     </p>
     <p>
     For systems where the programatical creation of tables on the DB is not allowed, it would become 
     unpractical or even prohibitive to create a sufficient amount of tables for the freetables pool by hand.<br/>
     For such situations an alternative approach can be used which uses a limited number of tables.
     This approach is used by the class <i>org.xmlBlaster.util.queue.jdbc.JdbcQueueCommonTablePlugin</i>.
     </p>
     <p>
       <b>Concept</b><br/>
       All necessary information will be contained in three tables. The names of the tables are configurable on
       the configuration file. More about that in the configuration section. Lets call these tables 
       <b><i>Nodes</i></b>, <b><i>Queues</i></b> and <b><i>Entries</i></b>.
     </p>
     <p>
     The relation between these tables is shown in the following Entity Relationship diagram<br/>
     </p>
     <p>
     <center><img src="jdbcDesignERD.gif" border="0" alt="jdbcDesignERD" /></center>
     </p>
     <p>
     As already said, all entries are put in a common bucket, unaware of which cluster they belong. In many
     applications this must be avoided. You can isolate the entries on a <i>per cluster basis</i> or on a 
     <i>per cluster-group basis</i> by having defined different names for the different tables.
     </p>
     <p>
     When you start xmlBlaster for the first time you may want to let it create the necessary tables. In 
     other situations you would like to prevent it to be done (for example because lack of authorization).
     For these purposes you can use the <b><i>dbAdmin</i></b> flag
     </p>
     <p>
     If there is the need to create the tables manually here follows the code to use (note that it is
     parametrized).
     <pre>
#
# General settings (independent from database implementations)
# 
# ${Nodes}   XMLBLASTERNODES
# ${Queues}  XMLBLASTERQUEUES
# ${Entries} XMLBLASTERENTRIES
#
#  For postgres:
#
# ${string}  text
# ${longint} bigint 
# ${int}     integer
# ${boolean} char(1)
# ${blob}    bytea
#
#  For Oracle:
#
# ${string}  VARCHAR(128)
# ${longint} NUMBER(19)
# ${int}     NUMBER(10)
# ${boolean} CHAR(1)
# ${blob}    long raw
#

CREATE TABLE ${Nodes}   (nodeId ${string}, 
                         PRIMARY KEY (nodeId))

CREATE TABLE ${Queues}  (queueName ${string},
                         nodeId ${string},
                         numOfBytes ${longint},
       		         numOfEntries ${longint},
       		         PRIMARY KEY (queueName, nodeId),
       		         FOREIGN KEY (nodeId) REFERENCES $Nodes} ON DELETE CASCADE)
    
CREATE TABLE ${Entries} (dataId ${longint},
                         nodeId ${string},
		         queueName ${string},
		         prio ${int},
		         flag ${string},
		         durable ${boolean},
		         byteSize ${longint},
		         blob ${blob},
		         PRIMARY KEY (dataId, queueName),
		         FOREIGN KEY (queueName, nodeId) REFERENCES ${Queues} ON DELETE CASCADE)
     </pre>
     </p>
    </description>


   <configuration where="server">

     <pre>
StoragePlugin[JDBC][1.0]=org.xmlBlaster.util.queue.jdbc.JdbcQueueCommonTablePlugin,
                         nodesTableName=NODES,
			 queuesTableName=QUEUES,
			 entriesTableName=ENTRIES,
			 tableNamePrefix=XB,
			 dbAdmin=true
     </pre>
     <table border="1">
	<tr>
	  <td><b>Property</b></td>
	  <td><b>default</b></td>
	  <td><b>comment</b></td>
	</tr>
	<tr>
	  <td>nodeTableName</td>
	  <td>NODES</td>
	  <td>the name postfix for the table containing the cluster nodes.</td>
	</tr>
	<tr>
	  <td>queueTableName</td>
	  <td>QUEUES</td>
	  <td>the name postfix for the table containing the queues.</td>
	</tr>
	<tr>
	  <td>entriesTableName</td>
	  <td>ENTRIES</td>
	  <td>the name postfix for the table containing the entries.</td>
	</tr>
	<tr>
	  <td>tableNamePrefix</td>
	  <td>XB</td>
	  <td>the name prefix for the table containing the entries. Note that the complete names for the 
	      tables are created by adding the tableNamePrefix to the names. So if you specify 
	      <i>nodeTableName=NODES</i> and <i>tableNamePrefix=XB_</i> you will get the name of the table 
	      to be <i>XB_NODES</i>.
	  </td>
	</tr>
	<tr>
	  <td>dbAdmin</td>
	  <td>true</td>
	  <td>if set to true xmlBlaster will try to create tables if needed.</td>
	</tr>
     </table>
   </configuration>

   <see type="API">org.xmlBlaster.util.queue.I_Queue</see>
   <see type="API">org.xmlBlaster.util.queue.jdbc.JdbcQueueCommonTablePlugin</see>
   <see type="API">org.xmlBlaster.util.queue.QueuePluginManager</see>
   <see type="API">org.xmlBlaster.util.queue.I_QueueEntry</see>
   <see type="API">org.xmlBlaster.util.qos.storage.QueuePropertyBase</see>
   <see type="API">org.xmlBlaster.util.I_Plugin</see>
   <see type="API">org.xmlBlaster.util.Global</see>
   <see type="REQ">queue</see>
   <see type="REQ">queue.jdbc</see>
   <see type="REQ">queue.jdbc.postgres</see>
   <see type="REQ">queue.jdbc.oracle</see>

<!--   <see type="REQ">cluster</see> -->
   <author>laghi@swissinfo.org</author>
   <date>2003 01 28</date>
   <revision>$Revision: 1.6 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.classtest.queue.I_QueueTest</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.queue.JdbcQueueTest</test>
   </testcase>
</requirement>

