<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='interface.connect' type='NEW' prio='HIGH' status="CLOSED">
   <topic>Connecting to xmlBlaster</topic>
   <description>
      <p>
      The <b>connect()</b> method allows to login to xmlBlaster.
      </p>
      <p>
      Method detail (CORBA IDL notation):
      </p>
      <pre>
typedef string XmlType;

serverIdl::XmlType connect(in serverIdl::XmlType qos)
                           raises (serverIdl::XmlBlasterException);
      </pre>
         
      <table border="1">
         <tr>
         <th>Parameter</th><th>Type</th><th>Description</th>
         </tr>
         <tr>
         <td>qos</td><td>string</td><td>The XML encoded Quality of Service (QoS), see ConnectQos link below.</td>
         </tr>
         <tr>
         <td>return</td><td>string</td><td>An XML based return string containing status and other informations, see ConnectReturnQos link below.</td>
         </tr>
         <tr>
         <td>XmlBlasterException</td><td>exception</td><td>Thrown on error.</td>
         </tr>
      </table>
   </description>


   <example lang="XML" type="HTML">
      <p>
      Here is an example <b>connect QoS</b> which is send when a client connects to xmlBlaster:
      </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>

   &lt;securityService type="htpasswd" version="1.0">
     &lt;![CDATA[
     &lt;user>michele&lt;/user>
     &lt;passwd>secret&lt;/passwd>
     ]]&gt;
   &lt;/securityService>

   &lt;session name='joe/3' timeout='3600000' maxSessions='10'
               clearSessions='false' reconnectSameClientOnly='false'/>

   &lt;!-- Recoverable session after server crash / restart -->
   &lt;persistent/>

   &lt;ptp>true&lt;/ptp>

   &lt;duplicateUpdates>false&lt;/duplicateUpdates>

   &lt;queue relating='subject' type='CACHE' version='1.0'
             maxEntries='5000' maxBytes='1000000'
             maxEntriesCache='100' maxBytesCache='100000'
             onOverflow='deadMessage'>\n" +

   &lt;queue relating='callback' maxEntries='1000' maxBytes='4000000'
                                                   onOverflow='deadMessage'>
      &lt;callback type='IOR' sessionId='4e56890ghdFzj0' pingInterval='10000'
          retries='-1' delay='10000' oneway='false' dispatchPlugin='undef'>
         IOR:10000010033200000099000010....
         &lt;burstMode collectTime='400' maxEntries='20' maxBytes='-1L' />
         &lt;compress type='gzip' minSize='3000'/> <!-- not implemented -->
         &lt;ptp>true&lt;/ptp>
      &lt;/callback>
   &lt;/queue>
   &lt;!-- a client specific property: here it could be the bean to invoke on updates -->
   &lt;clientProperty name='onMessageDefault'>beanName&lt;/clientProperty>

&lt;/qos>
   </pre>
   </td></tr></table>
   <h3>&lt;securityService></h3>
    <p>
    The <b>&lt;securityService></b> allows to choose the authentication plugin
    and delivers the credentials as expected by the plugin. Here it
    is a simple password based approach.
    </p>
   <h3>&lt;session></h3>
    <p>
    In the above example we use the <b>&lt;session></b> tag to configure our login session.
    We login to xmlBlaster as user <i>joe</i>. Additionally we have specified
    to use the public session identifier <i>3</i> (this is optionally).
    Sending this pubSessionId allows us to reconnect
    to the session <i>3</i> at any time later. This is useful for example if the client
    has crashed or the client stops and later wants to reconnect and find
    the same state as before (all subscriptions remain and the callback queue has
    stored messages during client-downtime).
    </p>
    <p>
    After <i>timeout=3600000</i> milliseconds (which is one day) of inactivity our login session dies
    automatically and all resources like the callback queue are garbage collected.
    </p>
    <p>
    The user <i>joe</i> can login most ten times, as specified with <i>maxSessions='10'</i>.
    </p>
    <p>
    For administrative purposes we can set <i>clearSessions='true'</i> which will destroy
    all other login sessions of <i>joe</i>.
    </p>
    <p>
    Setting <i>reconnectSameClientOnly='true'</i> would only allow the client which
    is the creator of a session to reconnect to a session. See requirement <code>client.confiuration</code>
    for more details.
    </p>
   <h3>&lt;ptp></h3>
    <p>
     This allows to suppress receiving PtP messages
    </p>
   <h3>&lt;duplicateUpdates></h3>
    <p>
     If a client subscribes to the same topic multiple times it will
     receive multiple updates of the same message. Setting <i>duplicateUpdates</i>
     to false will filter the callback to deliver the same message only once.
    </p>
   <h3>&lt;queue></h3>
    <p>
     This markup allows to configure how our callback queue looks like.
     Further the inner <b>&lt;callback></b> tag allows us to pass the address
     of our client side callback server. In the above example we use CORBA to receive
     callbacks.
    </p>
   </example>

   <example lang="XML" type="HTML">
      <p>
      Here is an example for the <b>return QoS of a connect invocation</b> which is returned
      from the server to the client on successful login.
      </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>

   &lt;securityService type="htpasswd" version="1.0">
     &lt;![CDATA[
     &lt;user>michele&lt;/user>
     &lt;passwd>secret&lt;/passwd>
     ]]&gt;
   &lt;/securityService>

   &lt;session name='joe/3'  
               timeout='3600000'
               maxSessions='10'
               clearSessions='false'
               sessionId='4e56890ghdFzj0'/>

   &lt;!-- Has the client reconnected to an existing session? -->
   &lt;reconnected>false&lt;/reconnected>

   &lt;queue relating='callback' maxEntries='1000' maxBytes='4000000'
                                                   onOverflow='deadMessage'>
      &lt;callback type='IOR' sessionId='4e56890ghdFzj0'>
         IOR:10000010033200000099000010....
         &lt;burstMode collectTime='400' />
      &lt;/callback>
   &lt;/queue>

&lt;/qos>
   </pre>
   </td></tr></table>
   <p>
    This is more or less a copy of the sent connect QoS but with some added information.
   </p>
   <p>
    Especially the secret <b>sessionId</b> is returned which has to be used for
    further requests (not for CORBA which handles this under the cover).
   </p>
   </example>

   <example lang="XmlRpc" type="HTML">
      <p>
      This is the XmlRpc server interface variant:
      </p>
      <pre>
public String connect(String qos_literal) throws XmlBlasterException
      </pre>
   </example>

   <example lang="RMI" type="HTML">
      <p>
      This is the RMI server interface variant:
      </p>
      <pre>
public String connect(String qos_literal)
                        throws RemoteException, XmlBlasterException
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code:
      </p>
      <pre>
import org.xmlBlaster.client.qos.ConnectQos;
import org.xmlBlaster.client.qos.ConnectReturnQos;
...

ConnectQos qos = new ConnectQos(glob, "william", "secretPwd");

ConnectReturnQos retQos = con.connect(qos, new I_Callback() {

   public String update(String cbSessionId, UpdateKey updateKey,
                        byte[] content, UpdateQos updateQos) {
      ...
      if (updateKey.isInternal()) {
         ...
      }

      if (updateQos.isOk()) {
         ...
      }
      else if (updateQos.isErased()) {
         ...
      }
      return "";
   }

});
      </pre>
   </example>

   <configuration>
   </configuration>

   <see type="REQ">interface</see>
   <see type="API">org.xmlBlaster.client.qos.ConnectQos</see>
   <see type="API">org.xmlBlaster.client.qos.ConnectReturnQos</see>
   <see type="API">org.xmlBlaster.protocol.xmlrpc.AuthenticateImpl</see>
   <see type="API">org.xmlBlaster.protocol.rmi.AuthServerImpl</see>
   <see type="INTERNET">http://www.xmlBlaster.org/xmlBlaster/demo/HelloWorld3.java.html</see>
   <see type="INTERNET">http://www.xmlBlaster.org/xmlBlaster/src/java/org/xmlBlaster/protocol/corba/xmlBlaster.idl.html</see>

   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 26</date>
   <revision>$Revision: 1.17 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>This uses the Disconnect but does not test it yet</comment>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestLogout</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestLogin</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestLoginLogoutEvent</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestSession</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestSessionCb</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestSessionReconnect</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestReconnectSameClientOnly</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestAuthenticationHtPassWd</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.ConnectQosTest</test>
   </testcase>
</requirement>

