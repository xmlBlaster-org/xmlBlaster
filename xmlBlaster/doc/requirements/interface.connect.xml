<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='interface.connect' type='NEW' prio='HIGH' status="CLOSED">
   <topic>Connecting to xmlBlaster</topic>
   <description>
      <p>
      The <b>connect()</b> method allows to login to xmlBlaster.
      </p>
      <p>
      Method detail (CORBA IDL notation):
      </p>
      <pre>
typedef string XmlType;

serverIdl::XmlType connect(in serverIdl::XmlType qos)
                           raises (serverIdl::XmlBlasterException);
      </pre>
         
      <table border="1">
         <tr>
         <th>Parameter</th><th>Type</th><th>Description</th>
         </tr>
         <tr>
         <td>qos</td><td>string</td><td>The XML encoded Quality of Service (QoS), see ConnectQos link below.</td>
         </tr>
         <tr>
         <td>return</td><td>string</td><td>An XML based return string containing status and other informations, see ConnectReturnQos link below.</td>
         </tr>
         <tr>
         <td>XmlBlasterException</td><td>exception</td><td>Thrown on error.</td>
         </tr>
      </table>
   </description>


   <example lang="XML" type="HTML">
      <p>
      Here is an example <b>connect QoS</b> which is send when a client connects to xmlBlaster:
      </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>

   &lt;securityService type="htpasswd" version="1.0">
     &lt;![CDATA[
     &lt;user>michele&lt;/user>
     &lt;passwd>secret&lt;/passwd>
     ]]&gt;
   &lt;/securityService>

   &lt;session name='joe/3' timeout='3600000' maxSessions='10'
               clearSessions='false' reconnectSameClientOnly='false'/>

   &lt;!-- Recoverable session after server crash / restart -->
   &lt;persistent/>

   &lt;ptp>true&lt;/ptp>

   &lt;duplicateUpdates>false&lt;/duplicateUpdates>

   &lt;!-- Setting to control client side behavior, used for cluster configuration -->
   &lt;queue relating='connection' maxEntries='10000000' maxEntriesCache='1000'>
      &lt;address type='IOR' bootstrapPort='7600' dispatchPlugin='undef'/>
   &lt;/queue>

   &lt;!-- Configure the server side subject queue (one for each login name) -->
   &lt;queue relating='subject' type='CACHE' version='1.0'
             maxEntries='5000' maxBytes='1000000'
             maxEntriesCache='100' maxBytesCache='100000'
             onOverflow='deadMessage'>

   &lt;!-- Configure the server side callback queue (one for each login session) -->
   &lt;queue relating='callback' maxEntries='1000' maxBytes='4000000'
                                                   onOverflow='deadMessage'>
      &lt;callback type='IOR' sessionId='4e56890ghdFzj0' pingInterval='10000'
          retries='-1' delay='10000' oneway='false' dispatcherActive='true' dispatchPlugin='undef'>
         IOR:10000010033200000099000010....
         &lt;burstMode collectTime='400' maxEntries='20' maxBytes='-1' />
         &lt;compress type='gzip' minSize='3000'/> &lt;!-- only implemented for SOCKET protocol -->
         &lt;ptp>true&lt;/ptp>
         &lt;attribute name='key1' type='int'>2005&lt;/attribute>
      &lt;/callback>
   &lt;/queue>

   &lt;!-- a client specific property: here it could be the bean to invoke on updates -->
   &lt;clientProperty name='onMessageDefault'>beanName&lt;/clientProperty>

&lt;/qos>
   </pre>
   </td></tr></table>

   <table border="1">
   <tr>
   <th>Parameter</th><th>Description</th>
   </tr>
   <tr>
   <td>&lt;securityService></td><td>
    <p>
    The <b>&lt;securityService></b> allows to choose the authentication plugin
    and delivers the credentials as expected by the plugin. Here it
    is a simple password based approach.
    </p>
   </td>
   </tr>
   <tr>
   <td>&lt;session></td><td>
    <p>
    In the above example we use the <b>&lt;session></b> tag to configure our login session.
    We login to xmlBlaster as user <i>joe</i>. Additionally we have specified
    to use the public session identifier <i>3</i> (this is optionally).
    Sending this pubSessionId allows us to reconnect
    to the session <i>3</i> at any time later. This is useful for example if the client
    has crashed or the client stops and later wants to reconnect and find
    the same state as before (all subscriptions remain and the callback queue has
    stored messages during client-downtime).
    </p>
    <p>
    After <i>timeout=3600000</i> milliseconds (which is one day) of inactivity our login session dies
    automatically and all resources like the callback queue are garbage collected.
    The session lasts forever if <tt>timeout</tt> is set to <tt>0</tt>.
    </p>
    <p>
    The user <i>joe</i> can login most ten times, as specified with <i>maxSessions='10'</i>.
    </p>
    <p>
    For administrative purposes we can set <i>clearSessions='true'</i> which will destroy
    all other login sessions of <i>joe</i>.
    </p>
    <p>
    Setting <i>reconnectSameClientOnly='true'</i> would only allow the client which
    is the creator of a session to reconnect to a session. See requirement <code>client.confiuration</code>
    for more details.
    </p>
   </td>
   </tr>
   <tr>
   <td>&lt;ptp></td>
   <td>
    <p>
     This allows to suppress receiving PtP messages
    </p>
   </td>
   </tr>
   <tr>
   <td>&lt;duplicateUpdates></td>
   <td>
    <p>
     If a client subscribes to the same topic multiple times it will
     receive multiple updates of the same message. Setting <i>duplicateUpdates</i>
     to false will suppress multiple subscribes on the same topic to deliver the same message only once.
     Note that this setting does not support XPath subscriptions.<br />
     This setting does reference counting, you need as many unSubscribe() calls as
     you did subscribe() calls before.<br />
     This configuration is <b>deprecated</b> and will probably be removed
     in a future version as the subscribe QoS specific 'multiSubscribe' setting
     has more functionality and is specific for each <tt>subscribe()</tt>, see
     requirement <tt>engine.qos.subscribe.multiSubscribe</tt> for more details.
    </p>
   </td>
   </tr>
   <tr>
   <td>&lt;queue></td>
   <td>
    <p>
     This markup allows to configure how our callback queue looks like.
     Further the inner <b>&lt;callback></b> tag allows us to pass the address
     of our client side callback server. In the above example we use CORBA to receive
     callbacks.
    </p>
   </td>
   </tr>
   <tr>
   <td><a NAME="oneway"></a>oneway</td>
   <td>
    <p>
    Setting the <b>oneway</b> attribute to true forces all callback invocations to
    use the higher performing <tt>updateOneway()</tt> method call instead of the
    more reliable <tt>update()</tt>.
    We recommend to use the <b>updateOneway</b> setting from the subscribe QoS
    to configure this only for well chosen subscriptions (see requirement interface.subscribe).
    </p>
   </td>
   </tr>
   <tr>
   <td><a NAME="dispatcherActive"></a>dispatcherActive</td>
   <td>
    <p>
    Setting the <b>dispatcherActive</b> attribute to <i>false</i> inhibits all callback invocations.
    You can use this to avoid receiving messages directly after login.
    When all your client side initialization is done you need to manually activate
    the callback dispatcher with a administrative command, for example with
    telnet <pre> set client/receiver/1/?dispatcherActive=true</pre> or a command
    message <pre>__cmd:?client/receiver/1/?dispatcherActive=true</pre>
    This setting defaults to <i>true</i>.
    </p>
   </td>
   </tr>
   <tr>
   <td><a NAME="burstMode"></a>&lt;burstMode></td>
   <td>
    <p>
    The &lt;burstMode collectTime='0' maxEntries='-1' maxBytes='-1' /> settings in the
    callback section controls how xmlBlaster delivers the callback messages to its subscribers - or the PtP
    messages to the destination clients.<br />
    <b>collectTime</b> The default setting above does not wait on more messages after one has arrived (<tt>collectTime=0</tt>)
    and delivers it immediately. You can for example change this to wait some 20 milliseconds
    and then send those in a bulk for higher performance.<br />
    <b>maxEntries</b> When xmlBlaster checks the callback queue for a client it takes out
    all messages in the RAM queue with the highest priority and sends them in a bulk
    to the client. This guarantees good performance but may have drawbacks in some use cases.
    For example if the client is behind a slow dial up line and the callback queue contains
    60 messages with same priority and a size of 1MByte each the client has to wait
    until the complete 60MByte has arrived. If he switches off his PC after getting 59MByte
    the complete bulk is considered as not delivered by xmlBlaster and will be redilvered
    after the client logs in again. In such cases setting <tt>maxEntries=1</tt> is a good choice.<br />
    <b>maxBytes</b> The maximum bytes to collect for a bulk send. Usually
    you leave this on unlimited and play with maxEntries. At least one message
    will be delivered even if it is bigger than maxBytes.
    </p>
   </td>
   </tr>
   <tr>
   <td>persistence</td>
   <td>
    <p>
    Once you have made a session persistent (see engine.persistence.session) and you are reconnecting,
    the new connection will ignore the <i>persistent</i> flag. Once made persistent, the session
    will remain persistent.
    </p>
   </td>
   </tr>
   </table>
   </example>

   <example lang="XML" type="HTML">
      <p>
      Here is an example for the <b>return QoS of a connect invocation</b> which is returned
      from the server to the client on successful login.
      </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>

   &lt;securityService type="htpasswd" version="1.0">
     &lt;![CDATA[
     &lt;user>michele&lt;/user>
     &lt;passwd>secret&lt;/passwd>
     ]]&gt;
   &lt;/securityService>

   &lt;session name='joe/3'  
               timeout='3600000'
               maxSessions='10'
               clearSessions='false'
               sessionId='4e56890ghdFzj0'/>

   &lt;!-- Has the client reconnected to an existing session? -->
   &lt;reconnected>false&lt;/reconnected>

   &lt;queue relating='callback' maxEntries='1000' maxBytes='4000000'
                                                   onOverflow='deadMessage'>
      &lt;callback type='IOR' sessionId='4e56890ghdFzj0'>
         IOR:10000010033200000099000010....
         &lt;burstMode collectTime='400' />
      &lt;/callback>
   &lt;/queue>

&lt;/qos>
   </pre>
   </td></tr></table>
   <p>
    This is more or less a copy of the sent connect QoS but with some added information.
   </p>
   <p>
    Especially the secret <b>sessionId</b> is returned which has to be used for
    further requests (not for CORBA which handles this under the cover).
   </p>
   </example>

   <example lang="XmlRpc" type="HTML">
      <p>
      This is the XmlRpc server interface variant:
      </p>
      <pre>
public String connect(String qos_literal) throws XmlBlasterException
      </pre>
   </example>

   <example lang="RMI" type="HTML">
      <p>
      This is the RMI server interface variant:
      </p>
      <pre>
public String connect(String qos_literal)
                        throws RemoteException, XmlBlasterException
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code:
      </p>
      <pre>
import org.xmlBlaster.client.qos.ConnectQos;
import org.xmlBlaster.client.qos.ConnectReturnQos;
...

ConnectQos qos = new ConnectQos(glob, "william", "secretPwd");

ConnectReturnQos retQos = con.connect(qos, new I_Callback() {

   public String update(String cbSessionId, UpdateKey updateKey,
                        byte[] content, UpdateQos updateQos) {
      ...
      if (updateKey.isInternal()) {
         ...
      }

      if (updateQos.isOk()) {
         ...
      }
      else if (updateQos.isErased()) {
         ...
      }
      return "";
   }

});
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <h3><a NAME="dispatcherActiveExample"></a>Callback activation</h3>
      <p>
      This console example shows how to play with the callback activation setting,
      which allows to inhibit sending of queued callback messages during login:
      </p>
      <p><tt> java org.xmlBlaster.Main </tt></p>
      <p><tt> java javaclients.HelloWorldPublish -destination receiver/1  -numPublish 100 </tt></p>
      <p><tt> java javaclients.HelloWorldSubscribe -session.name receiver/1 -dispatch/callback/dispatcherActive false </tt></p>
      <p><tt> java javaclients.HelloWorldPublish -oid __cmd:client/receiver/1/?dispatcherActive=true </tt></p>
      <p>First start the server and a publisher which sends some PtP messages to the user <i>receiver/1</i>.<br />
      When <i>receiver/1</i> connects the PtP messages are not send
      (note <tt>-dispatch/callback/dispatcherActive false</tt>) until we finally
      send the administrative command <tt>__cmd:client/receiver/1/?dispatcherActive=true</tt>
      which activates the receivers callback delivery.
      </p>
   </example>

   <configuration>
   </configuration>

   <see type="REQ">interface</see>
   <see type="API">org.xmlBlaster.client.qos.ConnectQos</see>
   <see type="API">org.xmlBlaster.client.qos.ConnectReturnQos</see>
   <see type="API">org.xmlBlaster.protocol.xmlrpc.AuthenticateImpl</see>
   <see type="API">org.xmlBlaster.protocol.rmi.AuthServerImpl</see>
   <see type="INTERNET">http://www.xmlBlaster.org/xmlBlaster/demo/HelloWorld3.java.html</see>
   <see type="INTERNET">http://www.xmlBlaster.org/xmlBlaster/src/java/org/xmlBlaster/protocol/corba/xmlBlaster.idl.html</see>

   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 26</date>
   <revision>$Revision: 1.20 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>This uses the Disconnect but does not test it yet</comment>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestLogout</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestLogin</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestLoginLogoutEvent</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestSession</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestSessionCb</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestSessionReconnect</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestReconnectSameClientOnly</test>
      <test tool="SUITE">org.xmlBlaster.test.authentication.TestAuthenticationHtPassWd</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.ConnectQosTest</test>
   </testcase>
</requirement>

