<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='protocol.socket' type='NEW' prio='HIGH' status="CLOSED">
   <topic>XmlBlaster supports a bidirectional native communication protocol using exactly one socket connection</topic>
   <description>
      <p>
      RPC (remote procedure call) based frameworks like CORBA, RMI and XmlRpc require the client
      to set up a callback server for asynchronous callbacks. This causes problems if the client
      is behind a firewall or if the client may not establish a listen socket.
      Reusing a socket for callbacks solves this problem.
      </p>
      <h3>
      Protocol specification
      </h3>
   <p>
   Design decisions:
   </p>
   <ul>
     <li>Uses no bit settings to allow simple access with any programming language</li>
     <li>To avoid bigendian/littleendian problems no netlong etc. are used</li>
     <li>All numbers are delivered as strings.</li>
     <li>The fixed size header fields have even boundaries</li>
     <li>Compact format for good performance</li>
   </ul>
   <br />
   <p>
   This specifies the raw data format, '*' is used to symbolize null terminated strings:
   </p>
   <pre>
msgLen[10] flag[6] requestId methodName sessionId  lenUnzipped  userData  checkSum[10]
+---------+-------+------ -*----------*-----------*-----------*-----------+----------+
   </pre>
   <p>
   Description:
   </p>
   <table width="100%" border="1">
      <tr>
         <th>Field</th>
         <th>Description</th>
         <th>Size [bytes]</th>
      </tr>
      <tr>
         <td>msgLen</td>
         <td>The number of bytes of the message, including itself, the header, the data (and the checksum if appended)</td>
         <td>10</td>
      </tr>
      <tr>
         <td>flag</td>
         <td>The flag defaults to zero (all bits are '\0', only version is set to one '1'=49 and 'I'=73 for invoke), possible settings of each byte are:
            <ol>
               <li>65 (typically 'A') Adler32 checksum is appended (see java.util.zip) [Currently not supported]</li>
               <li>90 (typically 'Z') The userData is compressed with gzip (see java.uti.zip) [Currently not supported]</li>
               <li>Type of message<ul><li>73 (typically 'I') for invoke request</li><li>82 (typically 'R') for return value</li><li>69 (typically 'E') for exception</li></ul></li>
               <li>null ('\0'), Reserved</li>
               <li>null ('\0'), Reserved</li>
               <li>49 (typically '1') Version byte for this protocol</li>
            </ol>
         </td>
         <td>6</td>
      </tr>
      <tr>
         <td>requestId</td>
         <td>A identifier of this request (unique in client scope), the return message will contain this ID</td>
         <td>null terminated</td>
      </tr>
      <tr>
         <td>methodName</td>
         <td>The method to invoke, like "publish", "subscribe", "update"</td>
         <td>null terminated</td>
      </tr>
      <tr>
         <td>sessionId</td>
         <td>The secret session ID for authentication</td>
         <td>null terminated</td>
      </tr>
      <tr>
         <td>lenUnzipped</td>
         <td>The length of the uncompressed user data, allows for example in C to simple allocate enough memory.
         This field has only a value if the flag is set to 'Z' (compressed), otherwise it is just the terminating '\0'.</td>
         <td>null terminated</td>
      </tr>
      <tr>
         <td>userData</td>
         <td>The arguments of the invoked message (see below)</td>
         <td>any (0 is allowed as well)</td>
      </tr>
      <tr>
         <td>checkSum</td>
         <td>An optional checksum if the flag field is set</td>
         <td>10</td>
      </tr>
   </table>
   <br />
   <p>
   The userData has the following typical layout.
   </p>
   <pre>
     qos      key    len   content
   +-----*---------*-----*----------+
   </pre>
   <p>
   len is the length of the content (written as a string with a terminating 0).<br />
   This may be repeated multiple times if an array of MsgUnits is sent.<br />
   If for example only a qos is transmitted,
   the key may optionally consist only of the terminating null byte
   and the content len is set to 0 with a terminating null byte.
   </p>
   <p>
   The following table lists all allowed methods, with their arguments, return values and exceptions.<br />
   Note that all data types are of type string and are terminated with a '\0'.<br />
   Only the content is of type 'binary' which length can be calculated by the
   len field. Binary data is not zero terminated.
   </p>
   <table width="100%" border="1">
      <tr>
         <th>Method</th>
         <th>Arguments</th>
         <th>Return value</th>
         <th>Exception</th>
         <th>Comment</th>
      </tr>
      <tr>
         <td>connect</td>
         <td>QoS{string}</td>
         <td>QoS{string}</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>The sessionId field is an empty string (just the '\0')</td>
      </tr>
      <tr>
         <td>disconnect</td>
         <td>QoS{string}</td>
         <td>-</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>The socket is closed during logout by the server, no response is send</td>
      </tr>
      <tr>
         <td>ping</td>
         <td>QoS{string}</td>
         <td>QoS{string}</td>
         <td><img src="no.gif" border="0" alt="no" /></td>
         <td>The QoS can be an empty string ""</td>
      </tr>
      <tr>
         <td>{exception}</td>
         <td>errorCode{string}, message{string}, byteDump of exception</td>
         <td>-</td>
         <td><img src="no.gif" border="0" alt="no" /></td>
         <td>Exception return messages are named similar to the invoked method but are marked with an 'E' flag.<br />
         See XmlBlasterException.java:toByteArr() for the syntax of the binary message content.
         </td>
      </tr>
      <tr>
         <td>update</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>[QoS{string}]*</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>This is a callback message to the client, the message unit (QoS, key, content) may be specified multiple times. 
             Every message unit has a corresponding return QoS.
         </td>
      </tr>
      <tr>
         <td>updateOneway</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>-</td>
         <td><img src="no.gif" border="0" alt="no" /></td>
         <td>This is a callback message to the client, the message unit (QoS, key, content) may be specified multiple times. 
             There is no return value and no exception which can be thrown for maximum performance.
         </td>
      </tr>
      <tr>
         <td>publish</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>[QoS{string}]*</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>The message unit [QoS, key, content] may be specified multiple times.
             Every message unit has a corresponding return QoS.
             This publish covers the CORBA publish() and the CORBA publishArr().
         </td>
      </tr>
      <tr>
         <td>publishOneway</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>-</td>
         <td><img src="no.gif" border="0" alt="no" /></td>
         <td>The message unit [QoS, key, content] may be specified multiple times.
             There is no return value and no exception which can be thrown for maximum performance.
         </td>
      </tr>
      <tr>
         <td>get</td>
         <td>QoS{string}, key{string}</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>The returned QoS, key, content may be zero to multiple items</td>
      </tr>
      <tr>
         <td>subscribe</td>
         <td>QoS{string}, key{string}</td>
         <td>QoS string</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>subscribe for messages</td>
      </tr>
      <tr>
         <td>unSubscribe</td>
         <td>QoS{string}, key{string}</td>
         <td>[QoS{string}]*</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>cancel subscriptions</td>
      </tr>
      <tr>
         <td>erase</td>
         <td>QoS{string}, key{string}</td>
         <td>[QoS{string}]*</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>erase messages</td>
      </tr>
   </table>
   </description>
   <example lang="Java">
      <![CDATA[
      
Example of a publish() invocation with qos/key/content

   "        83**I**17711*publish*oxf6hZs**<qos></qos>*<key oid='hello'/>*11*Hello world"

Example of a get() invocation with qos/key

   "        70**I**17711*get*oxf6hZs**<qos></qos>*<key oid='ooo'></key>*0*"

Example of a publish() return with qos

   "        48**R**17711*publish*oxf6hZs**<qos/>**0*"

Example of an empty get()

   "        34**I**17711*get*oxf6hZs**"

Example of a ping() (with an empty qos):

   "        25**I**11*ping***"

Example of an XmlBlasterException as a response on a publish() (a content is not shown):

   "        84**E**17711*publish*oxf6hZs**QueueOverflow*The destination queue is full*0*"

Example of a qos/key/content return value of a get()

   "        81**R**17711*get***<qos></qos>*<key oid='hello'/>*20*Hello world response"

Example of a QoS return value of erase()

   "        60**R**17711*erase***<qos><state id='OK'/></qos>**0*"

Example of publish() with two qos/key/content (split to two lines)

   "       100**I**17711*publish*oxf6hZs**<qos/>*<key oid='x1'/>*6*Hello1<qos/>
    *<key oid='x2'/>*6*Hello2"


The '*' is used as a symbol for a '\0' character (all zero bits) which terminates strings.

The content of a message, here for example 'Hello world' is binary data and has no '\0',
it is determined by len.

The '"' is just to show the boundary, '"' is not part of the message.
      ]]>
   </example>

   <example lang="Java" type="HTML">
      <p>
      You can switch on nice debugging output with these options:
      </p>
      <pre>
java -jar lib/xmlBlaster.jar -dump[socket] true -trace[socket] true
      </pre>
      <br />
      <p>
      Here we start the xmlBlaster server and it will offer its SOCKET service on host <i>myHost.com</i> and on port <i>7766</i>:
      </p>
      <pre>
java -jar lib/xmlBlaster.jar -dispatch/clientSide/protocol/socket/hostname myHost.com
                             -dispatch/clientSide/protocol/socket/port 7766
      </pre>
      <p>
      This client tries to find an xmlBlaster server instance at host <i>myHost.com</i> and on port <i>7766</i>:
      </p>
      <pre>
java HelloWorld3 -protocol SOCKET -dispatch/clientSide/protocol/socket/hostname myHost.com
                                  -dispatch/clientSide/protocol/socket/port 7766
      </pre>

      <br />
      <p>
      Here we do the same hard coded in Java:
      </p>
      <pre>
...

String[] args = { "-protocol", "SOCKET",
                "-dispatch/clientSide/protocol/socket/hostname", "myHost.com",
                "-dispatch/clientSide/protocol/socket/port", "7766",
                "-dispatch/clientSide/protocol/socket/localHostname", "myHost.com",
                "-dispatch/clientSide/protocol/socket/localPort", "8888" };
glob.init(args);

ConnectQos qos = new ConnectQos(glob);

...
      </pre>
      <p>
      The raw address transferred in the QoS markup is of the form
      <i>socket://host:port</i>, for example <i>socket://127.168.1.2:7607</i>.
      <p>
   </example>

   <configuration where="server">
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

         <tr>
            <td>protocol/socket/hostname</td>
            <td>localhost</td>
            <td>Specify a hostname where the SOCKET server runs
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>protocol/socket/port</td>
            <td>7607</td>
            <td>The SOCKET server port
                </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>protocol/socket/localHostname</td>
            <td>localhost</td>
            <td>The local address the socket is bound to. 
            Usually this is dynamically choosen by your operating system and you don't need
            to specify it.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>protocol/socket/localPort</td>
            <td>8900</td>
            <td>The local port the socket is bound to.
                Default is -1 and the operating system chooses an arbitrary port.
                </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>protocol/socket/responseTimeout</td>
            <td>60000 (one minute)</td>
            <td>When a method is invoked we wait the given time on a response.<br />
            The response is the return value or an exception for method invocations which
            are not marked oneway.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>protocol/socket/SoTimeout</td>
            <td>0</td>
            <td>How long we max. block on InputStream.read(). Please leave this value
                0, as we should block on input stream indefinitely to receive a new message.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>protocol/socket/SoLingerTimeout</td>
            <td>60000 (one minute)</td>
            <td>If the socket is closed, how long shall we try to deliver unsent data from the socket stack.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>protocol/socket/backlog</td>
            <td>50</td>
            <td>Socket queue size for incoming connection request
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>protocol/socket/threadPrio</td>
            <td>NORM_PRIORITY = 5</td>
            <td>The priority 1=min - 10=max of the listener thread
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>dump[socket]</td>
            <td>false</td>
            <td>true switches message dump on
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>
   </configuration>
   <configuration where="client">
      <p>The Java socket implementation on client side supports
         the same properties as the server (we reuse the same implementation).
         You need to add the "dispatch/callback/" or "dispatch/clientSide/" prefix
         to the property key.<br />
         You have thes additional features on client side:
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

         <tr>
            <td>dispatch/callback/protocol/socket/multiThreaded</td>
            <td>true</td>
            <td>
            <ul>
              <li>true: Incoming callback requests (the update() method) are dispatched to one thread per request.<br />
               This avoids deadlocks if you call recursively the server - calling for example in the
               update() thread a publish() or subscribe() would otherwise deadlock (publishOneway() is OK).<br />
               Note that oneway message updates (method updateOneway()) are not guaranteed to be in sequence, since one thread on
               client side may overtake another one.<br />
               The update() variant with return value is still guaranteed to keep the sequence
               since xmlBlaster on server side uses exactly one thread per client to callback.
              </li>
              <li>false: There is only one thread for callbacks on client side, this guarantees that even your updateOneway() method
              receives the messages in strict order.<br />
              On the other hand you can't call any non-oneway xmlBlaster method in the update() body since this would deadlock.
              </li>
            </ul>
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>dispatch/callback/protocol/socket/invokerThreadPrio</td>
            <td>NORM_PRIORITY = 5</td>
            <td>
              The priority of the client side callback thread which calls your update method.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>dispatch/callback/protocol/socket/threadPrio</td>
            <td>NORM_PRIORITY = 5</td>
            <td>The priority 1=min - 10=max of the client side callback server listener thread
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

      </table>
   </configuration>
   <todo type="HTML">
   <ol>
      <li>
      Currently the server has implemented a one thread/client approach.
      This doesn't scale very well with thousands of clients -
      probably we should support one thread/request with a thread pool as well.
      </li>
      <li>
      Different encodings on client and server side could be a problem, test with 
      java -Dfile.encoding=ISO8859_1 ... or System.setProperty("file.encoding","Cp850");
      </li>
   </ol>
   </todo>
   <see type="REQ">protocol</see>
   <see type="API">org.xmlBlaster.protocol.socket.Parser</see>
   <see type="API">org.xmlBlaster.protocol.socket.SocketDriver</see>
   <see type="API">org.xmlBlaster.protocol.socket.SocketUrl</see>
   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 02 12</date>
   <revision>$Revision: 1.31 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.</test>
   </testcase>
</requirement>

