<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='protocol.socket' type='NEW' prio='HIGH' status="CLOSED">
   <topic>XmlBlaster supports a bidirectional native communication protocol using exactly one socket connection</topic>
   <description>
      <p>
      RPC (remote procedure call) based frameworks like CORBA, RMI and XmlRpc require the client
      to set up a callback server for asynchronous callbacks. This causes problems if the client
      is behind a firewall or if the client may not establish a listen socket.
      Reusing a socket for callbacks solves this problem.
      </p>
      <h3>
      Protocol specification
      </h3>
   <p>
   Design decisions:
   </p>
   <ul>
     <li>Uses no bit settings to allow simple access with any programming language</li>
     <li>To avoid bigendian/littleendian problems no netlong etc. are used</li>
     <li>All numbers are delivered as strings.</li>
     <li>The fixed size header fields have even boundaries</li>
     <li>Compact format for good performance</li>
   </ul>
   <br />
   <p>
   This specifies the raw data format, '*' is used to symbolize null terminated strings:
   </p>
   <pre>
    msgLen[10] flag[6] requestId methodName sessionId  lenUnzipped  userData  checkSum[10]
    +---------+-------+------ -*----------*-----------*-----------*-----------+----------+
   </pre>
   <p>
   Description:
   </p>
   <table width="100%">
      <tr>
         <td>Field</td>
         <td>Description</td>
         <td>Size [bytes]</td>
      </tr>
      <tr>
         <td>msgLen</td>
         <td>The number of bytes of the message, including itself, the header, the data (and the checksum if appended)</td>
         <td>10</td>
      </tr>
      <tr>
         <td>flag</td>
         <td>The flag defaults to zero (all bits are '\0', only version is set to one '1'=49 and 'I'=73 for invoke), possible settings of each byte are:
            <ol>
               <li>65 (typically 'A') Adler32 checksum is appended (see java.util.zip) [Currently not supported]</li>
               <li>90 (typically 'Z') The userData is compressed with gzip (see java.uti.zip) [Currently not supported]</li>
               <li>Type of message<ul><li>73 (typically 'I') for invoke request</li><li>82 (typically 'R') for return value</li><li>69 (typically 'E') for exception</li></ul></li>
               <li>null ('\0'), Reserved</li>
               <li>null ('\0'), Reserved</li>
               <li>49 (typically '1') Version byte for this protocol</li>
            </ol>
         </td>
         <td>6</td>
      </tr>
      <tr>
         <td>requestId</td>
         <td>A identifier of this request (unique in client scope), the return message will contain this ID</td>
         <td>null terminated</td>
      </tr>
      <tr>
         <td>methodName</td>
         <td>The method to invoke, like "publish", "subscribe", "update"</td>
         <td>null terminated</td>
      </tr>
      <tr>
         <td>lenUnzipped</td>
         <td>The length of the uncompressed user data, allows for example in C to simple allocate enough memory. This field is only appended if the flag is set to 'Z' (compressed).</td>
         <td>null terminated</td>
      </tr>
      <tr>
         <td>userData</td>
         <td>The arguments of the invoked message (see below)</td>
         <td>any</td>
      </tr>
      <tr>
         <td>checkSum</td>
         <td>An optional checksum if the flag field is set</td>
         <td>10</td>
      </tr>
   </table>
   <br />
   <p>
   The userData has the following typical layout.
   </p>
   <pre>
     qos      key    len   content
   +-----*---------*-----*----------+
   </pre>
   <p>
   len is the length of the content.<br />
   This may be repeated multiple times if an array of MessageUnits is sent.<br />
   If for example only a qos is transmitted,
   the key consists only of the terminating null byte
   and the content len is set to 0 with a terminating null byte.
   </p>
   <p>
   The following table lists all allowed methods, with their arguments, return values and exceptions.<br />
   Note that all data types are of type string and are terminated with a '\0'.<br />
   Only the content is of type 'binary' which length can be calculated by the
   len field. Binary data is not zero terminated.
   </p>
   <table width="100%">
      <tr>
         <td>Method</td>
         <td>Arguments</td>
         <td>Return value</td>
         <td>Exception</td>
         <td>Comment</td>
      </tr>
      <tr>
         <td>connect</td>
         <td>QoS{string}</td>
         <td>QoS{string}</td>
         <td>yes</td>
         <td>The sessionId field is an empty string (just the '\0')</td>
      </tr>
      <tr>
         <td>disconnect</td>
         <td>QoS{string}</td>
         <td>-</td>
         <td>yes</td>
         <td>The socket is closed during logout by the server, no response is send</td>
      </tr>
      <tr>
         <td>ping</td>
         <td>QoS{string}</td>
         <td>QoS{string}</td>
         <td>no</td>
         <td>The QoS can be an empty string ""</td>
      </tr>
      <tr>
         <td>{exception}</td>
         <td>id{string}, reason{string}</td>
         <td>-</td>
         <td>no</td>
         <td>Exception return messages are named similar to the invoked method but are marked with an 'E' flag</td>
      </tr>
      <tr>
         <td>update</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>[QoS{string}]*</td>
         <td>yes</td>
         <td>This is a callback message to the client, the message unit (QoS, key, content) may be specified multiple times. 
             Every message unit has a corresponding return QoS.
         </td>
      </tr>
      <tr>
         <td>updateOneway</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>-</td>
         <td>no</td>
         <td>This is a callback message to the client, the message unit (QoS, key, content) may be specified multiple times. 
             There is no return value and no exception which can be thrown for maximum performance.
         </td>
      </tr>
      <tr>
         <td>publish</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>[QoS{string}]*</td>
         <td>yes</td>
         <td>The message unit [QoS, key, content] may be specified multiple times.
             Every message unit has a corresponding return QoS.
             This publish covers the CORBA publish() and the CORBA publishArr().
         </td>
      </tr>
      <tr>
         <td>publishOneway</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>-</td>
         <td>no</td>
         <td>The message unit [QoS, key, content] may be specified multiple times.
             There is no return value and no exception which can be thrown for maximum performance.
         </td>
      </tr>
      <tr>
         <td>get</td>
         <td>QoS{string}, key{string}</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>yes</td>
         <td>The returned QoS, key, content may be multiple items</td>
      </tr>
      <tr>
         <td>subscribe</td>
         <td>QoS{string}, key{string}</td>
         <td>QoS string</td>
         <td>yes</td>
         <td></td>
      </tr>
      <tr>
         <td>unSubscribe</td>
         <td>QoS{string}, key{string}</td>
         <td>QoS string</td>
         <td>yes</td>
         <td>cancel a subscription</td>
      </tr>
      <tr>
         <td>erase</td>
         <td>QoS{string}, key{string}</td>
         <td>[QoS{string}]*</td>
         <td>yes</td>
         <td></td>
      </tr>
   </table>
   </description>
   <example lang="Java">
      <![CDATA[
      
Example of a publish() invocation with qos/key/content

   "        83**I**17711*publish*oxf6hZs**<qos></qos>*<key oid='hello'/>*11*Hello world"

Example of a get() invocation with qos/key

   "        70**I**17711*get*oxf6hZs**<qos></qos>*<key oid='ooo'></key>*0*"

Example of a publish() return with qos

   "        48**R**17711*publish*oxf6hZs**<qos/>**0*"

Example of an empty get()

   "        38**I**17711*get*oxf6hZs****0*"

Example of a ping():

   "        29**I**11*ping*****0*"

Example of an XmlBlasterException as a response on a publish()

   "        84**E**17711*publish*oxf6hZs**QueueOverflow*The destination queue is full*0*"

Example of a qos/key/content return value of a get()

   "        81**R**17711*get***<qos></qos>*<key oid='hello'/>*20*Hello world response"

Example of a QoS return value of erase()

   "        61**R**17711*erase***<qos><state>OK</state></qos>**0*"

Example of publish() with two qos/key/content

   "       100**I**17711*publish*oxf6hZs**<qos/>*<key oid='x1'/>*6*Hello1<qos/>*<key oid='x2'/>*6*Hello2"


The '*' is used as a symbol for a '\0' character (all zero bits) which terminates strings.

The content of a message, here for example 'Hello world' is binary data and has no '\0',
it is determined by len.

The '"' is just to show the boundary, '"' is not part of the message.
      ]]>
   </example>
   <todo>
   <ol>
      <li>
      Currently the server has implemented a one thread/client approach.
      This doesn't scale very well with thousands of clients -
      probably we should support one thread/request with a thread pool as well.
      </li>
      <li>
      Different encodings on client and server side could be a problem, test with 
      java -Dfile.encoding=ISO8859_1 ... or System.setProperty("file.encoding","Cp850");
      </li>
   </ol>
   </todo>
   <see type="REQ">protocol</see>
   <see type="API">org.xmlBlaster.protocol.socket.Parser</see>
   <see type="API">org.xmlBlaster.protocol.socket.SocketDriver</see>
   <author>ruff@swand.lake.de</author>
   <date>2002 02 12</date>
   <revision>$Revision: 1.13 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.</test>
   </testcase>
</requirement>

