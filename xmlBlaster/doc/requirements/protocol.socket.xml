<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='protocol.socket' type='NEW' prio='HIGH' status="CLOSED">
   <topic>XmlBlaster supports a bidirectional native communication protocol using exactly one socket connection</topic>
   <description>
      <p>
      RPC (remote procedure call) based frameworks like CORBA, RMI and XmlRpc require the client
      to set up a callback server for asynchronous callbacks. This causes problems if the client
      is behind a firewall or if the client may not establish a listen socket.
      Reusing a socket for callbacks solves this problem.
      </p>
      <p>
      Further this protocol can be used for simple access from other programming languages like <i>C</i>.
      </p>
      <h2>
      Protocol specification
      </h2>
   <p>
   Design decisions:
   </p>
   <ul>
     <li>Uses no bit settings to allow simple access with any programming language</li>
     <li>To avoid bigendian/littleendian problems no netlong etc. are used</li>
     <li>All numbers are delivered as strings.</li>
     <li>The fixed size header fields have even boundaries</li>
     <li>Compact format for good performance</li>
   </ul>
   <br />
   <p>
   This specifies the raw data format, '*' is used to symbolize null terminated strings:
   </p>
   <pre>
msgLen[10] flag[6] requestId methodName secretSessionId lenUnzipped userData checkSum[10]
+---------+-------+------ -*----------*----------------*-----------*--------+-----------+
   </pre>
   <p>
   Description:
   </p>
   <table width="100%" border="1">
      <tr>
         <th>Field</th>
         <th>Description</th>
         <th>Size [bytes]</th>
      </tr>
      <tr>
         <td>msgLen</td>
         <td>The number of bytes of the message, including itself, the header, the data (and the checksum if appended)</td>
         <td>10</td>
      </tr>
      <tr>
         <td>flag</td>
         <td>The flag defaults to zero (all bits are '\0', only version is set to one '1'=49 and 'I'=73 for invoke), possible settings of each byte are:
            <ol>
               <li>65 (typically 'A') Adler32 checksum is appended (see java.util.zip) [Currently not supported]</li>
               <li>90 (typically 'Z') The userData is compressed with gzip (see java.uti.zip) [Currently not supported]</li>
               <li>Type of message<ul><li>73 (typically 'I') for invoke request</li><li>82 (typically 'R') for return value</li><li>69 (typically 'E') for exception</li></ul></li>
               <li>null ('\0'), Reserved</li>
               <li>null ('\0'), Reserved</li>
               <li>49 (typically '1') Version byte for this protocol</li>
            </ol>
         </td>
         <td>6</td>
      </tr>
      <tr>
         <td>requestId</td>
         <td>An identifier of this request (unique in client scope), the return message will contain this ID.
            The server bounces this requestId back, it does not use it. This is useful
            for the client to find out which response belongs to which request.<br />
	    For callback calls like <tt>update()</tt> or <tt>ping()</tt> the client must return this
	    id so xmlBlaster knows to which invocation the response belongs.</td>
         <td>null terminated</td>
      </tr>
      <tr>
         <td>methodName</td>
         <td>The method to invoke, like "publish", "subscribe", "update"</td>
         <td>null terminated</td>
      </tr>
      <tr>
         <td>secretSessionId</td>
         <td>The secret session ID for authentication, it is empty on first connect
         and generated by xmlBlaster for the connect return QoS. All other requests
         then use this secret session ID</td>
         <td>null terminated</td>
      </tr>
      <tr>
         <td>lenUnzipped</td>
         <td>The length of the uncompressed user data, allows for example in C to simple allocate enough memory.
         This field has only a value if the flag is set to 'Z' (compressed), otherwise it is just the terminating '\0'.</td>
         <td>null terminated</td>
      </tr>
      <tr>
         <td>userData</td>
         <td>The arguments of the invoked message (see below)</td>
         <td>any (0 is allowed as well)</td>
      </tr>
      <tr>
         <td>checkSum</td>
         <td>An optional checksum if the flag field is set</td>
         <td>10</td>
      </tr>
   </table>
   <br />
   <p>
   The userData has the following typical layout.
   </p>
   <pre>
     qos      key    len   content
   +-----*---------*-----*----------+
   </pre>
   <p>
   len (written as a string with a terminating 0) is the length of the content.<br />
   This may be repeated multiple times if an array of MsgUnits is sent.<br />
   If for example only a qos is transmitted,
   the key may optionally consist only of the terminating null byte
   and the content len is set to 0 with a terminating null byte.
   </p>
   <p>
   The following table lists all allowed methods, with their arguments, return values and exceptions.<br />
   Note that all data types are of type string and are terminated with a '\0'.<br />
   Only the content is of type 'binary' which length can be calculated by the
   len field. Binary data is not zero terminated.
   </p>
   <table width="100%" border="1">
      <tr>
         <th>Method</th>
         <th>Arguments</th>
         <th>Return value</th>
         <th>Excep<br />tion</th>
         <th>Comment</th>
      </tr>
      <tr>
         <td>connect</td>
         <td>QoS{string}</td>
         <td>QoS{string}</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>The secretSessionId field is an empty string (just the '\0'), the server
             generates and returns it.</td>
      </tr>
      <tr>
         <td>disconnect</td>
         <td>QoS{string}</td>
         <td>QoS{string}</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>The server sends the response (ACK) immediately from the SOCKET layer.
	     It can't send it later because the socket is shutdown during server side disconnect</td>
      </tr>
      <tr>
         <td>ping</td>
         <td>QoS{string}</td>
         <td>QoS{string}</td>
         <td><img src="no.gif" border="0" alt="no" /></td>
         <td>The QoS can be an empty string ""</td>
      </tr>
      <tr>
         <td>{exception}</td>
         <td>errorCode{string}, message{string}, byteDump of exception</td>
         <td>-</td>
         <td><img src="no.gif" border="0" alt="no" /></td>
         <td>Exception return messages are named similar to the invoked method but are marked with an 'E' flag.<br />
         See XmlBlasterException.java toByteArr() for the syntax of the binary message content.
         </td>
      </tr>
      <tr>
         <td>update</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>[QoS{string}]*</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>This is a callback message to the client, the message unit (QoS, key, content) may be specified multiple times. 
             Every message unit has a corresponding return QoS.
         </td>
      </tr>
      <tr>
         <td>updateOneway</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>-</td>
         <td><img src="no.gif" border="0" alt="no" /></td>
         <td>This is a callback message to the client, the message unit (QoS, key, content) may be specified multiple times. 
             There is no return value and no exception which can be thrown for maximum performance.<br />
             This call can be configured to use UDP instead of TCP, note however that UDP has a limited datagram size.
         </td>
      </tr>
      <tr>
         <td>publish</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>[QoS{string}]*</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>The message unit [QoS, key, content] may be specified multiple times.
             Every message unit has a corresponding return QoS.
             This publish covers the CORBA publish() and the CORBA publishArr().
         </td>
      </tr>
      <tr>
         <td>publishOneway</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>-</td>
         <td><img src="no.gif" border="0" alt="no" /></td>
         <td>The message unit [QoS, key, content] may be specified multiple times.
             There is no return value and no exception which can be thrown for maximum performance.<br />
             This call can be configured to use UDP instead of TCP, note however that UDP has a limited datagram size.
         </td>
      </tr>
      <tr>
         <td>get</td>
         <td>QoS{string}, key{string}</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>The returned QoS, key, content may be zero to multiple items</td>
      </tr>
      <tr>
         <td>subscribe</td>
         <td>QoS{string}, key{string}</td>
         <td>QoS string</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>subscribe for messages</td>
      </tr>
      <tr>
         <td>unSubscribe</td>
         <td>QoS{string}, key{string}</td>
         <td>[QoS{string}]*</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>cancel subscriptions</td>
      </tr>
      <tr>
         <td>erase</td>
         <td>QoS{string}, key{string}</td>
         <td>[QoS{string}]*</td>
         <td><img src="ok.gif" border="0" alt="yes" /></td>
         <td>erase messages</td>
      </tr>
   </table>
   <br />
      <h2>NOTE:</h2>
      <p>
      The raw SOCKET address transferred in the connect QoS markup is of the form
      </p>
      <pre>
socket://host:port
      </pre>
      <p>
      for example:
      <pre>
socket://127.168.1.2:7607
      </pre>
      </p>
   </description>
   <example lang="any">
      <![CDATA[
      
Example of a publish() invocation with qos/key/content

   "        83**I**17711*publish*oxf6hZs**<qos></qos>*<key oid='hello'/>*11*Hello world"

Example of a get() invocation with qos/key

   "        70**I**17711*get*oxf6hZs**<qos></qos>*<key oid='ooo'></key>*0*"

Example of a publish() return with qos

   "        48**R**17711*publish*oxf6hZs**<qos/>**0*"

Example of an empty get()

   "        34**I**17711*get*oxf6hZs**"

Example of a ping() (with an empty qos):

   "        25**I**11*ping***"

Example of an XmlBlasterException as a response on a publish() (a content is not shown):

   "        84**E**17711*publish*oxf6hZs**QueueOverflow*The destination queue is full*0*"

Example of a qos/key/content return value of a get()

   "        81**R**17711*get***<qos></qos>*<key oid='hello'/>*20*Hello world response"

Example of a QoS return value of erase()

   "        60**R**17711*erase***<qos><state id='OK'/></qos>**0*"

Example of publish() with two qos/key/content (split to two lines)

   "       100**I**17711*publish*oxf6hZs**<qos/>*<key oid='x1'/>*6*Hello1<qos/>
    *<key oid='x2'/>*6*Hello2"


The '*' is used as a symbol for a '\0' character (all zero bits) which terminates strings.

The content of a message, here for example 'Hello world' is binary data and has no '\0',
it is determined by len.

The '"' is just to show the boundary, '"' is not part of the message.
      ]]>
   </example>

   <example lang="Java" type="HTML">
      <h2>
      Java command line examples
      </h2>
      <p>
      You can switch on nice debugging output with these options:
      </p>
      <pre>
java -jar lib/xmlBlaster.jar -dump[socket] true -trace[socket] true
      </pre>
      <br />
      <p>
      Here we start the xmlBlaster server and it will offer its SOCKET service on host <i>myHost.com</i> and on port <i>7766</i>:
      </p>
      <pre>
java -jar lib/xmlBlaster.jar -plugin/socket/hostname myHost.com
                             -plugin/socket/port 7766
      </pre>
      <p>
      This client tries to find an xmlBlaster server instance at host <i>myHost.com</i> and on port <i>7766</i>:
      </p>
      <pre>
java HelloWorld3 -protocol SOCKET -dispatch/connection/plugin/socket/hostname myHost.com
                                  -dispatch/connection/plugin/socket/port 7766
      </pre>

      <br />
      <p>
      Here we do the same hard coded in Java:
      </p>
      <pre>
...

String[] args = { "-protocol", "SOCKET",
                "-dispatch/connection/plugin/socket/hostname", "myHost.com",
                "-dispatch/connection/plugin/socket/port", "7766",
                "-dispatch/connection/plugin/socket/localHostname", "myHost.com",
                "-dispatch/connection/plugin/socket/localPort", "8888" };
glob.init(args);

ConnectQos qos = new ConnectQos(glob);

...
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <h2 id="SSL1">
      Using SSL communication
      </h2>
      <p>
      To establish a SSL connection you need to set some configuration properties on command line
      or in xmlBlaster.properties.
      This works out of the box for JDK 1.4 and above. For JDK 1.3 you need
      to install the SSL support separately.
      SSL is available with IBM JDK 1.4 as well, using for example a client running with SUN JDK 1.4 or 1.5
      to communicate with a xmlBlaster server running with IBM JDK 1.4
      (even if compiled with SUN JDK 1.3) works fine.
      </p>
      <p>
      The first step is to generate a certificate with the <tt>keytool</tt> program that comes with the SDK.
      Issue the keytool command with the -genkey option to generate a keypair, the -keystore option
      to specify the key store file, and the -keyalg options to specify the encryption algorithm, read
      the <a href="http://java.sun.com/developer/JDCTechTips/2004/tt0914.html#2" target="others">SSL tutorial</a> and the
      <a href="http://java.sun.com/j2se/1.4.2/docs/guide/security/jsse/JSSERefGuide.html" target="SSL">SSL reference guide</a>
      for more details:
      </p>
      <pre>
keytool -genkey -keystore testStore -keyalg RSA
      </pre>
      <p>
      Now you are ready to start the xmlBlaster server with enabled SSL (all in one line):
      </p>
      <pre>
java -jar lib/xmlBlaster.jar -plugin/socket/SSL true -plugin/socket/keystore testStore
                                                     -plugin/socket/keystorepass testtest
      </pre>
      <p>
      and finally we start a client to test it:
      </p>
      <pre>
java HelloWorld3 -protocol SOCKET -plugin/socket/SSL true -plugin/socket/keystore testStore
      </pre>
      <p>
      To check the encryption dump the TCP/IP packages for example with tcpdump:
      </p>
      <pre>
tcpdump -i lo -A -vvv dst port 7607
      </pre>
      <p>
      If you encounter problems you can switch on SSL debugging with
      </p>
      <pre>
java -Djavax.net.debug=all ...
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <h2 id="SSL">
      Configuring SSL <b>and</b> normal SOCKET communication
      </h2>
      <p>
      If you want to establish a SSL SOCKET server besides a plain text SOCKET server
      you need to register two SOCKET protocol drivers each listening on a different port.
      Here is an example of such entries in <tt>xmlBlasterPlugins.xml</tt>:
      </p>
      <pre>
&lt;plugin id='SOCKET' className='org.xmlBlaster.protocol.socket.SocketDriver'>
   &lt;action do='LOAD' onStartupRunlevel='3' sequence='2' 
           onFail='resource.configuration.pluginFailed'/>
   &lt;action do='STOP' onShutdownRunlevel='2' sequence='5'/>   
&lt;/plugin>

&lt;plugin id='socket_ssl' className='org.xmlBlaster.protocol.socket.SocketDriver'>
   &lt;action do='LOAD' onStartupRunlevel='3' sequence='2' 
           onFail='resource.configuration.pluginFailed'/>
   &lt;action do='STOP' onShutdownRunlevel='2' sequence='5'/>   
   &lt;attribute id='SSL'>true&lt;/attribute>
   &lt;attribute id='keystore'>testStore&lt;/attribute>
   &lt;attribute id='keystorepass'>testtest&lt;/attribute>
   &lt;attribute id='port'>7609&lt;/attribute>
   &lt;attribute id='startUdpListener'>false&lt;/attribute>
&lt;/plugin>
      </pre>
      <p>
      Now the plain SOCKET is listening on default port 7607 and the SSL SOCKET
      listens on port 7609.
      <br />
      Additionally we register the client side <i>socket_ssl</i> plugins in <tt>xmlBlaster.properties</tt>:
      </p>
      <pre>
ClientProtocolPlugin[socket_ssl][1.0]=org.xmlBlaster.client.protocol.socket.SocketConnection

ClientCbServerProtocolPlugin[socket_ssl][1.0]=\
       org.xmlBlaster.client.protocol.socket.SocketCallbackImpl
      </pre>
      <p>
      Starting the server is simple as all configuration is done in the above
      <tt>xmlBlasterPlugins.xml</tt> file (please read the previous example on
      how to initially generate a keystore):
      </p>
      <pre>
java -jar lib/xmlBlaster.jar
      </pre>
      <p>
      Here we start a client using the default plain text SOCKET connection:
      </p>
      <pre>
java HelloWorld3 -protocol SOCKET
      </pre>
      <p>
      Here we start a client using the secure SSL SOCKET connection:
      </p>
      <pre>
java HelloWorld3 -protocol socket_ssl -plugin/socket_ssl/port 7609 -plugin/socket_ssl/SSL true
                 -plugin/socket_ssl/keystore testStore
      </pre>
      <p>
      The xmlBlaster.properties entries 'socket_ssl' are in fact optional, this would work as well:
      <i>java HelloWorld3 -protocol SOCKET -plugin/socket/port 7609 -plugin/socket/SSL true -plugin/socket/keystore testStore</i>
      </p>
   </example>

   <configuration where="server">
      <h2>Server side configuration</h2>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>plugin/socket/hostname</td>
            <td>localhost</td>
            <td>Specify a hostname where the SOCKET server runs
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/port</td>
            <td>7607</td>
            <td>The SOCKET server port
                </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/localHostname</td>
            <td>localhost</td>
            <td>The local address the socket is bound to. 
            Usually this is dynamically choosen by your operating system and you don't need
            to specify it.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/localPort</td>
            <td>8900</td>
            <td>The local port the socket is bound to.
                Default is -1 and the operating system chooses an arbitrary port.
                </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/startUdpListener</td>
            <td>true</td>
            <td>Start a UDP datagram listener socket on server side
                </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/useUdpForOneway</td>
            <td>false</td>
            <td>When configured to true the updateOneway() callback will be send
	        as UDP datagram. UDP does not guarantee delivery or correct sequence
		but has a significant smaller latency.
                </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/responseTimeout</td>
            <td>60000 (one minute)</td>
            <td>When a method is invoked we wait the given time on a response, the value must be
	    bigger than zero, there is no unlimited setting possible.<br />
            The response is the return value or an exception for method invocations which
            are not marked oneway.<br />
	    On timeout an exception is thrown which leads on server side to a dead message
	    (depending on the installed error handler).
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/SoTimeout</td>
            <td>0</td>
            <td>How long we max. block on InputStream.read(). Please leave this value
                0, as we should block on input stream indefinitely to receive a new message.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/SoLingerTimeout</td>
            <td>60000 (one minute)</td>
            <td>If the socket is closed, how long shall we try to deliver unsent data from the socket stack.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/backlog</td>
            <td>50</td>
            <td>Socket queue size for incoming connection request
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/threadPrio</td>
            <td>NORM_PRIORITY = 5</td>
            <td>The priority 1=min - 10=max of the listener thread
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/SSL</td>
            <td>false</td>
            <td>true enables SSL support on server or client socket.
	    If the server side plugin has switched on SSL it will accept
	    only SSL clients. To have SSL and non-SSL SOCKET connections
	    you need to register two SOCKET plugins in xmlBlasterPlugins.xml
	    which listen on different ports, for details see the example section.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/keystore</td>
            <td>''</td>
            <td>The path of your SSL keystore file. Use the java utility keytool.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/keystorepass</td>
            <td>''</td>
            <td>The password of your keystore file.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/compress/type</td>
            <td>''</td>
            <td>Valid values are:
	      <ul>
	        <li>'' disables compression (default)</li>
		<li>'zlib:stream' compresses whole stream</li>
		<li>'zlib' only compresses flushed chunks bigger than 'compress/minSize' bytes</li>
	      </ul>
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>plugin/socket/compress/minSize</td>
            <td>0</td>
            <td>Compress message bigger than given bytes, see above
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>dump[socket]</td>
            <td>false</td>
            <td>true switches message dump on
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>
   </configuration>
   <configuration where="client">
      <h2>Additional client side configuration</h2>
      <p>The Java socket implementation on client side supports
         the same properties as the server (we reuse the same implementation).
         You need to add the "dispatch/callback/" or "dispatch/connection/" prefix
         to the property key.<br />
         You have these additional features on client side:
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>dispatch/callback/plugin/<br />socket/multiThreaded</td>
            <td>true</td>
            <td>
            <ul>
              <li>true: Incoming callback requests (the update() method) are dispatched to one thread per request.<br />
               This avoids deadlocks if you call recursively the server - calling for example in the
               update() thread a publish() or subscribe() would otherwise deadlock (publishOneway() is OK).<br />
               Note that oneway message updates (method updateOneway()) are not guaranteed to be in sequence, since one thread on
               client side may overtake another one.<br />
               The update() variant with return value is still guaranteed to keep the sequence
               since xmlBlaster on server side uses exactly one thread per client to callback.
              </li>
              <li>false: There is only one thread for callbacks on client side, this guarantees that even your updateOneway() method
              receives the messages in strict order.<br />
              On the other hand you can't call any non-oneway xmlBlaster method in the update() body since this would deadlock.
              </li>
            </ul>
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>dispatch/callback/plugin/<br />socket/invokerThreadPrio</td>
            <td>NORM_PRIORITY = 5</td>
            <td>
              The priority of the client side callback thread which calls your update method.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>dispatch/callback/plugin/<br />socket/threadPrio</td>
            <td>NORM_PRIORITY = 5</td>
            <td>The priority 1=min - 10=max of the client side callback server listener thread
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

      </table>
   </configuration>
   <todo type="HTML">
   <ol>
      <li>
      Currently the server has implemented a one thread/client approach.
      This doesn't scale very well with thousands of clients -
      probably we should support one thread/request with a thread pool as well.
      </li>
      <li>
      Different encodings on client and server side could be a problem, test with 
      java -Dfile.encoding=ISO8859_1 ... or System.setProperty("file.encoding","Cp850");
      </li>
   </ol>
   <h2>Note on UDP datagram usage</h2>
   <p>Each network in the Internet is characterised by a Maximum Transmission Unit (MTU),
      which defines the largest datagram which can be sent on that network.
      Whilst the total length of a datagram can (in theory) be up to 64 KB,
      "real world" MTU limits usually mean datagrams are smaller 1500 bytes in total length.
   </p>
   <p>Currently we have configured MAX_PACKET_SIZE = 10*1024</p>
   </todo>
   <see type="REQ">protocol</see>
   <see type="REQ">client.c.socket</see>
   <see type="REQ">client.cpp.socket</see>
   <see type="API">org.xmlBlaster.protocol.socket.Parser</see>
   <see type="API">org.xmlBlaster.protocol.socket.SocketDriver</see>
   <see type="API">org.xmlBlaster.protocol.socket.SocketUrl</see>
   <see type="CODE" lang="C">socket/XmlBlasterAccessUnparsed.c</see>
   <see type="INTERNET" label="SSL tutorial">http://java.sun.com/developer/JDCTechTips/2004/tt0914.html#2</see>
   <see type="INTERNET" label="SSL reference guide">http://java.sun.com/j2se/1.4.2/docs/guide/security/jsse/JSSERefGuide.html</see>
   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 02 12</date>
   <revision>$Revision: 1.48 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.</test>
   </testcase>
</requirement>

