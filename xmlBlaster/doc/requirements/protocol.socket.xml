<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='protocol.socket' type='NEW' prio='HIGH' status="INWORK">
   <topic>XmlBlaster supports a bidirectional native communication protocol using exactly one socket connection</topic>
   <description>
      <p>
      RPC (remote procedure call) based frameworks like CORBA, RMI and XmlRpc require the client
      to set up a callback server for asynchronous callbacks. This causes problems if the client
      is behind a firewall or if the client may not establish a listen socket.
      Reusing a socket for callbacks solves this problem.
      </p>
      <h3>
      Protocol specification
      </h3>
   <p>
   Design decisions:
   </p>
   <ul>
     <li>Uses no bit settings to allow simple access with any programming language</li>
     <li>To avoid bigendian/littleendian problems no netlong etc. are used</li>
     <li>Numbers are delivered as strings, right justified</li>
     <li>All header fields have even boundaries</li>
     <li>Compact format for good performance</li>
   </ul>
   <br />
   <p>
   This specifies the raw data format, bracket fields are optional:
   </p>
   <pre>
    msgLen[10] flag[6] uniqueID[10] method[10] lenUnzipped[10]   userData    checkSum[10]
   +----------+-------+------------+----------+[-------------+]-------------+[---------+]
   </pre>
   <p>
   Description:
   </p>
   <table>
      <tr>
         <td>Field</td>
         <td>Description</td>
         <td>Size [bytes]</td>
      </tr>
      <tr>
         <td>msgLen</td>
         <td>The number of bytes of the message, including itself, the header, the data (and the checksum if appended)</td>
         <td>10</td>
      </tr>
      <tr>
         <td>flag</td>
         <td>The flag defaults to zero (all bits are '\0', only version is set to one), possible settings of each byte are:
            <ol>
               <li>'A' Adler32 checksum is appended (see java.util.zip)</li>
               <li>'Z' The userData is compressed with gzipped</li>
               <li>Type of message<ul><li>'\0' for request</li><li>'R' for return value</li><li>'E' for exception</li></ul></li>
               <li>'\0' Reserved</li>
               <li>'\0' Reserved</li>
               <li>'1' Version byte for this protocol</li>
            </ol>
         </td>
         <td>6</td>
      </tr>
      <tr>
         <td>uniqueId</td>
         <td>A unique identifier of this request, the return message will contain this ID</td>
         <td>10</td>
      </tr>
      <tr>
         <td>method</td>
         <td>The method to invoke, like "publish", "subscribe", "update"</td>
         <td>10</td>
      </tr>
      <tr>
         <td>lenUnzipped</td>
         <td>The length of the uncompressed user data, allows for example in C to simple allocate enough memory. This field is only appended if the flag is set to 'Z' (compressed).</td>
         <td>10</td>
      </tr>
      <tr>
         <td>userData</td>
         <td>The arguments of the invoked message (see below)</td>
         <td>any</td>
      </tr>
      <tr>
         <td>checkSum</td>
         <td>An optional checksum if the flag field is set</td>
         <td>10</td>
      </tr>
   </table>

   <p>
   The userData has the following typical layout.
   </p>
   <pre>
     len[10]  sessionId \0  qos   \0  key   \0   content
   +---------+----------+---------+---------+------------+
   </pre>
   <p>
   The following table lists all allowed methods, with their arguments, return values and exceptions.<br />
   Note that all data types are of type string and are terminated with a '\0'.<br />
   Only the content is of type 'binary' which length can be calculated by the
   len field. Binary data is not zero terminated.
   </p>
   <table>
      <tr>
         <td>Method</td>
         <td>Arguments</td>
         <td>Return value</td>
         <td>Exception</td>
         <td>Comment</td>
      </tr>
      <tr>
         <td>connect</td>
         <td>QoS{string}</td>
         <td>QoS{string}</td>
         <td>yes</td>
         <td></td>
      </tr>
      <tr>
         <td>disconnect</td>
         <td>sessionId{string}, QoS{string}</td>
         <td>QoS string</td>
         <td>yes</td>
         <td></td>
      </tr>
      <tr>
         <td>ping</td>
         <td>QoS{string}</td>
         <td>QoS{string}</td>
         <td>no</td>
         <td>The QoS can be an empty string ""</td>
      </tr>
      <tr>
         <td>{exception}</td>
         <td>id{string}, reason{string}</td>
         <td>-</td>
         <td>no</td>
         <td>Exception return messages are named similar to the invoked method but are marked with an 'E' flag</td>
      </tr>
      <tr>
         <td>update</td>
         <td>sessionId{string}[, QoS{string}, key{string}, content{binary}]*</td>
         <td>QoS string</td>
         <td>yes</td>
         <td>This is a callback message to the client, the QoS, key, content may be specified multiple times</td>
      </tr>
      <tr>
         <td>publish</td>
         <td>sessionId{string}[, QoS{string}, key{string}, content{binary}]*</td>
         <td>QoS string</td>
         <td>yes</td>
         <td>The QoS, key, content may be specified multiple times</td>
      </tr>
      <tr>
         <td>get</td>
         <td>sessionId{string}, QoS{string}, key{string}</td>
         <td>[QoS{string}, key{string}, content{binary}]*</td>
         <td>yes</td>
         <td>The returned QoS, key, content may be multiple items</td>
      </tr>
      <tr>
         <td>subscribe</td>
         <td>sessionId{string}, QoS{string}, key{string}</td>
         <td>QoS string</td>
         <td>yes</td>
         <td></td>
      </tr>
      <tr>
         <td>unSub</td>
         <td>sessionId{string}, QoS{string}, key{string}</td>
         <td>QoS string</td>
         <td>yes</td>
         <td>cancel a subscription</td>
      </tr>
      <tr>
         <td>erase</td>
         <td>sessionId{string}, QoS{string}, key{string}</td>
         <td>QoS string</td>
         <td>yes</td>
         <td></td>
      </tr>
   </table>
   </description>
   <example lang="Java">
      <![CDATA[
Example for a publish() request:

   "        88     1        12publish           41<qos></qos>*<key oid='hello'/>*Hello world"
   
The response:

   "        48  R  1        12publish            6hello*"

The response if an exception occured:

   "        48  E  1        12publish            6QueueOverflow*The destination queue is full*"

The '*' is used as a symbol for a '\0' character (all zero bits) which terminates strings.
The content of a message, here 'Hello world' is binary data and has no '\0', it is determined by len.
      ]]>
   </example>
   <see type="REQ">protocol</see>
   <author>ruff@swand.lake.de</author>
   <date>2002 02 12</date>
   <revision>$Revision: 1.1 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.</test>
   </testcase>
</requirement>

