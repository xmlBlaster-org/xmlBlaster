<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='engine.persistence.session' type='NEW' prio='HIGH' status="CLOSED">
   <topic>
      XmlBlaster supports sessions and subscriptions which persist a server crash.
   </topic>
   <description>
      <p>
      Persistent sessions will persist a server crash. After such a crash they are 
      reestablished during the recovery process. <br/>
      Session persistence is handled together with subscription persistence (subscription
      persistence would not work without session persistence). The SessionPersistencePlugin
      takes care of that.
      </p>
      <p>
      The recovery process must happen before the communication plugins are made available. 
      This to ensure that recovery will be accomplished completely before any client can 
      access xmlBlaster. It also must happen after the <code>TopicHandler</code> is 
      resuscitated.
      How to ensure this is described in the configuration section below. 
      </p>
      <p>
      A session can either be made persistent explicitly by passing the <code>persistent</code>
      flag in the connectQos or implicitly when a persistent subscription is made on
      that session.
      </p>
      <p>
      The benefit of having persistent sessions is that:
      <ul>
        <li>it allows <b>persistent subscriptions</b></li>
        <li>PtP messages will still be delivered to the destination session even if the
            later has not been able to reconnect yet (for example because the client has
            crashed too, or because the retry delay is high).
        </li>
      </ul>
      Currently there are some requisites which must be fulfilled to allow a session to be
      made persistent. These are:
      <ul>
        <li>a) The session must be assigned by the client (i.e. he must provide a 
           <b>positive sessionId</b>)</li>
        <li>b) The <b>callback connection</b> must be configured as <b>failsafe</b> (to avoid 
             disconnection in cases where the client is inaccessible)</li>
      </ul>
      Some of the protocols may be less restrictive than others but if you fulfill the 
      mentioned requisites, session persistency will work on all communication protocols.
      </p>
      <p>
      Persistence of sessions is ensured by a persistent I_Map implementation. Configuration
      of the storage (for example storage size or cache size) is done on server side, either
      by passing parameters on the command line or in the xmlBlaster.properties file.
      </p>
      <p><b>Exceptions:</b>
        <ul>
          <li>When connecting persistently and the storage is overflow, an exception is thrown 
              back to the client.
          </li>
          <li>Making a persistent subscription on a transient session implies that the session
              is made persistent. If the storage for the persistent sessions is overflown, an
              exception is thrown back to the client.
          </li>
          <li>When using a negative, generated public session id, for example <code>user/-1</code>
           you may encounter a resource leak on hard disk. If the server restarts and the client
           restarts it will connect with a new generated, negative public session id and won't
           find its old session anymore. With SOCKET or XMLRPC protocol a client could dump
           the secret session ID and reuse it on client startup - in this case it would work out fine (no resource leak).
           <br />
          Our CORBA protocol plugin can't handle persistent sessions with a generated, negative public session id,
          as the CORBA layer is the creator of the secret session id and is creating a new one on each startup.
           <br />
           See <a hef="http://www.xmlblaster.org/xmlBlaster/doc/requirements/client.failsafe.html#naming">client.failsafe</a> about
           the term '<code>public session id</code>'.
          </li>
        </ul>
      </p>
   </description>

   <example lang="Java">
     <pre>
      <![CDATA[
ConnectQos qos = new ConnectQos(global);
qos.setSessionName(new SessionName(global, "fritz/1");

/* sets the session to be persistent */
qos.setPersistent(true);

/* sets the callback connection to be failsafe */
CallbackAddress cbAddr = new CallbackAddress(global);
cbAddr.setRetries(-1);
cbAddress.setPingInterval(-1);
cbAddress.setDelay(1000L);
qos.addCallbackAddress(cbAddress);
      ]]>
      </pre>
   </example>

   <example lang="XML">
     <pre>
      <![CDATA[

<qos>
  <securityService type="htpasswd" version="1.0">&lt;![CDATA[
      <user>happyUser</user>
      <passwd>secret</passwd>
    ]]&bt;</securityService>
  <persistent/> <!-- same as <persistent>true</persistent> -->
  <session name='yourName/6' />
  <queue relating='connection'>
    <address pingInterval='0' retries='-1' delay='2000' />
  </queue>
  <queue relating='callback' maxEntries='5' maxEntriesCache='2'>
    <callback pingInterval='0' retries='-1' delay='1000' />
  </queue>
</qos>
      ]]>
     </pre>
   </example>

   <configuration where="server">
      <p>
      The configuration of the plugin happens in the xmlBlasterPlugin.xml file.
      <pre>
      <![CDATA[
   <!--========== SubscriptionPersistencePlugin =============-->
    ....
   <plugin id='subPersistence' className='org.xmlBlaster.engine.SessionPersistencePlugin'>
      <action do='LOAD' onStartupRunlevel='3' sequence='1' />
      <action do='STOP' onShutdownRunlevel='2' sequence='6'/>
   </plugin>
    ....
      ]]>
      </pre>
      It is important that it is started <b>after runlevel 2</b> in order to assure that the topics
      are there when sessions and subscriptions are recovered. The logical place where to do
      it is on runlevel 3. Since this runlevel is the one on which communication plugins are
      loaded it is important that <b><code>subPersistence</code> is loaded before the communication
      plugins are</b> (by choosing a higher sequence number on load for the communication 
      plugins).<br/>
      The name <code>subPersitence</code> specified as the plugin id is not important since
      the plugin registers itself as a listener.
      </p>
      <p>
      <b><u>The configuration of the size of the storage</u></b><br/>
      All persistent sessions are stored on the same storage which is configurable on server
      side (the same way as the msgUnitStore). You can either pass the parameters in the
      <code>xmlBlaster.properties</code> file:
      <pre>
      ....
persistence/session/maxEntriesCache = 10
persistence/session/maxEntries = 200
      ....
    </pre>
      or on the command line when starting xmlBlaster:
      <pre>
   java org.xmlBlaster.Main \
   -persistence/session/maxEntriesCache 10 \
   -persistence/session/maxEntries 200
      </pre>
      </p>

   </configuration>
   <see type="REQ">client.failsafe</see>
   <see type="REQ">engine.persistence.subscription</see>
   <see type="API">org.xmlBlaster.engine.I_SessionPersistencePlugin</see>
   <author><a ref='laghi@swissinfo.org'>Michele Laghi</a></author>
   <hacker><a ref='laghi@swissinfo.org'>Michele Laghi</a></hacker>
   <date>2004 02 19</date>
   <revision>$Revision: 1.1 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.client.TestPersistentSession</test>
   </testcase>

   <todo>
      A flag to the ConnectQos must be added for the initial status of the DispatcherManager belonging to
      this session: 'dispatcherActive'. Additionally, everytime an invocation on 
      SessionInfo.setDispatcherActive(boolean) is done, an update on the DB must be done to ensure the status
      will be correct when reconnecting after a server crash.
   </todo>


</requirement>

