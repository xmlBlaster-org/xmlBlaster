<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='client.failsave' type='NEW' prio='LOW' status="CLOSED">
   <topic>
      XmlBlasterConnection is a helper class for Java clients which supports
      polling for xmlBlaster and record/playback of messages during lost connections.
   </topic>
   <description>
      The protocol used (CORBA, RMI, XML-RPC) is transparently hidden.
      See XmlBlasterConnection.java for a usage description and TestFailSave.java (testsuite)
      for a code example how to use it.
   </description>
   <example lang="Java">
      <![CDATA[
// Example with default fail save settings,
// you can change these on command line or in a property file.
// See configuration section below
try {
   con = new XmlBlasterConnection(glob);

   con.initFailSave(new I_ConnectionProblems() {
         
         public void reConnected() {
            log.info(ME, "I_ConnectionProblems: We were lucky, reconnected to " + glob.getId());
            //initClient();    // initialize subscription etc. again
            try {
               con.flushQueue();    // send all tailback messages
               // con.resetQueue(); // or discard them (it is our choice)
            } catch (XmlBlasterException e) {
               log.error(ME, "Exception during reconnection recovery: " + e.reason);
            }
         }

         public void lostConnection() {
            log.warn(ME, "I_ConnectionProblems: Lost connection to " + glob.getId());
         }
      });

   ConnectQos qos = new ConnectQos(glob);

   ConnectReturnQos conRetQos = con.connect(qos, new I_Callback() {
      public String update(String cbSessionId, UpdateKey updateKey, byte[] content,
                                                               UpdateQos updateQos) {
         log.info(ME, "Reveiving asynchronous message '" + updateKey.getOid() + "'");
         return "";
      }
   });  // Login to xmlBlaster, default handler for updates

   log.info(ME, "Connected to xmlBlaster.");
   ...
      ]]>
   </example>

   <example lang="Java">
      <![CDATA[
// Example with hard coded fail save settings
// Here the callback methods are not shown
try {
   con = new XmlBlasterConnection(glob); // Find orb

   ConnectQos connectQos = new ConnectQos(glob, loginName, passwd);

   // Setup fail save handling ...
   Address addressProp = new Address(glob);
   addressProp.setDelay(4000L);      // retry connecting every 4 sec
   addressProp.setRetries(-1);       // -1 == forever
   addressProp.setPingInterval(0L);  // switched off
   addressProp.setMaxMsg(1000);      // queue up to 1000 messages
   con.initFailSave(this);

   connectQos.setAddress(addressProp);

   // and do the login ...
   con.connect(connectQos, this);  // Login to xmlBlaster, register for updates
}
catch (XmlBlasterException e) {
      Log.warn(ME, "setUp() - login failed");
      fail("setUp() - login faile");
}
 
      ]]>
   </example>

   <configuration where="server">
      <p>
      These parameters allow to configure the clients fail save behavior.
      </p>
      <p>
      Example:
      <pre>java HelloWorld4 -queue.maxMsg 20000</pre>
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

         <tr>
            <td>pingInterval</td>
            <td>10000</td>
            <td>Ping every given milliseconds if xmlBlaster connection is OK</td>
            <td>yes</td>
         </tr>

         <tr>
            <td>retries</td>
            <td>-1 (forever)</td>
            <td>How often to retry to establish a new connection to xmlBlaster
                on failure.
            </td>
            <td>yes</td>
         </tr>

         <tr>
            <td>delay</td>
            <td>4000</td>
            <td>Delay between connection retries in milliseconds<br />
                A delay value > 0 switches fails save mode on, 0 switches it off</td>
            <td>yes</td>
         </tr>
         
         <tr>
            <td>queue.maxMsg</td>
            <td>1000</td>
            <td>The maximum allowed number of messages in this queue<br />
                0 switches recording of invocations (tail back messages) off.<br />
                -1 sets it to unlimited.
            </td>
            <td>yes</td>
         </tr>
      </table>
   </configuration>

   <see type="REQ">util.recorder</see>
   <see type="REQ">util.recorder.persistence</see>
   <see type="API">org.xmlBlaster.client.protocol.XmlBlasterConnection</see>
   <author>ruff@swand.lake.de</author>
   <hacker>ruff@swand.lake.de</hacker>
   <date>2000 02 23</date>
   <revision>$Revision: 1.16 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestFailSave</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestInvocationRecorder</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestFailSaveAsync</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.InvocationRecorderTest</test>
   </testcase>
</requirement>

