<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='client.failsave' type='NEW' prio='LOW' status="CLOSED">
   <topic>
      XmlBlasterConnection is a helper class for Java clients which supports
      polling for xmlBlaster and record/playback of messages during lost connections.
   </topic>
   <description>
      The protocol used (CORBA, RMI, XML-RPC) is transparently hidden.
      See XmlBlasterConnection.java for a usage description and TestFailSave.java (testsuite)
      for a code example how to use it.
   </description>
   <example lang="Java">
      <![CDATA[
      public void login()
      {
         try {
            xmlBlasterConnection = new XmlBlasterConnection(); // Hides Corba stuff

            // Setup fail save handling (optional) ...
            long retryInterval = 4000L;// if connection to xmlBlaster is lost,
                                       // polling frequency in milli seconds
            int retries = -1;          // -1 == forever
            int maxMessages = 1000;    // if connection to xmlBlaster is lost,
                                       // no. of messages to record locally and playback on reconnect
            long pingInterval = 2000L;
            xmlBlasterConnection.initFailSave(this, retryInterval, retries, maxMessages, pingInterval);

            xmlBlasterConnection.login(loginName, passwd, qos, this); // Login to xmlBlaster
         }
         catch (XmlBlasterException e) {
             System.out.println("Login failed, ID=" + e.id + " REASON=" + e.reason);
         }
      }

      /**
       * This is the callback method invoked from XmlBlasterConnection
       * informing the client in an asynchronous mode if the connection was established.
       * This method is enforced through interface I_ConnectionProblems
       */
      public void reConnected()
      {
         // Code your recovery handling ...
         try {
            if (xmlBlasterConnection.queueSize() > 0) {
               xmlBlasterConnection.flushQueue();    // send all tailback messages
            }
         } catch (XmlBlasterException e) {
         }
      }

      /** listener callback allows to do actions if connection is lost */
      public void lostConnection()
      {
         System.out.println("Lost connection to xmlBlaster");
      }
      ]]>
   </example>
   <see>org.xmlBlaster.client.protocol.XmlBlasterConnection</see>
   <author>ruff@swand.lake.de</author>
   <hacker>ruff@swand.lake.de</hacker>
   <date>2000 02 23</date>
   <revision>$Revision: 1.7 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.org.xmlBlaster.TestFailSave</test>
   </testcase>
</requirement>

