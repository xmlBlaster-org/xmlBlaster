<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='mime.plugin.accessfilter' type='NEW' prio='HIGH' status='CLOSED'>
   <topic>XmlBlaster has a MIME based plugin interface to filter message access</topic>
   <description>
      <p>
      XmlBlaster allows you to query messages based on their meta information with XPath.
      Sometimes this is not enough. The key-meta information for one message instance (say oid="Track")
      is immutable. Putting dynamic data into the meta information is not possible without
      impact on performance. Distributing thousand messages / second under different message oid is memory consuming.
      </p>
      <p>
      This is a use case where you may want to write a little plugin, doing some query in the message
      content (it is like a full text search). Please study the following illustration which shows this use case.
      </p>
      <img src="mimeSubscribeFilter.gif" border="0" title="XmlBlaster MIME plugin example" alt="Example how to use the MIME plugin" />
      <p>
      All airplanes are sending their GPS track coordinates every 5 seconds. If you
      track 5000 airplanes you have 1000 messages/second. Performance is a real challenge here.
      </p>
      <p>
      Air traffic controllers want to zoom into special geographic areas and need to subscribe
      to only those airplanes which are in their latitude and longitude range.
      </p>
      <p>
      An air traffic controller subscribes to the message oid="Track". Other messages
      won't be delivered. It is a normal subscription. Now his software adds a filter
      rule, which is evaluated on each track message by your plugin.
      </p>
      <p>
      As a plugin coder, you have to implement two interfaces
      <ul>
         <li>I_Plugin: Which allows xmlBlaster to load the plugin</li>
         <li>I_AccessFilter: Which forces you to implement the match() method</li>
      </ul>
      This is simple and straight forward (see requirement mime.plugin.accessfilter.howto).
      </p>
      <p>
      Filter Features:
      </p>
      <ul>
      <li>MIME based plugin selection<br />
      The plugin you code has to supply MIME types which it can handle. Only messages of this
      mime type are directed to the plugin. The mime type "*" registers the plugin for
      all message MIME types.
      </li>
      <li>Filter support for synchronous access with get() and asynchronous access with subscribe()<br />
      You can specify the filter rules with two xmlBlaster methods:
      <ol>
         <li>Synchronous access with the get() invocation:<br />
            Specify the filter rule in the QoS of the get() method to filter
            the desired messages. The messages are returned as the get() return value.
         </li>
         <li>Asynchronous access with the subscribe() invocation<br />
            Specify the filter rule in the QoS of the subscribe() method to filter
            the desired messages. The messages are returned with the asynchronous
            update() callback.
         </li>
      </ol>
      </li>
      <li>Multiple filters per subscription<br />
      Multiple filters can be specified in one subscribe/get invocation.
      Each of them may address another plugin. The are sequentially executed and if
      one filter denies access (the match() method returns 'false') the message
      is not delivered. The filters are logically AND connected.
      </li>
      <li>Cascading approach for XPath/exact query and filters<br />
      On subscribe first the usual XPATH or exact subscription is checked.
      The client is added as subscriber to all matching message types.
      If now real messages arrive, the filter plugin is additionally filtering
      messages away. The same applies for get() invocations.
      </li>
      <li>The plugin can analyze the complete message<br />
      The plugin has access to the complete message, key, content and QoS.
      It can use all those informations to decide access or deny.
      </li>
      <li>The plugin can manipulate the message content<br />
      The plugin may manipulate the content of the message if desired,
      delivering changed content to the client. Changing of the key or qos is not allowed,
      as the problems which may ocurre are not analyzed yet.
      </li>
      </ul>
      <p>
      </p>
   </description>
   <example lang="Java">
<![CDATA[

These is an example key and QoS of a subscribe() invocation:
============================================================

   <key oid='' queryType='XPATH'>
      //StockData
   </key>


   <qos>
      <filter type='ContentLenFilter'>
         8000
      </filter>
      <filter type='ContainsChecker' version='7.1'>
         sex
      </filter>
   </qos>

All messages containing the xml meta information element <StockData/> are
selected.
Those message are further filtered to not contain the word 'sex' and to
have a content shorter then 8 kBytes.

]]>
   </example>
   <configuration where="server">
      <p>
      For coding and configuration of plugins please read the
      requirement mime.plugin.a.howto (see link below)
      </p>
   </configuration>
   <see type="API">org.xmlBlaster.engine.mime.I_AccessFilter</see>
   <see type="API">org.xmlBlaster.engine.mime.demo.ContentLenFilter</see>
   <see type="API">org.xmlBlaster.util.I_Plugin</see>
   <see type="REQ">mime.plugin.accessfilter.howto</see>
   <see type="REQ">util.property.env</see>
   <author>ruff@swand.lake.de</author>
   <date>2002 03 14</date>
   <revision>$Revision: 1.2 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.org.xmlBlaster.TestAccessFilter</test>
   </testcase>
</requirement>

