<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='engine.queue' type='NEW' prio='HIGH' status='CLOSED'>
   <topic>XmlBlaster has a sophisticated message queueing engine</topic>
   <description>
      <p>
      Message are queued only when necessary. This occurs typically on messages which
      need to be sent back to clients:
      </p>
      <img src="MsgQueue.gif" border="0" title="XmlBlaster Message Queue" alt="Overview of the internal message queue framework" />
      <p>
      Queue Features:
      </p>
      <ul>
      <li>High performing and thread safe<br />
      The queue is based on a sorted bounded buffer from Doug Lea.
      It is higher performing than a thread safe java.util collection TreeSet,
      consuming 100 mirco seconds instead of 200 micro seconds for the latter
      to insert and remove one message.
      </li>
      <li>Priority support<br />
      The priority for messages can be specified when publishing.
      The standard value is 5, a value of 9 has highest priority, whereas 0 is slowest.
      </li>
      <li>Guarantee sequence<br />
      The sequence of incoming messages is recorded with a unique timestamp.
      On delivery this sequence is guaranteed to be equal.
      Different message priorities reorder the sequence of message delivery, since
      priority is a higher sort criteria than the incoming timestamp.
      </li>
      <li>Bounded (max size)<br />
      Every queue has a maximum size. The maximum boundary is adjustable
      as the number of entries in the queue or as maximum memory consumption.
      On queue overflow xmlBlaster sends a <i>deadLetter</i> (see below).
      'Falling through' - the oldest message is removed when the queue is full and
      a new message arrives - is currently not supported.
      A MsgQueue can be configured to block until there is place in the queue
      again. This means that the publisher client blocks in its publish() method as well.
      Note that this is causing dead locks in some situation and is currently not recommended.
      </li>
      <li>Dead letter<br />
      On queue overflow or on callback failure a "dead letter" mode is adjustable.
      In this case a dead letter is published, containing the lost message.
      Interested exception handlers clients can subscribe to "__sys__deadLetter" messages to
      receive them and react accordingly. A logging entry is written in such a case to
      the servers log file. 
      </li>
      <li>Queue types<br />
      A queue is installed on the fly when needed. If a message destination is
      not reachable, a queue is created to hold messages addressed for this destination.
      Two message queue types are created on login and one for each published callback address.
      <ol>
         <li>SessionQueue (<i>session:</i>)<br />
         The life cycle of this queue is bound to the login session life cycle, usually it
         is created on login and destroyed on logout (see requirement engine.login.qos.session).
         It can be used as the ReplyTo address for sent messages.
         This is the default callback for session based subscriptions.
         </li>
         <li>SubjectQueue (<i>subject:</i>)<br />
         This queue is created on login if not existing beforehand.
         The queue is named similar to the login name of the client.
         It may remain living after logout, or may be created before login if
         a PtP message addresses it.
         It is destroyed on logout of the last session of a specific client if it contains no messages
         (or if forced by the QoS of a disconnect(), see API of DisconnectQos).
         If the last message in this queue expires and no login session exists it is destroyed [TODO].<br />
         The specified callback server of the SessionQueue is used if not otherwise specified in the login QoS,
         see callback attribute useForSubjectQueue='true'.
         The messages from this queue are delivered to all current sessions of the user having
         set useForSubjectQueue='true'.
         This means on multiple logins, the same message is delivered multiple times.
         </li>
         <li>UnrelatedQueue (<i>unrelated:</i>) TODO<br />
         This are queues which are created for subscribes which expressly states a callback
         address in its QoS. It can be a delegated subscribe (e.g. for a dumb toaster).
         This is a durable subscription outliving the logout of its creator (if not otherwise configured).
         It is destroyed when no subscription for this queue exists any more.
         Subscribes without callbacks specified in its QoS,
         are using as a default the callback address of the SessionQueue.
         </li>
      </ol>
      </li>
      <li>Zero or one callback address<br />
      Every message queue has zero or one callback addresses associated:
      The SessionQueue and the UnrelatedQueue have exactly one for asynchronous
      updates or zero when browsed synchronously.
      The SubjectQueue has no callback address, it uses the sessions callback.
      </li>
      <li>Synchronous browsing [TODO]<br />
      A message queue may be browsed with the synchronous get() method.
      </li>
      <li>Sequence on XPath subscription [TODO]<br />
      A subscription with XPath may collect many messages with one query.
      The sequence of those message is guaranteed (priority and timestamp subordering).
      </li>
      </ul>
      <p>
      </p>
   </description>
   <example lang="Java">
<![CDATA[

These is an example QoS of a connect() invocation:
==================================================

<qos>
   ...
   <!-- SessionQueue callback: Use CORBA to send messages back -->
   <queue relating='subject' maxMsg='1600' expires='360000000'
            onOverflow='block' onFailure='deadLetter'>
      <callback type='IOR' sessionId='sd3lXjs9Fdlggh' pingInterval='60000' useForSubjectQueue='true'>
         IOR:00011200070009990000....
      </callback>
   </queue>
</qos>


<qos>
   ...
   <!-- specify subjectQueue parameters -->
   <queue relating='subject' maxMsg='1600' expires='360000000'
            onOverflow='deadLetter'>
   </queue>
</qos>


<qos>
   ...
   <!-- SessionQueue callback:
         Use CORBA to send messages back with default queue parameters
   -->
   <callback type='IOR'>
      IOR:00011200070009990000....
      <compress type='gzip' minSize='1000' />
                  <!-- compress messages bigger 1000 bytes before sending them to me -->
      <burstMode collectTime='400' /> <!-- Collect messages for 400 milliseconds and update
                  them in one callback (burst mode) -->
   </callback>
</qos>


These are example QoS of subscribe() invocations:
================================================

<!-- The subscribed messages are delivered via the SessionQueue of the subscriber -->
<qos>
</qos>

<!-- Same as above -->
<qos>
   <queue relating='session'/>
</qos>

Any other queue overwrites session delivery:

<!-- The subscribed messages are only delivered via the SubjectQueue of the current client -->
<qos>
   <queue relating='subject'/>
   <queue relating='subject:somebodyElse'/>
</qos>

<qos>
   <queue relating='unrelated' maxMsg='1000' maxSize='4000' onOverflow='deadLetter'/>
      <callback type='EMAIL'>
         et@mars.universe   <!-- Sends messages to et with specified queue attributes -->
      </callback>
   </queue>

   <callback type='EMAIL' onFailure='deadLetter'>
      tolkien@mars.universe <!-- Sends messages to tolkien, with default queue settings -->
   </callback>

   <callback type='XML-RPC' sessionId='8sd3lXjspx9Fdlggh'>
      http:/www.mars.universe:8080/RPC2
   </callback>

   <!-- The session id is passed to the client callback server, he can check
         if he trusts this sender -->
</qos>


These is an example QoS of a disconnect() invocation:
=====================================================

<qos>
   <deleteSubjectQueue>false</deleteSubjectQueue>
</qos>

]]>
   </example>
   <configuration where="server">
      <p>
      These parameters allow to configure the xmlBlaster server default behavior.
      </p>
      <table border="1">
         <tr>
            <td>Property</td>
            <td>Default</td>
            <td>Description</td>
            <td>Implemented</td>
         </tr>
         <tr>
            <td>queue.maxMsg</td>
            <td>1000</td>
            <td>The max setting allowed for queue size (number of messages in queue until it overflows)</td>
            <td>yes</td>
         </tr>
         <tr>
            <td>queue.maxSize</td>
            <td>4000 (4 MB)</td>
            <td>The max setting allowed for queue maxSize in kBytes</td>
            <td>no</td>
         </tr>
         <tr>
            <td>queue.expires.min</td>
            <td>1000</td>
            <td>The min span of life is one second</td>
            <td>no</td>
         </tr>
         <tr>
            <td>queue.expires.max</td>
            <td>0</td>
            <td>The max span of life of a queue is currently forever (=0)</td>
            <td>no</td>
         </tr>
         <tr>
            <td>queue.expires</td>
            <td>0</td>
            <td>If not otherwise noted a queue dies after the max value (0 is forever)</td>
            <td>no</td>
         </tr>
         <tr>
            <td>queue.onOverflow</td>
            <td>deadLetter</td>
            <td>Error handling when queue is full: <i>block</i> or <i>deadLetter</i></td>
            <td>yes</td>
         </tr>
         <tr>
            <td>queue.onFailure</td>
            <td>deadLetter</td>
            <td>Error handling when callback failed (after all retries etc.)</td>
            <td>yes</td>
         </tr>
      </table>
   </configuration>
   <see type="API">org.xmlBlaster.engine.queue.MsgQueue</see>
   <see type="API">org.xmlBlaster.engine.callback.CbWorker</see>
   <see type="API">org.xmlBlaster.engine.helper.CallbackAddress</see>
   <see type="API">org.xmlBlaster.engine.helper.QueueProperty</see>
   <see type="API">org.xmlBlaster.engine.util.ConnectQos</see>
   <see type="API">org.xmlBlaster.engine.util.DisconnectQos</see>
   <see type="REQ">engine.callback</see>
   <see type="REQ">engine.qos.login.callback</see>
   <see type="REQ">util.property</see>
   <see type="REQ">util.property.args</see>
   <see type="REQ">util.property.env</see>
   <author>ruff@swand.lake.de</author>
   <date>2002 02 04</date>
   <revision>$Revision: 1.12 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.</test>
   </testcase>
</requirement>

