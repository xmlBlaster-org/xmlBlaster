<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='interface.unSubscribe' type='NEW' prio='HIGH' status="CLOSED">
   <topic>Message subscriptions are canceled with the unSubscribe() method</topic>
   <description>
      <p>
      The <b>unSubscribe()</b> method allows to cancel message subscriptions in xmlBlaster.
      To unSubscribe you pass the subscriptionId you got from subscribe().
      </p>
      <p>
      Method detail (CORBA IDL notation):
      </p>
      <pre>
   typedef string XmlType;

   void unSubscribe(in XmlType xmlKey, in XmlType qos) raises(XmlBlasterException);
      </pre>
         
      <table border="1">
         <tr>
         <th>Parameter</th><th>Type</th><th>Description</th>
         </tr>
         <tr>
         <td>xmlKey</td><td>string</td><td>The XML encoded key containing the subscriptionId</td>
         </tr>
         <tr>
         <td>xmlQos</td><td>string</td><td>The XML encoded Quality of Service QoS (see UnSubscribeQos link below)</td>
         </tr>
         <tr>
         <td>XmlBlasterException</td><td>exception</td><td>Thrown on error</td>
         </tr>
      </table>
   </description>


   <example lang="XML" type="HTML">
      <p>
      Here is an example of an unSubscribe:
      </p>
      <table border="1">
         <tr><td>Key</td><td>&lt;key oid='__subId:7' /></td></tr>
         <tr><td>QoS</td><td>&lt;qos/></td></tr>
      </table>
   </example>
   
   <example lang="XmlRpc" type="HTML">
      <p>
      This is the XmlRpc server interface variant:
      </p>
      <pre>
   public String unSubscribe(String sessionId, String xmlKey_literal, String qos_literal)
                                                         throws XmlBlasterException
      </pre>
   </example>

   <example lang="RMI" type="HTML">
      <p>
      This is the RMI server interface variant:
      </p>
      <pre>
   public void unSubscribe(String sessionId, String xmlKey_literal, String qos_literal)
                           throws RemoteException, XmlBlasterException
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code to unSubscribe:
      </p>
      <pre>
   import org.xmlBlaster.client.key.SubscribeKey;
   import org.xmlBlaster.client.qos.*;

   ...

   // subscribe:

   SubscribeKey sk = new SubscribeKey(glob, "MyOid");

   SubscribeQos sq = new SubscribeQos(glob);

   SubscribeReturnQos sr = con.subscribe(sk.toXml(), sq.toXml());

   ...

   // unSubscribe:

   UnSubscribeKey uk = new UnSubscribeKey(glob, sr.getSubscriptionId());

   UnSubscribeQos uq = new UnSubscribeQos(glob);

   con.unSubscribe(uk.toXml(), uq.toXml());
      </pre>
   <p>
   See xmlBlaster/demo/javaclients/HelloWorld*.java for more examples.
   </p>
   </example>

   <configuration>
   </configuration>

   <see type="REQ">interface</see>

   <see type="API">org.xmlBlaster.client.key.UnSubscribeKey</see>
   <see type="API">org.xmlBlaster.client.UnSubscribeQos</see>
   <see type="API">org.xmlBlaster.protocol.xmlrpc.XmlBlasterImpl</see>
   <see type="API">org.xmlBlaster.protocol.rmi.XmlBlasterImpl</see>
   <see type="API">org.xmlBlaster.client.protocol.XmlBlasterConnection</see>

   <author>ruff@swand.lake.de</author>
   <date>2002 06 28</date>
   <revision>$Revision: 1.4 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>Tests the unSubscribe method invocation</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestUnSub</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubNoDup</test>
   </testcase>
</requirement>

