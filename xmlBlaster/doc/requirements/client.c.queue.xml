<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">


<requirement id='client.c.queue' type='NEW' prio='MEDIUM' status='CLOSED'>
   <topic>
      XmlBlaster provides a persistent queue implementation for ANSI C
   </topic>
   <description>
     <p>
     We use the relational database SQLite for our queue implementation.
     </p>
     <h2>Features</h2>
     <ul>
        <li> Support on many OS like Windows, Windows-CE / Pocket PC,
             UNIX, Linux and the code is easy portable to embedded devices</li>

        <li> Compiles with C or with C++ compiler</li>

        <li> The access library and the callback library is thread safe (no global variables).
          </li>

        <li> The code is tested on memory leaks with valgrind and partially statically
             checked with flawfinder.
          </li>

          <li> Can be used standalone outside of xmlBlaster</li>
    </ul>

     <h2>Memory footprint</h2>
     <p>
     </p>

     <h2>Compilation with ant</h2>
     <pre>
build -DXMLBLASTER_PERSISTENT_QUEUE=1 c-delete c
expects xmlBlaster/src/c/util/queue/sqlite.h and xmlBlaster/lib/libsqlite.so
     </pre>

     <h2>Compilation manually</h2>
     <p>
     Here are some complete examples how to compile a simple C client 'manually':
     </p>
     <pre>
cd xmlBlaster/src/c/util/queue

Linux C:
 export LD_LIBRARY_PATH=/opt/sqlite-bin/lib
 gcc -g -Wall -DQUEUE_MAIN=1 -I../../ -o SQLiteQueue SQLiteQueue.c
     ../helper.c -I/opt/sqlite-bin/include -L/opt/sqlite-bin/lib -lsqlite

Linux C++:

Windows:

Solaris:
     </pre>
   </description>
   <example lang="C" type="HTML">
      <p><a NAME="example"></a></p>
      <p>
      See the test file <code>xmlBlaster/testsuite/src/c/TestQueue.c</code>
      </p>
   </example>

   <configuration where="client">
      <p><a NAME="config"></a>
      These configurations are tested:
      </p>
      <table border="1">
       <tr>
       <th>No</th>
       <th>OS</th>
       <th>Compiler</th>
       <th>xml Blaster Vers.</th>
       <th>Thread library</th>
       <th>Date</th>
       <th>Author</th>
       <th>Comment</th>
       </tr>

       <tr>
       <td>1</td>
       <td>Linux 2.4.21</td>
       <td><a href="http://www.gnu.org/software/gcc/gcc.html" target="others">g++ and gcc 3.3.1</a></td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/CHANGES">0.9+</a></td>
       <td><a href="http://www.gnu.org/software/libc/" target="others">pthread</a></td>
       <td>2004-04-09</td>
       <td><a href="mailto:xmlBlaster@marcelruff.info">Marcel</a></td>
       <td><font size="-2">build -DXMLBLASTER_PERSISTENT_QUEUE=1 c-delete c</font></td>
       </tr>

       <tr>
       <td>2</td>
       <td>Linux 2.4.21</td>
       <td><a href="http://www.intel.com/software/products/compilers/clin/" target="others">Intel(R) C++ Compiler for 32-bit, Version 8.0 (icc)</a></td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/CHANGES">0.9+</a></td>
       <td><a href="http://www.gnu.org/software/libc/" target="others">pthread</a></td>
       <td>2004-04-22</td>
       <td><a href="mailto:xmlBlaster@marcelruff.info">Marcel</a></td>
       <td><font size="-2">build -Duse-icc=true -DXMLBLASTER_PERSISTENT_QUEUE=1 c-delete c</font></td>
       </tr>

      </table>

      <p>
      These parameters allow to configure the C-client on command line or over the environment (with lower priority):
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>-queue/connection/dbName</td>
            <td>/var/xmlBlasterClient.db</td>
            <td>The location and file name of the database (for SQLite)</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>-queue/connection/tablePrefix</td>
            <td>XB_</td>
            <td>The prefix used for database table names</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>-queue/connection/maxEntries</td>
            <td>2147483647</td>
            <td>The maximum allowed number of messages</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>-queue/connection/maxBytes</td>
            <td>2147483647</td>
            <td>The maximum allowed bytes of all messages in the queue</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

      </table>

         <h3>Testing</h3>
         <p>
         The testsuite resides in <i>xmlBlaster/testsuite/src/c</i> to compile it
         use ant:
         </p>
         <pre>
cd xmlBlaster
build  -DXMLBLASTER_PERSISTENT_QUEUE=1 c-test
         </pre>
        <p>
        To run the tests invoke
        </p>
        <pre>
TestQueue
        </pre>

   </configuration>

   <todo type='HTML'>
      <h2>The persistent queue implementation is finished and tested, but we need to:</h2>
      <p>
      <ul>
      <li> Embed the queue into C client library (see first try in <code>XmlBlasterConnectionUnparsed.c</code>)</li>
      <li> Embed the queue into C++ client library as a persistent queue plugin.</li>
      <li> Deliver sqlite library (.dll,.so,.sl) in directory
           xmlBlaster/lib at least for Linux/Win for ease of use?</li>
      <li> Adding mutex to every function call?<br />
      Currently you need to add your own mutex to the function calls
      to support multi threaded access.</li>
      <li> Improve BLOB performance and max BLOB size<br />
      The message itself is serialized (see SOCKET protocol) and stored as a BLOB in
      the database.
      SQLite has limited BLOB support, the default max size is 1 MB which
      can be extended to 16 MB.
      Further, BLOB access is very slow, here is a statement from greg@ag-software.com:
      <i>"Suppose you have a 1MB row in SQLite and you want to read the whole
  thing.  SQLite must first ask for the 1st 1K page and wait for it to
  be retrieved.  Then it asks for the 2nd 1K page and waits for it.
  And so forth for all 1000+ pages.  If each page retrieval requires
  1 rotation of the disk, that's about 8.5 seconds on a 7200RPM disk
  drive."</i>
      </li>
      </ul>
      </p>

      <h2>C++ remark</h2>
   </todo>

   <see type="CODE" lang="C">util/queue/I_Queue.h</see>
   <!-- see type="INTERNET" label="TestQueue.c">http://www.xmlBlaster.org/xmlBlaster/testsuite/src/c/TestQueue.c.html</see -->
   <see type="INTERNET">http://www.sqlite.org/</see>
   <see type="INTERNET" label="SQLite performance">http://web.utk.edu/~jplyon/sqlite/SQLite_optimization_FAQ.html</see>
   <see type="INTERNET" label="SQLite compile">http://www.sqlite.org/cvstrac/wiki?p=HowToCompile</see>
   <see type="REQ">client.c.socket</see>
   <see type="REQ">client.cpp</see>

<!--   <see type="REQ">cluster</see> -->
   <author><a href="mailto:mr@marcelruff.info">Marcel Ruff</a></author>
   <date>2004 04 09</date>
   <revision>$Revision: 1.5 $</revision>

   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE" lang="C">TestQueue</test> <!-- TestQueue.c -->
   </testcase>
</requirement>

