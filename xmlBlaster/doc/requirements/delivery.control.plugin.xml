<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='delivery.control.plugin' type='NEW' prio='HIGH' status='CLOSED'>
   <topic>XmlBlaster has a plugin interface which allows to control the message delivery</topic>
   <description>
      <p>
      XmlBlaster allows you to send messages over remote lines in the following ways:
      </p>
      <ul>
        <li>From clients to xmlblaster</li>
        <li>Callback from xmlblaster to clients</li>
        <li>Between xmlBlaster cluster nodes</li>
      </ul>
      <p>
      You can configure those connections in many ways, e.g. choosing the protocol, configure the queue behavior
      or manipulate the fail over settings.
      </p>
      <p>
      Sometimes this is not enough.
      This is a use case where you may want to write a little plugin, having some specific
      behavior.
      </p>


      <h3>An example plugin</h3>
      <p>
      Please study the following illustration which shows an example for this use case.
      </p>
      <br />
      <img src="DeliveryPluginOverview.gif" border="0" title="XmlBlaster communication plugin example" alt="Example how to use the dispatcher plugin" />
      <br />
      <p>
      On the left there are permanently published messages. They have different priorities, 
      most important messages are marked with <i>9</i> and nonrelevant ones with <i>0</i>.
      </p>
      <p>
      On the right hand side you see two remote connections, a high performing satellite
      connections which supports 2 MBit/sec, and an ISDN line with only 64 kBit/sec.
      When the satellite connection fails, the routing hardware switches to the fallback line
      with the limited band width. This change of bandwidth is published to xmlBlaster as a status
      message. The dispatcher plugin has subscribed to status changes and receives the status message
      that the line dropped to 64 kBit.
      </p>
      <p>
      Now have a look at the plugin configuration. When we are on backup line (64 kBit)
      it is configured to hold back all low priority messages, here the priorities <i>0</i> to <i>6</i> (inclusiv),
      and stuffs them into the existing xmlBlaster callback queue.<br />
      But the higher priority messages, here the priorities <i>7</i> to <i>9</i> (inclusiv),
      are still send over the backup line.
      <p>
      When the line is fine again, the router sends a status message which contains the '2M' state
      and our plugin switches to send all messages, including the hold back messages in the queue.
      </p>
      
      
      <h3>How to write my own plugin</h3>
      <p>
      As a plugin coder, you have to implement two interfaces
      </p>
      <ul>
         <li>I_Plugin: Which allows xmlBlaster to load the plugin</li>
         <li>I_MsgDeliveryInterceptor: Which forces you to implement some methods which allows you to control the message flow</li>
      </ul>
      This is simple and straight forward (see requirement delivery.plugin.priorizedDelivery).
      </p>
      <p>
      Note that this is only an example what you can do. The status message and priority configuration
      of the above example is specific for exactly this plugin.
      If you implement your own plugin, you can do whatever you like.
      The plugin intercepts the queue and the dispatcher framework and can manipulate
      anything which is in this scope. You could for example write a plugin
      which send messages at a contolled transfer rate (say 10 msg/sec or 4000 bytes/sec)
      or which opens an own queue and resorts the messages.
      </p>
      <p>
      For the above example exists an implementation which you can use or change
      to your needs, see the <i>PriorizedDeliveryPlugin</i> link below.
      </p>
   </description>
   <configuration where="server">

      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

         <tr>
            <td>DispatchPlugin[MyPlugin][1]</td>
            <td>com.xy.MyPlugin</td>
            <td>Register your plugin</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>DispatchPlugin[Another][1.0]</td>
            <td>com.xy.MySpecial</td>
            <td>Register your plugin</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>DispatchPlugin.defaultPlugin</td>
            <td>"MyPlugin,1" or "Another,1.0" or "undef"</td>
            <td>Specifiy the plugin to use as a default.<br />
                Default is <i>undef</i> that is no default plugin is loaded which is usually the correct setting:<br />
                The client normally chooses on login its desired plugin by specifying it in the connect QoS</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>
      <!-- p>
      For coding and configuration of plugins please read the
      requirement delivery.plugin.priorizedDelivery (see link below)
      </p -->
   </configuration>
   <see type="API">org.xmlBlaster.util.dispatch.plugins.I_MsgDeliveryInterceptor</see>
   <see type="API">org.xmlBlaster.util.dispatch.plugins.prio.PriorizedDeliveryPlugin</see>
   <see type="API">org.xmlBlaster.util.plugin.I_Plugin</see>
   <see type="REQ">delivery.plugin.priorizedDelivery</see>
   <see type="REQ">util.property.env</see>
   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 10 30</date>
   <revision>$Revision: 1.4 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.dispatch.ConfigurationParserTest</test>
   </testcase>
</requirement>

