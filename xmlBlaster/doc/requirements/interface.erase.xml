<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='interface.erase' type='NEW' prio='HIGH' status="CLOSED">
   <topic>Messages are deleted with the erase() method</topic>
   <description>
      <p>
      The <b>erase()</b> method allows to erase messages in xmlBlaster.
      </p>
      <p>
      Method detail (CORBA IDL notation):
      </p>
      <pre>
   typedef string XmlType;
   typedef sequence&lt;string> StringArr;

   StringArr erase(in XmlType xmlKey, in XmlType qos) raises(XmlBlasterException);
      </pre>

      <table border="1">
         <tr>
         <th>Parameter</th><th>Type</th><th>Description</th>
         </tr>
         <tr>
         <td>xmlKey</td><td>string</td><td>The XML encoded key containing the oid or XPATH query to select messages to erase</td>
         </tr>
         <tr>
         <td>xmlQos</td><td>string</td><td>The XML encoded Quality of Service (QoS)</td>
         </tr>
         <tr>
         <td>return</td><td>array of string</td><td>An array of XML encoded strings containing status and the deleted messages (see EraseReturnQos link below)</td>
         </tr>
         <tr>
         <td>XmlBlasterException</td><td>exception</td><td>Thrown on error</td>
         </tr>
      </table>
      <br />

      <p>
      Here is an overview of all available <b>erase QoS</b>:
      </p>
      <pre>
&lt;qos>
   &lt;!-- Kill a topic even if there are pending updates or subscriptions (default: false) -->
   &lt;erase forceDestroy='true'/>
&lt;/qos>
      </pre>
   </description>


   <example lang="XML" type="HTML">
      <p>
      Here is an example key and QoS with its default settings:
      </p>
      <table border="1">
         <tr><td>Key</td><td><code>&lt;key oid='MyTopic'/></code></td></tr>
         <tr><td>QoS</td><td><code>&lt;qos>
  &lt;erase forceDestroy='false'/>
&lt;/qos></code>
         </td></tr>
      </table>
      <p>
      And a return value:
    </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>
   &lt;state id='OK'/>
   &lt;key oid='MyTopic'/>
&lt;/qos>
   </pre>
   </td></tr></table>
      <p>
      Note that erasing a topic
      sends to all subscribers an update
      with the update QoS state id set to ERASED, see HelloWorld4.java as an example.<br />
      Constants.java defines the ERASED state and other states. This setting
      defaults to true. Here is a typical
      QoS markup received in the <code>update()</code> method:
      </p>
      <pre>
&lt;qos>
  &lt;state id='ERASED'/>
  &lt;sender>/node/heron/client/subby/3&lt;/sender>
  &lt;subscribe id='__subId:heron-7'/>
&lt;/qos>
      </pre>
      <p>
      A subscriber can decide to suppress those erase events with a specific <code>SubscribeQoS</code> setting.
      </p>
      <p>
      The <code>forceDestroy</code> setting influences the life cycle
      of messages in this topic, please have a look into the message state chart in the
      <a href="http://www.xmlblaster.org/xmlBlaster/doc/requirements/engine.message.lifecycle.html#messageLifecylce">
      engine.message.lifecycle</a> requirement. This setting defaults to false.
      </p>
   </example>

   <example lang="XML" type="HTML">
      <p>
      Here is an example erasing multiple topics identified by an XPath query:
      </p>
      <table border="1">
         <tr><td>Key</td><td><code>&lt;key queryType='XPATH'>//key&lt;/key></code></td></tr>
         <tr><td>QoS</td><td><code>&lt;qos>
  &lt;erase forceDestroy='true'/>
&lt;/qos></code>
         </td></tr>
      </table>
      <p>
      And a returned QoS array:
    </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>
   &lt;state id='OK'/>
   &lt;key oid='__sys__UserList'/>
   &lt;isErase/>
&lt;/qos>'
&lt;qos>
   &lt;state id='OK'/>
   &lt;key oid='__sys__Logout'/>
   &lt;isErase/>
&lt;/qos>'
&lt;qos>
   &lt;state id='OK'/>
   &lt;key oid='__sys__Login'/>
   &lt;isErase/>
&lt;/qos>'
&lt;qos>
   &lt;state id='OK'/>
   &lt;key oid='HelloWorld'/>
   &lt;isErase/>
&lt;/qos>'
   </pre>
   </td></tr></table>
   </example>

   <example lang="XmlRpc" type="HTML">
      <p>
      This is the XmlRpc server interface variant:
      </p>
      <pre>
   public Vector erase(String sessionId, String xmlKey_literal, String qos_literal)
                                                         throws XmlBlasterException
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code in Erase/Subscribe mode:
      </p>
      <pre>
   import org.xmlBlaster.client.key.SubscribeKey;
   import org.xmlBlaster.client.qos.*;
   ...

   EraseQos eq = new EraseQos(glob);

   EraseKey ek = new EraseKey(glob, "HelloWorld4");

   try {
      EraseReturnQos[] er = con.erase(ek.toXml(), eq.toXml());
   } catch(XmlBlasterException e) {
      e.printStackTrace();
   }
      </pre>
   <p>
   See xmlBlaster/demo/HelloWorld*.java for more examples.
   </p>
   </example>

   <configuration>
   </configuration>

   <see type="REQ">interface</see>
   <see type="REQ">engine.message.lifecycle</see>

   <see type="API">org.xmlBlaster.engine.xml2java.XmlKey</see>
   <see type="API">org.xmlBlaster.client.qos.EraseQos</see>
   <see type="API">org.xmlBlaster.client.qos.EraseReturnQos</see>
   <see type="API">org.xmlBlaster.client.I_XmlBlasterAccess</see>
   <see type="API">org.xmlBlaster.protocol.xmlrpc.XmlBlasterImpl</see>

   <see type="API">org.xmlBlaster.util.def.Constants</see>

   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 01</date>
   <revision>$Revision: 1.23 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>Tests the erase method invocation</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubXPathMany</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestErase</test>
      <test tool="SUITE">org.xmlBlaster.test.cluster.EraseTest</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.EraseReturnQosTest</test>
   </testcase>
</requirement>

