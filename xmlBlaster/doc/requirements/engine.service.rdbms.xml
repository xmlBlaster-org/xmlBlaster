<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='engine.service.rdbms' type='NEW' prio='LOW' status="CLOSED">
   <topic>
      XmlBlaster provides a framework to send SQL statements to arbitrary databases simultaneously
      and receive query results xml encoded.
   </topic>
   <description>
      <p>
      XmlBlaster has a native service allowing querying relational databases (RDBMS).
      Every xmlBlaster client can address this service with any valid SQL statement.
      If the SQL statement was a 'SELECT' the result set is delivered xml encoded.
      </p>
      <p>
      In the example section below we provide examples how to access Oracle and how
      to access dBase files from any xmlBlaster client.
      </p>
      <p>
      You need to setup the xmlBlaster JDBC driver in xmlBlaster.properties to use the RDBMS service.<br />
      First the xmlBlaster driver has to be activated (which is default):
      </p>
      <table border="1"><tr><td><pre>
ProtocolPlugin[JDBC][1.0]=org.xmlBlaster.protocol.jdbc.JdbcDriver
CbProtocolPlugin[JDBC][1.0]=org.xmlBlaster.protocol.jdbc.CallbackJdbcDriver
      </pre></td></tr></table>
      <p>
      Second, you have to activate the JDBC driver of your databases:
      </p>
      <table border="1"><tr><td><pre>
JdbcDriver.drivers=sun.jdbc.odbc.JdbcOdbcDriver,\
                   ORG.as220.tinySQL.dbfFileDriver,\
                   oracle.jdbc.driver.OracleDriver,\
                   org.gjt.mm.mysql.Driver,\
                   postgresql.Driver
      </pre></td></tr></table>
      <p>
      JdbcDriver.drivers is a comma delimited list of database drivers.
      Use as many as you like.
      The appropriate driver class files(jar) must be in your classpath.<br />
      Note that Sun's JDBC-ODBC bridge and tinySQL (a dBase driver) are activated as default.
      </p>
      <p>
      To test it we have provided a command line based demo client XmlDBClient
      in the directory xmlBlaster/demo/javaclients/jdbc<br />
      See the example below how to use it.
      </p>
      <p>
      Most exceptions are caught and returned in the appropriate xml message.
      </p>
      <p>
      To invoke the client, try something similar to the following:
      </p>
      <table border="1"><tr><td><pre>
java javaclients.jdbc.XmlDBClient \
   -url "jdbc:postgresql://24.3.47.214/postgres" \
   -user postgres \
   -pass secret \
   -type query \
   -query "select * from foo_table" \
   -limit 50 \
   -confirm true
      </pre></td></tr></table>
      <p>
      or to invoke an update:
      </p>
      <table border="1"><tr><td><pre>
java javaclients.jdbc.XmlDBClient \
   -url "jdbc:oracle:thin:@localhost:1521:MARCEL" \
   -user marcel \
   -pass secret \
   -type update \
   -query "INSERT INTO myTable VALUES( '1', to_date('0816', 'hh24mi'), 'james', 'START')"
      </pre></td></tr></table>
      <p>
      Options:
      </p>
      <table border="1"><tr><td><pre>
   -url (any valid JDBC url)
   -user (valid DB username)
   -pass (valid DB password)
   -query (any valid SQL syntax)
   -type (query|update) query by default - determines the interaction with db
   -confirm (true|false) true by default - when set to true, you get an answer
   -limit (any integer) 50 by default - used to limit the number of rows returned
      </pre></td></tr></table>
      <p>
      NOTE:
      </p>
      <ol>
         <li>If you are querying, set your -type to 'query'.</li>
         <li>If you are updating (insert, update, delete) set -type to 'update'.</li>
         <li>If you are updating and don't want a confirmation, set -confirm to 'false'.</li>
      </ol>
      <p>
      More examples are in xmlBlaster/demo/javaclients/jdbc
      </p>
      <p>
      If you want to do queries synchronously, for example if you
      don't want to establish a callback server in your client,
      see the example in
      </p>
      <table border="1"><tr><td><pre>
xmlBlaster/demo/javaclients/jdbc/XmlDBClientSync.java
      </pre></td></tr></table>
      <p>
      get() requests on key oid="__sys__jdbc" are handled by xmlBlaster (see RequestBroker.java)
      directly and the result set is delivered as the return value of the get() request.
      </p>
   </description>

   <example lang="any" type="HTML">
      <p>
      We demonstrate RDBMS access with a simple command line example,
      creating, inserting and querying a table 'cars'. Usually you wouldn't do
      this from command line but embed it into your xmlBlaster client. Each
      query is an xmlBlaster message sent.
      </p>
      <p>
      This example uses <a href="http://www.jepstone.net/tinySQL/" target="others"><b>tinySQL</b></a>,
      a <b>JDBC driver supporting dBase</b> file formats. It is delivered
      with xmlBlaster to allow regression tests of our JDBC plugin, so you can instantly
      try the following commands or query one of your dBase files:
      </p>

      <table border="1"><tr><td><pre>
java javaclients.jdbc.XmlDBClient -url "jdbc:dbfFile:." -user joe -type update \
      -query "CREATE TABLE cars (name CHAR(25), id NUMERIC(4,0))"

java javaclients.jdbc.XmlDBClient -url "jdbc:dbfFile:." -user joe -type update \
      -query "INSERT INTO cars (name, id) VALUES('Fiat', 1)"

java javaclients.jdbc.XmlDBClient -url "jdbc:dbfFile:." -user joe -type update \
      -query "INSERT INTO cars (name, id) VALUES('Jeep', 7)"

java javaclients.jdbc.XmlDBClient -url "jdbc:dbfFile:." -user joe -type query \
      -query "SELECT * from cars"

java javaclients.jdbc.XmlDBClient -url "jdbc:dbfFile:." -user joe -type query \
      -query "SELECT * from cars where id > 0"

java javaclients.jdbc.XmlDBClient -url "jdbc:dbfFile:." -user joe -type update \
      -query "DROP table cars"
      </pre></td></tr></table>

      <p>NOTE:</p>
      <ol>
        <li>
            The given user name is optional as tinySQL (dBase) does not support authentication, it is useful
            for nicer logging only.
        </li>
        <li>
            tinySQL can only access files on the host where xmlBlaster is running (it is
            no socket based JDBC driver).
        </li>
        <li>
            The given url <i>"jdbc:dbfFile:."</i> looks for or adds dBase files in the given directory ".", that is
            there where xmlBlaster was started. In the above example there will be created a dBase file
            <i>cars.DBF</i> in the directory where you started xmlBlaster.<br />
            You can pass any path on your local harddisk like
            <i>"jdbc:dbfFile:/home/marcel/test"</i> or <i>"jdbc:dbfFile:C:\testBlaster\db"</i><br />
            If you have a dBase file <i>C:\testBlaster\db\myData.DBF</i> you access it like
            <i>"jdbc:dbfFile:C:\testBlaster\db"</i> and <i>select * from myData</i>
        </li>
        <li>
            Using xmlBlaster it is possible to query dBase files remotely from any
            programming language like C/C++, Java, PHP, perl  etc.
        </li>
        <li>
            The query in the above example returns the cars entered formatted with XML.
        </li>
      </ol>
      <table border="1"><tr><td><pre>
&lt;?xml version="1.0" encoding="UTF-8"?>

&lt;dbadapterresults>
  &lt;desc>
    &lt;numcolumns>2&lt;/numcolumns>
    &lt;columnnames>
      &lt;column>name&lt;/column>
      &lt;column>id&lt;/column>
    &lt;/columnnames>
    &lt;rownum>2&lt;/rownum>
  &lt;/desc>
  &lt;results>
    &lt;row>
      &lt;name>
        Fiat
      &lt;/name>
      &lt;id>
        1
      &lt;/id>
    &lt;/row>
    &lt;row>
      &lt;name>
         Jeep
      &lt;/name>
      &lt;id>
        7
      &lt;/id>
    &lt;/row>
  &lt;/results>
&lt;/dbadapterresults>
      </pre></td></tr></table>
      <p>
      Note that the result values are encapsulated by CDATA sections (not shown here).
      </p>
   </example>

   <example lang="any" type="HTML">
      <p>
      We demonstrate RDBMS access with a simple command line example,
      creating, inserting and querying a table 'person' with <b>Oracle</b>:
      </p>

      <table border="1"><tr><td><pre>
java javaclients.jdbc.XmlDBClient \
   -url "jdbc:oracle:thin:@localhost:1521:MARCEL" -user mrf -pass mrf -type update \
   -query "CREATE TABLE person (name VARCHAR(32), age NUMBER)"

java javaclients.jdbc.XmlDBClient \
   -url "jdbc:oracle:thin:@localhost:1521:MARCEL" -user mrf -pass mrf -type update \
   -query "INSERT INTO person VALUES( 'Ben', '6' )"

java javaclients.jdbc.XmlDBClient \
   -url "jdbc:oracle:thin:@localhost:1521:MARCEL" -user mrf -pass mrf -type update \
   -query "INSERT INTO person VALUES( 'Tim', '8' )"

java javaclients.jdbc.XmlDBClient \
   -url "jdbc:oracle:thin:@localhost:1521:MARCEL" -user mrf -pass mrf -type update \
   -query "INSERT INTO person VALUES( 'Gesa', '10' )"

java javaclients.jdbc.XmlDBClient \
   -url "jdbc:oracle:thin:@localhost:1521:MARCEL" -user mrf -pass mrf \
   -query "SELECT * FROM person"
      </pre></td></tr></table>

      <p>
      The result looks like this:
      </p>

      <table border="1"><tr><td><pre>
   &lt;?xml version="1.0" encoding="UTF-8"?>
   &lt;dbadapterresults>
     &lt;desc>
       &lt;numcolumns>2&lt;/numcolumns>
       &lt;columnnames>
         &lt;column>NAME&lt;/column>
         &lt;column>AGE&lt;/column>
       &lt;/columnnames>
       &lt;rownum>3&lt;/rownum>
     &lt;/desc>
     &lt;results>
       &lt;row>
         &lt;NAME>
           Ben
         &lt;/NAME>
         &lt;AGE>
           6
         &lt;/AGE>
       &lt;/row>
       &lt;row>
         &lt;NAME>
           Tim
         &lt;/NAME>
         &lt;AGE>
           8
         &lt;/AGE>
       &lt;/row>
       &lt;row>
         &lt;NAME>
           Gesa
         &lt;/NAME>
         &lt;AGE>
           10
         &lt;/AGE>
       &lt;/row>
     &lt;/results>
   &lt;/dbadapterresults>
      </pre></td></tr></table>
      <p>
      Note that the result values are encapsulated by CDATA sections (not shown here).
      </p>
   </example>

   <example lang="any" type="HTML">
     <p>
        As default Sun's <b>JDBC-ODBC bridge</b> is activated so you can
        instantly access any ODBC database over xmlBlaster.
     </p>
   </example>

   <todo>
   INSERT and UPDATE are currently literally given, there should
   be a xml encoded variant allowing to use the Prepared statement.
   Binary data containing the CDATA end-token are not supported.
   </todo>
   <see type="REQ">engine.service.rdbms.jdbcpool</see>
   <see type="API">org.xmlBlaster.protocol.jdbc.JdbcDriver</see>
   <see type="API">org.xmlBlaster.protocol.jdbc.XmlDBAdapterWorker</see>
   <see type="API">javaclients.jdbc.XmlDBClient</see>
   <see type="OTHER">xmlBlaster/demo/javaclients/jdbc/README</see>
   <author>James Birchfield</author>
   <hacker>jmbirchfield@proteus-technologies.com</hacker>
   <effort></effort>
   <date>2000 05 06</date>
   <revision>$Revision: 1.12 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>A test i driven with the provided tinySql JDBC driver</comment>
      <test tool="SUITE">org.xmlBlaster.test.jdbc.TestJdbcAccess</test>
   </testcase>
</requirement>

