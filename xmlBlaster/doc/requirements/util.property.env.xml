<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='util.property.env' type='NEW' prio='LOW' status="INWORK">
   <topic>The xmlBlaster.properties file and command line configuration</topic>
   <description>
   <p>
      The <i>xmlBlaster.properties</i> file, <i>JVM environment (system properties)</i> and <i>command line</i>
      settings allows to customize
      the behavior of xmlBlaster and of xmlBlaster clients.<br />
      The option <i>-help</i> gives you an overview of the possibilities on
      server and on client side:
   </p>
   <pre>
java org.xmlBlaster.Main -help

java HelloWorld3 -help
   </pre>
   <p>
   Here are some examples:
   </p>
   <pre>
java org.xmlBlaster.Main -bootstrapPort 5600 -call[core] true

java HelloWorld3 -bootstrapHostname myServer -bootstrapPort 5600 -trace true
   </pre>
   <p>
   We force the server to listen on port 5600 and switch method call logging of the core
   components on. The client is configured to search for the server on host <i>myServer</i>
   on port <i>5600</i> and has switched trace logging on.
   </p>
   <p>The same could be done as Java virtual machine system properties:
   </p>
   <pre>
java -DbootstrapPort=5600 -Dcall[core]=true org.xmlBlaster.Main

java -DbootstrapHostname=myServer -DbootstrapPort=5600 -Dtrace=true HelloWorld3
  </pre>
   <p>Forcing for example generally the port to <i>5600</i> could be done in
   $HOME/xmlBlaster.properties like:
   </p>
   <pre>
bootstrapPort=5600
   </pre>
   <p>
   Note that we ommit the dash <i>-</i> in the property file.
   All properties from the file are usable on command line or as JVM settings and vice versa.
   </p>

   <h3>Precedence</h3>
   <table border="1">
   <tr>
     <th>Precedence</th>
     <th>Location</th>
     <th>Example</th>
     <th>Comment</th>
   </tr>
   <tr>
     <td>1 (highest)</td>
     <td>Code</td>
     <td>address.setBootstrapPort(6677)</td>
     <td>Setting properties explicitly in your code has highest precedence</td>
   </tr>
   <tr>
     <td>2</td>
     <td>Command line</td>
     <td>java HelloWorld3 -bootstrapPort 6677</td>
     <td>Setting properties on command line</td>
   </tr>
   <tr>
     <td>3</td>
     <td>JVM environment</td>
     <td>java -DbootstrapPort=6677 HelloWorld3</td>
     <td>Setting java virtual machine system properties</td>
   </tr>
   <tr>
     <td>4</td>
     <td>Property file</td>
     <td>bootstrapPort=6677</td>
     <td>Setting properties in xmlBlaster.properties. For the search
         precedence of this file see the requirement util.property</td>
   </tr>
   <tr>
     <td>5 (lowest)</td>
     <td>Default</td>
     <td>3412</td>
     <td>Every properties has a reasonable default setting</td>
    </tr>
   </table>
   <p>Every property can be specified more or less qualified which introduces
   further precedence levels in location 2, 3 and 4 of the above precedence locations:
   </p>
   <table border="1">
      <tr><th>Precedence sub-levels</th><th>Location</th><th>Comment</th></tr>
      <tr><td>1 (highest)</td><td>/node/heron/dispatch/callback/protocol</td><td>A fully qualified name</td></tr>
      <tr><td>2</td><td>dispatch/callback/protocol</td><td>Setting it for all cluster nodes</td></tr>
      <tr><td>3 (lowest)</td><td>protocol</td><td>Setting it generally to e.g. XMLRPC</td></tr>
   </table>
        
   <h3>Environment variables replacement</h3>
   <p>
   Any property you specify you can use as a variable in other properties,
   regardless of if they are from the property file or from command line or from the JVM environment.
   If you have recursion of properties referencing each others we give up
   at fifty nested levels. Examples for reuse of properties:
   </p>
   <pre>
MyHostname=server.com.universe

bootstrapHostname=${MyHostname}

plugin/xmlrpc/hostname=${MyHostname}

plugin/socket/hostname=${MyHostname}
   </pre>
   <p>
   All environment variable (e.g. ${java.io.tmpdir}="/tmp", ${file.separator}="/") can be used
   in the properties file or on command line and are replaced on occurrence:
   </p>
   <pre>
java org.xmlBlaster.Main -plugin/ior/iorFile '${file.separator}tmp${file.separator}Server.ior'
   </pre>
   <p>This dumps the CORBA IOR to the file <i>/tmp/Server.ior</i> on UNIX and to <i>\tmp\Server.ior</i>
      on Windows.
   </p>    
   <p>These are often helpful variables</p>
    <ul>
       <li>${user.dir} =   The current directory </li>
       <li>${user.home} =  The users home directory</li>
    </ul>
   <p>user.dir and user.home are without a path separator at the end.</p>

   </description>


   <example lang="Java" type="HTML">
   <p>
   The variables which you specify with ${...} will be replaced by their values.
   The variable may be from the System properties, xmlBlaster.properties or
   from the command line.
   </p>
   <pre>
For example you could define a variable in xmlBlaster.properties:

        XMLBLASTER_HOME=${user.home}/xmlBlaster

and use it as a variable in this file, e.g.

        MY_XSL_DIR=${XMLBLASTER_HOME}/xsl

Note the use of the JVM property 'user.home'.

Another example could be

        java -DmyName=joe ...

and use it as a variable in this file, e.g.

        TEXT=Hello ${myName}, have a nice day.
   </pre>
   </example>

   <todo type="HTML">
   <ol>
      <li>
      We need to port all properties to the new hierarchical syntax like 'dispatch/connection/plugin/rmi/port'
      </li>
      <li>
      We need to consolidate the naming of the properties with the XML markup
      in requirements <i>admin.commands</i> and <i>client.configuration</i>.
      </li>
   </ol>
   </todo>
   <see type="REQ">util.property</see>
   <see type="REQ">admin.commands</see>
   <see type="REQ">client.configuration</see>
   <see type="API">org.xmlBlaster.util.property.PropEntry</see>
   <author>xmlBlaster@marcelruff.info</author>
   <date>2000 03 14</date>
   <revision>$Revision: 1.16 $</revision>
   <testcase status="CLOSED">
      <name>xmlBlaster@marcelruff.info</name>
      <comment>
      The property file is used everywhere in the xmlBlaster code.
      This feature is only tested implicitly.
      </comment>
      <test tool="SUITE">org.xmlBlaster.test.AllTests</test>
   </testcase>
</requirement>

