<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='protocol' type='NEW' prio='LOW' status="CLOSED">
   <topic>
      XmlBlaster provides a framework to plugin drivers for new protocols to access
      xmlBlaster, and for drivers to callback to clients.
   </topic>
   <description>
      <p>
      The protocol to access xmlBlaster and the protocol to callback a client
      are totally decoupled. You can for example access xmlBlaster using CORBA and callback
      to clients using email and http.
      </p>
      <p>
      All xmlBlaster access is handled using three interfaces in the package
      <code>org.xmlBlaster.protocol</code>:
      </p>
      <ul>
         <li>
         I_XmlBlaster: This is the only way to access the xmlBlaster core.
         Your new driver needs to access xmlBlaster by invoking these methods.<br />
         I_XmlBlaster is implemented by a singleton XmlBlasterImpl, the invocations are
         checked there by the authentication server, allowing
         to do all security handling in one place.<br />
         I_XmlBlaster has methods to pass the XmlKey and QoS as objects and not
         as literal xml ASCII string, for maximum performing native calls.
         </li>
         <li>
         I_Driver: If you want to support a new protocol to access xmlBlaster
         you need to implement this interface.<br />
         As an example have a look into CorbaDriver.java.
         </li>
         <li>
         I_CallbackDriver: If you want to plug in a new protocol to callback
         to a client (for example with email), you need to implement this interface.<br />
         For an example study CallbackCorbaDriver.java
         </li>
      </ul>
      <p>
      Once you have implemented a new protocol driver, you need to add it
      to xmlBlaster.properties, it is then loaded automatically on the next
      xmlBlaster startup:
      </p>
      <p>
      Example entry to xmlBlaster.properties for Corba, RMI and XML-RPC etc. drivers:
      </p>
     <table border="1"><tr><td><pre>
ProtocolPlugin[IOR][1.0]=org.xmlBlaster.protocol.corba.CorbaDriver
CbProtocolPlugin[IOR][1.0]=org.xmlBlaster.protocol.corba.CallbackCorbaDriver

ProtocolPlugin[SOCKET][1.0]=org.xmlBlaster.protocol.socket.SocketDriver
CbProtocolPlugin[SOCKET][1.0]=org.xmlBlaster.protocol.socket.CallbackSocketDriver

ProtocolPlugin[RMI][1.0]=org.xmlBlaster.protocol.rmi.RmiDriver
CbProtocolPlugin[RMI][1.0]=org.xmlBlaster.protocol.rmi.CallbackRmiDriver

ProtocolPlugin[XML-RPC][1.0]=org.xmlBlaster.protocol.xmlrpc.XmlRpcDriver
CbProtocolPlugin[XML-RPC][1.0]=org.xmlBlaster.protocol.xmlrpc.CallbackXmlRpcDriver

ProtocolPlugin[JDBC][1.0]=org.xmlBlaster.protocol.jdbc.JdbcDriver
CbProtocolPlugin[JDBC][1.0]=org.xmlBlaster.protocol.jdbc.CallbackJdbcDriver

ProtocolPlugin[SOAP][1.0]=org.xmlBlaster.protocol.soap.SoapDriver
CbProtocolPlugin[SOAP][1.0]=org.xmlBlaster.protocol.soap.CallbackSoapDriver

CbProtocolPlugin[EMAIL][1.0]=org.xmlBlaster.protocol.email.CallbackEmailDriver

ProtocolPlugin[NativeDemo][NATIVE]=org.xmlBlaster.protocol.nativ.NativeDriver
CbProtocolPlugin[NativeDemo][NATIVE]=org.xmlBlaster.protocol.nativ.CallbackNativeDriver
     </pre></td></tr></table>
      <p>
      The callback driver protocol type for RMI is called "RMI"
      for XmlRpc "XML-RPC"
      and the Corba driver protocol is called "IOR".<br />
      This string is used when you do your login in the qos to specify
      your callback wishes.<br />
      See requirement 'engine.qos.login.callback' for further directions.
      </p>
   </description>
   <configuration where="server">
      <table border="1">
         <tr>
            <td>Property</td>
            <td>Default / Example</td>
            <td>Description</td>
            <td>Implemented</td>
         </tr>
         <tr>
            <td>ProtocolPlugin[type][version]</td>
            <td>The class name</td>
            <td>Allows to register a protocol driver</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>CbProtocolPlugin[type][version]</td>
            <td>The class name</td>
            <td>Allows to register a protocol driver to callback the client</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>
   </configuration>
   <todo>
   </todo>
   <see type="REQ">protocol.socket</see>
   <see type="REQ">engine.qos.login.callback</see>
   <see type="API">org.xmlBlaster.protocol.I_XmlBlaster</see>
   <see type="API">org.xmlBlaster.protocol.I_Driver</see>
   <see type="API">org.xmlBlaster.protocol.I_CallbackDriver</see>
   <author>ruff@swand.lake.de</author>
   <hacker>ruff@swand.lake.de</hacker>
   <effort>4</effort>
   <date>2000 06 06</date>
   <revision>$Revision: 1.6 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>This is tested implicit by all testsuite tests</comment>
      <test tool="SUITE">testsuite.org.xmlBlaster.TestAll</test>
   </testcase>
</requirement>

