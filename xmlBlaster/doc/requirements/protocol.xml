<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='protocol' type='NEW' prio='LOW' status="CLOSED">
   <topic>
      XmlBlaster provides a framework to plugin drivers for new protocols to access
      xmlBlaster, and for drivers to callback to clients.
   </topic>
   <description>
      <p>
      The protocol to access xmlBlaster and the protocol to callback a client
      are totally decoupled. You can for example access xmlBlaster using CORBA and callback
      to clients using email and http.
      </p>
      <p>
      All xmlBlaster access is handled using three interfaces in the package
      <code>org.xmlBlaster.protocol</code>:
      </p>
      <ul>
         <li>
         I_XmlBlaster: This is the only way to access the xmlBlaster core.
         Your new driver needs to access xmlBlaster by invoking these methods.<br />
         I_XmlBlaster is implemented by a singleton XmlBlasterImpl, the invocations are
         checked there by the authentication server, allowing
         to do all security handling in one place.<br />
         I_XmlBlaster has methods to pass the XmlKey and QoS as objects and not
         as literal xml ASCII string, for maximum performing native calls.
         </li>
         <li>
         I_Driver: If you want to support a new protocol to access xmlBlaster
         you need to implement this interface.<br />
         As an example have a look into CorbaDriver.java.
         </li>
         <li>
         I_CallbackDriver: If you want to plug in a new protocol to callback
         to a client (for example with email), you need to implement this interface.<br />
         For an example study CallbackCorbaDriver.java
         </li>
      </ul>
      <p>
      Once you have implemented a new protocol driver, you need to add it
      to xmlBlasterPlugins.xml, it is then automatically loaded on next
      xmlBlaster startup:
      </p>
      <p>
      Example entry to xmlBlasterPlugins.xml for Corba, RMI and XML-RPC etc. drivers:
      </p>
     <table border="1"><tr><td><pre>
   &lt;plugin id='protocol:SOCKET' className='org.xmlBlaster.protocol.socket.SocketDriver'>
      &lt;action do='LOAD' onStartupRunlevel='3' sequence='1' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='2' sequence='5'/>   
   &lt;/plugin>

   &lt;plugin id='protocol:IOR' className='org.xmlBlaster.protocol.corba.CorbaDriver'>
      &lt;action do='LOAD' onStartupRunlevel='3' sequence='2'
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='2' sequence='4'/>   
   &lt;/plugin>

   &lt;plugin id='protocol:XML-RPC' className='org.xmlBlaster.protocol.xmlrpc.XmlRpcDriver'>
      &lt;action do='LOAD' onStartupRunlevel='3' sequence='3'/> 
      &lt;action do='STOP' onShutdownRunlevel='2' sequence='3'/>   
   &lt;/plugin>

   &lt;plugin id='protocol:RMI' className='org.xmlBlaster.protocol.rmi.RmiDriver'>
      &lt;action do='LOAD' onStartupRunlevel='3' sequence='4' />
      &lt;action do='STOP' onShutdownRunlevel='2' sequence='2'/>   
   &lt;/plugin>
     </pre></td></tr></table>
      <p>
      The callback driver protocol type for RMI is called "RMI"
      for XmlRpc "XML-RPC"
      the Corba driver protocol is called "IOR" and finally
      "SOCKET" is our native socket based protocol.<br />
      This string is used when you do your login in the qos to specify
      your callback wishes.<br />
      See requirement 'engine.qos.login.callback' for further directions.
      </p>
   </description>
   <configuration where="server">
      <!--table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>
      </table-->
   </configuration>
   <todo>
   </todo>
   <see type="REQ">engine.runlevel</see>
   <see type="REQ">protocol.socket</see>
   <see type="REQ">engine.qos.login.callback</see>
   <see type="API">org.xmlBlaster.protocol.I_XmlBlaster</see>
   <see type="API">org.xmlBlaster.protocol.I_Driver</see>
   <see type="API">org.xmlBlaster.protocol.I_CallbackDriver</see>
   <author>xmlBlaster@marcelruff.info</author>
   <hacker>xmlBlaster@marcelruff.info</hacker>
   <effort>4</effort>
   <date>2000 06 06</date>
   <revision>$Revision: 1.11 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>This is tested implicit by all testsuite tests</comment>
      <test tool="SUITE">org.xmlBlaster.test.AllTests</test>
   </testcase>
</requirement>

