<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">


<requirement id='client.cpp.compile' type='NEW' prio='HIGH' status='CLOSED'>
   <topic>
      In order to build and run c++ clients, several preconditions need to be fulfilled.
   </topic>
   <description>
     <p>You can use the <a href="http://ant.apache.org/" target="others">ant</a> tool with
     the C++ compile extension <a href="http://sourceforge.net/projects/ant-contrib/" target="others">cpptasks</a>
     to compile the xmlBlaster client C++ library, the C++ demo clients and the C++ testsuite.
     All necessary compile tools are provide in the xmlBlaster distribution.
     </p>
     <p>The rules to compile C++ code with ant are in the file xmlBlaster/build.xml which
     loads your configuration settings (like the installation path of your CORBA library or XML parser)
     from build.properties. See the configuration example below how to set up build.properties.
     </p>
     <p>
     The cpptasks support many compilers on many platforms (like OS 390/400, SUN, HP, IBM, g++, intel, borland, VC++),
     our build.xml is tested currently on Linux and Windows.
     If you use an exotic platform please check cpptasks if this is supported
     and extend build.xml to your needs (feedback is welcome).
     </p>
     <p>
     Cory has added autoconf support but currently this support is outdated and
     needs reanimation, see <a href="http://www.xmlBlaster.org/xmlBlaster/config/README.autoconf">xmlBlaster/config/README.autoconf</a>.
     </p>
     <p>
     You may as well compile the client library with any other compile tool like
     jam, but currently there is no such support in the xmlBlaster distribution.
     </p>

     <p>To use the C++ client library several libraries are needed.
        <ul>
           <li>thread library: BOOST or OMNITHREAD</li>
           <li>XML parser library (currently only apache's xerces-c is supported)</li>
           <li>CORBA library (MICO, TAO, OMNIORB, ORBACUS and ORBIX are supported)</li>
        </ul>
     </p>
     <p/>
     <b>The C++ threading abstraction library</b>
        <p>In order to have multi threading support on all different operating systems
        we can link with the <a href="http://www.boost.org" target="others">boost</a> C++ multi threading
        library or with the <a href="http://omniorb.sourceforge.net/" target="others">omniORB - omnithreads</a>
        multi threading library. Both support many platforms like Linux, Windows, Solaris, AIX, HPUX, MAC etc.
        </p>
        <p>
        Both libraries have a free license and the necessary code fragments of both are provided in the
        xmlBlaster distribution, so you don't need to download anything.
        </p>
        <p>
        The default library used is omnithread but can be switched to boost with an entry in build.properties:
        </p>
        <pre>
   thread.impl=BOOST
        </pre>
        <p>You may want to switch to use omnithreads if you have compilation problems with boost on your OS (like e.g. Solaris).
        </p>
        <p>In the build.properties there are two parameters which tell ant where to find the sources and
           the includes for the thread library. If you use the default don't make any change. If you use an
           external boost, then you can point to its thread sources with the variable THREADS_SRC and to the
           includes with THREADS_INC.
         </p>

     <p><b>XERCES-C</b><br/>
        You can download the xerces-c library from <a href="http://xml.apache.org/xerces-c/index.html">
        apache's homepage</a>. Please follow their instructions on how to install/build the xerces 
        library for your platform. <b>The versions tested are 1.1.7, 2.1.0 and 2.2.0 (probably any xerces version will do)</b>.
        <br/>
        Now, when building with ant, the xerces-c library will be used. In build.properties make sure that
        the $XMLCPP_VER is set correctly (see examples there) and that the link to the directory for xerces is correct.
        The XMLCPP_VER setting is used only to create the correct library name as generated by the xerces build process.
     </p>
     <p/>
     
     <b>CORBA</b><br/>
     <b>MICO</b><br/>
     If want to use MICO as the corba implementation you can download it from 
     <a href="http://www.mico.org">the mico homepage</a>. On how to install and build MICO please
     follow as usual the instructions given there. Once it is installed, open the file
     build.properties in the $XMBLASTER_HOME directory. There you must adjust <br/>
     <ul>
        <li>corba.product</li>
        <li>CORBACPP_HOME</li>
        <li>CORBACPP_VER</li>
     </ul>
     to the correct values. 
     <br/>
     <b>TAO</b><br/>
     <p>
     If you want to use TAO please follow the <a href="client.cpp.tao.html">specific TAO requirement</a>
     </p>
   </description>

   <configuration where="client">
   <p>
   Take a copy from xmlBlaster/build.properties to ${user.home}/build.properties and
   edit it to find the installation directory of the CORBA lib and XERCES lib.
   </p>
<pre>
#------------------------------------------------------------------------------
# C++ UNIX example with ACE+TAO 1.3 and xerces 2.2 using g++ 3.2
#XMLCPP_HOME   = /opt/xerces-c-src2_2_0-bin
#XMLCPP_VER    = 
#corba.product = TAO
#CORBACPP_HOME = /opt/ACE_wrappers/TAO
#CORBACPP_VER  = 
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Unix/Linux example with mico 2.3.7 and xerces 2.2 and forcing omnithreads
XMLCPP_HOME   = /usr/local/xerces-c
XMLCPP_VER    = 
CORBACPP_HOME = /usr/local/mico
corba.product = MICO
CORBACPP_VER  = 2.3.7
thread.impl   = OMNITHREAD
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Windows example with ACE+TAO 1.3 and xerces 2.2 using VC++ 7
#use-msvc      = 1
#XMLCPP_HOME   = C:/Dev/xerces-c2_2_0-win32
#XMLCPP_VER    = _2
#corba.product = TAO
#CORBACPP_HOME = C:/Dev/ACE_wrappers/TAO
#idl.cmd       = C:/Dev/ACE_wrappers/bin/tao_idl.exe
#CORBACPP_VER  = 
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Windows example with mico 2.3.8 and xerces 2.2 using VC++ 7
#use-msvc      = 1
#XMLCPP_HOME   = C:/Dev/xerces-c2_2_0-win32
#XMLCPP_VER    = _2
#CORBACPP_HOME = C:/Dev/mico
#corba.product = MICO
#idl.cmd       = ${CORBACPP_HOME}/win32-bin/idl
#CORBACPP_VER  = 238
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Usage help:
#
# corba.product = MICO   (Choose one of MICO, TAO)
#
#  Note: The code supports one of OMNIORB, ORBACUS, MICO, TAO, ORBIX
#   but the build.xml compile script currently only supports MICO or TAO
#   Extend src/c++/client/protocol/corba/CompatibleCorba.h for another ORB
#
# XMLCPP_VER    = "" or _2D  (you need xerces 2.2 or above)
#   Windows e.g.  xerces-c_2.lib or xerces-c_2D.lib
#   Linux e.g.    libxerces-c.so.22.0
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Note for Windows: You need to add the path to mico/bin/idl.exe
# to your PATH environment
#------------------------------------------------------------------------------
</pre>
   </configuration>

   <see type="REQ">client.cpp</see>
   <see type="REQ">client.cpp.tao</see>

<!--   <see type="REQ">cluster</see> -->
   <author><a href="mailto:laghi@swissinfo.org">Michele Laghi</a></author>
   <date>2003 01 07</date>
   <revision>$Revision: 1.8 $</revision>
</requirement>

