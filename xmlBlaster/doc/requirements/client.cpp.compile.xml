<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">


<requirement id='client.cpp.compile' type='NEW' prio='HIGH' status='CLOSED'>
   <topic>
      In order to build and run c++ clients, several preconditions need to be fulfilled.
   </topic>
   <description>
     <h2>Overview</h2>
     <p>You can use the <b><a href="http://ant.apache.org/" target="others">ant tool</a></b> with
     the C++ compile extension <b><a href="http://ant-contrib.sourceforge.net/cc.html" target="others">cpptasks</a></b>
     to compile the xmlBlaster client C++ library, the C++ demo clients and the C++ testsuite.
     All necessary compile tools are provide in the xmlBlaster distribution.
     </p>
     <p>The rules to compile C++ code with ant are in the file <b>xmlBlaster/build.xml</b> which
     loads your configuration settings (like the installation path of your CORBA library or XML parser)
     from <b>build.properties</b>. See the configuration example below how to set up build.properties.
     </p>
     <p>
     The cpptasks support many compilers on many platforms (like OS 390/400, SUN, HP, IBM, g++, Intel icc, borland, VC++),
     our build.xml is tested currently on Linux and Windows.
     If you use an exotic platform please check cpptasks if this is supported
     and extend build.xml to your needs (feedback is welcome).
     </p>
     <p>
     Cory has added autoconf support but currently this support is outdated and
     needs reanimation, see <a href="http://www.xmlBlaster.org/xmlBlaster/config/README.autoconf">xmlBlaster/config/README.autoconf</a>.
     </p>
     <p>
     You may as well compile the client library with any other compile tool like
     jam, but currently there is no such support in the xmlBlaster distribution.
     </p>

     <p>To use the C++ client library several libraries are needed.
        <ul>
           <li>thread library: BOOST or OMNITHREAD (both delivered in the xmlBlaster distribution)</li>
           <li>XML parser library (currently only apache's xerces-c is supported, download separately)</li>
           <li>CORBA library (MICO, TAO, OMNIORB, ORBACUS and ORBIX are supported)<br />
               or the SOCKET library (the latter is delivered in the xmlBlaster distribution)</li>
           <li>logging library. We provide a simple, colorful default logging and
               additionally the sophisticated log4cplus logging library
                (both in the xmlBlaster distribution).
                See requirement <i>client.cpp.logging</i> for details.
           </li>
        </ul>
     </p>
     <p/>

     <h2>The C++ threading abstraction library</h2>
        <b>Note: The omnithread library is included in the xmlBlaster distribution
        and is automatically compiled with our <code>xmlBlaster/build</code> task. For details how
        to switch the threading library please read the next paragraphs.
        </b>
        <p>In order to have multi threading support on all different operating systems
        we can link with the <b><a href="http://www.boost.org" target="others">boost</a> C++ multi threading
        library</b> or with the <b><a href="http://omniorb.sourceforge.net/" target="others">omniORB - omnithreads</a></b>
        multi threading library. Both support many platforms like Linux, Windows, Solaris, AIX, HPUX, MAC etc.
        </p>
        <p>
        Both libraries have a free license and the necessary code fragments of both are provided in the
        xmlBlaster distribution, so you don't need to download anything.
        </p>
        <p>
        The default library used is omnithread but can be switched to boost with an entry in build.properties:
        </p>
        <pre>
   thread.impl=BOOST
        </pre>
        <p>You may want to switch to use omnithreads if you have compilation problems with boost on your OS (like e.g. Solaris).
        </p>
        <p>In the build.properties there are two parameters which tell ant where to find the sources and
           the includes for the thread library. If you use the default don't make any change. If you use an
           external boost, then you can point to its thread sources with the variable THREADS_SRC and to the
           includes with THREADS_INC.
         </p>

     <h2>The XML library</h2>
     <p>
        You can download the xerces-c library from <a href="http://xml.apache.org/xerces-c/index.html">
        apache's homepage</a>. Please follow their instructions on how to install/build the xerces 
        library for your platform. <b>The versions tested are 2.6.0 (you need a version > 2.4 because of the used codeset,
        on this is a problem you can comment out some code snippets to be backward compatible to 1.x)</b>.
        <br/>
        Now, when building with ant, the xerces-c library will be used. In build.properties make sure that
        the $XMLCPP_VER is set correctly (see examples there) and that the link to the directory for xerces is correct.
        The XMLCPP_VER setting is used only to create the correct library name as generated by the xerces build process.
     </p>
     
     <h2>The CORBA library</h2>
     <b>MICO</b><br/>
     If want to use MICO as the corba implementation you can download it from 
     <a href="http://www.mico.org">the mico homepage</a>. On how to install and build MICO please
     follow as usual the instructions given there. Once it is installed, open the file
     build.properties in the $XMBLASTER_HOME directory. There you must adjust <br/>
     <ul>
        <li>corba.product</li>
        <li>CORBACPP_HOME</li>
        <li>CORBACPP_VER</li>
     </ul>
     to the correct values. 
     <br/>
     <b>TAO</b><br/>
     <p>
     If you want to use TAO please follow the <a href="client.cpp.tao.html">specific TAO requirement</a>
     </p>

     <h2>The compression library zlib</h2>
     <p>
        Optionally you can link this xmlBlaster C++ client library to the zlib compression library.
        You need to download zlib yourself at http://www.gzip.org/zlib/.
        Please choose version 1.2.1 or newer, the older version 1.1.4 does not seem to work properly in stream mode.
     </p>
     <p>The compression rate is impressive, see
     <a href="http://www.xmlblaster.org/xmlBlaster/doc/requirements/protocol.socket.html#compress" target="req">protocol.socket</a>
     and
     <a href="http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.c.queue.html" target="req">client.c.queue</a>
     </p>
     <p>You need to adjust in <i>build.properties</i> following settings:
     </p>
     <ul>
       <li>zlib.include.dir is the path to "zlib.h"</li>
       <li>zlib.lib.dir is on Unix the path to the shared library libz.so and
           on Windows to zlib.dll and zlib.lib (for compilation)</li>
     </ul>
     <p>This settings usually works on a Windows box:</p>
     <pre>
-> Entry in build.properties:
XMLBLASTER_ZLIB=1
zlib.include.dir=C:/zlib/include
zlib.lib.dir=C:/zlib
zlib.lib.name=zlib1

-> Directory listing of C:\zlib (zlib1.lib is a copy of lib\zdll.lib)
include
lib
README.txt
test
USAGE.txt
zlib1.dll
zlib1.lib
      </pre>

     <p>As many zlib versions may fly around on your PC you can add a zlib name
     which contains all references for statical linkage (e.g. zlib.lib on Windows), example:</p>
     <pre>
XMLBLASTER_ZLIB=1
zlib.include.dir=/opt/zlib-bin/include
zlib.lib.dir=/opt/zlib-bin/lib
# On Windows you have to choose the name, usually 'zlib' or 'zlib1' (defaults to 'z' for UNIX):
#zlib.lib.name=zlib
</pre>

     <h2>Example command line settings for Windows</h2>
<pre>
REM Visual C++ 2005 Express Edition Beta 2
REM C and C++

REM ========== Global env settings ======
set JAVA_HOME=C:\PROGRA~1\Java\JDK15~2.0_0
set XMLBLASTER_HOME=C:\xmlBlaster
set CLASSPATH=%XMLBLASTER_HOME%\lib\xmlBlaster.jar

REM ========== C/C++ compilation ========
set PATH=%PATH%;C:\PROGRA~1\MICROS~4\Common7\IDE;C:\PROGRA~1\MICROS~4\VC\bin
set PATH=%PATH%;%XMLBLASTER_HOME%\lib;%XMLBLASTER_HOME%\bin;
set PATH=%PATH%;%XMLBLASTER_HOME%\demo\c\socket\bin;%XMLBLASTER_HOME%\demo\c++\bin

REM stdio.h and Winsock2.h (C:\Program Files\Microsoft Platform SDK)
set INCLUDE=%INCLUDE%;C:\PROGRA~1\MICROS~2\Include

REM uuid.lib (C:\Program Files\Microsoft Platform SDK\Lib)
set lib=%lib%;C:\PROGRA~1\MICROS~2\lib

REM ========== C++ runtime ========
REM C++ only: xerces-c_2_6D.dll (from C:\xerces-c_2_6_0-windows_nt-msvc_60)
set PATH=%PATH%;C:\xerces-c_2_6_0-windows_nt-msvc_60\bin

REM C++ with debug only: MSVCRTD.dll  (where from???)
</pre>


     <h2>The compilation step</h2>
     <p>
     After adjusting build.properties as described you can compile like this:
     </p>
<pre>
  cd xmlBlaster

  build  cpp

Get help with

  build  usage

Supported tasks are
  cpp-lib     --> generates C++ libxmlBlasterClient.sl (shared library .so .sl .dll)
                  Check build.properties settings for C++ CORBA and C++ XML libraries
  cpp-test    --> generates C++ test clients
  cpp-demo    --> generates C++ demo clients
  cpp         --> builds cpp-lib, cpp-test and cpp-demo
  cpp-clean   --> cleans up C++ generated files (object files, corba files etc)
  cpp-delete  --> like 'cpp-clean', but delete shared library and C++ test clients as well

</pre>
  You can later check the shared libraries used like this:
<pre>
  tasklist /M        (Windows DOS box)
  ldd PublishDemo    (Linux, Solaris)
</pre>
   </description>

   <configuration where="client">
   <p>
   Take a copy from xmlBlaster/build.properties to ${user.home}/build.properties and
   edit it to find the installation directory of the CORBA lib and XERCES lib.
   </p>
<pre>
#------------------------------------------------------------------------------
# C++ UNIX example with ACE+TAO 1.3 and xerces 2.2 using g++ 3.2
#XMLCPP_HOME   = /opt/xerces-c-src2_2_0-bin
#XMLCPP_VER    = 
#corba.product = TAO
#CORBACPP_HOME = /opt/ACE_wrappers/TAO
#CORBACPP_VER  = 
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Unix/Linux example with mico 2.3.7 and xerces 2.2 and forcing omnithreads
XMLCPP_HOME   = /usr/local/xerces-c
XMLCPP_VER    = 
CORBACPP_HOME = /usr/local/mico
corba.product = MICO
CORBACPP_VER  = 2.3.7
thread.impl   = OMNITHREAD
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Windows example with ACE+TAO 1.3 and xerces 2.2 using VC++ 7 and boost
#use-msvc      = 1
#XMLCPP_HOME   = C:/Dev/xerces-c2_2_0-win32
#XMLCPP_VER    = _2
#corba.product = TAO
#CORBACPP_HOME = C:/Dev/ACE_wrappers/TAO
#idl.cmd       = C:/Dev/ACE_wrappers/bin/tao_idl.exe
#CORBACPP_VER  = 
#thread.impl   = BOOST
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Windows example with mico 2.3.8 and xerces 2.2 using VC++ 7
#use-msvc      = 1
#XMLCPP_HOME   = C:/Dev/xerces-c2_2_0-win32
#XMLCPP_VER    = _2
#CORBACPP_HOME = C:/Dev/mico
#corba.product = MICO
#idl.cmd       = ${CORBACPP_HOME}/win32-bin/idl
#CORBACPP_VER  = 238
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Usage help:
#
# corba.product = MICO   (Choose one of MICO, TAO)
#
#  Note: The code supports one of OMNIORB, ORBACUS, MICO, TAO, ORBIX
#   but the build.xml compile script currently only supports MICO or TAO
#   Extend src/c++/client/protocol/corba/CompatibleCorba.h for another ORB
#
# XMLCPP_VER    = 1_ or _2D     (Windows)
# XMLCPP_VER    = 1_7_0         (UNIX: and xerces smaller version 2)
# XMLCPP_VER    =               (UNIX: empty for xerces >= 2, e.g. for 2.2)
#   Windows e.g.  xerces-c_2.lib or xerces-c_2D.lib
#   Linux and Xerces below 2.0 e.g. libxerces-c1_7_0.so
#   Linux and Xerces >= 2.0 e.g.    libxerces-c.so.22.0
#
# thread.impl   = OMNITHREAD | BOOST
#   The default is to link with the omniORB multi threading library.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Note for Windows: You need to add the path to mico/bin/idl.exe
# to your PATH environment
#------------------------------------------------------------------------------
</pre>

   <h3>Debugging with Purify</h3>
   <p>
   If you want to check the C++ client library on your platform with Purify you
   can try this approach (the example is for Solaris using the CC compiler):
   </p>
   <p>First we rename the CC command to CC.ORIG and replace the CC command by
    a shell script which inserts purify:
   </p>
<pre>
#!/bin/sh

#
# Purify cannot produce shared objects.
# build -DCPP_LINK=static -verbose cpp > build.log
#

PATH=$PATH:/opt/rational/releases/PurifyPlusFamily.2003.06.00/sun4_solaris2/bin
export PATH

PUREOPTIONS=-cache-dir=/tmp/cache
export PUREOPTIONS

purify CC.ORIG $*
</pre>
   <p>
   Now we are ready to compile the code with purify:
   </p>
<pre>
build -DCPP_LINK=static -DPURIFY=PURIFY -verbose cpp > build.log
</pre>
   </configuration>

   <see type="REQ">client.cpp</see>
   <see type="REQ">client.cpp.logging</see>
   <see type="REQ">client.cpp.tao</see>

<!--   <see type="REQ">cluster</see> -->
   <author><a href="mailto:laghi@swissinfo.org">Michele Laghi</a></author>
   <date>2003 01 07</date>
   <revision>$Revision: 1.19 $</revision>
</requirement>

