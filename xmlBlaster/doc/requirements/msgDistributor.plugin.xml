<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='msgDistributor.plugin' type='NEW' prio='LOW' status='OPEN'>
   <topic>XmlBlaster has a plugin interface which allows to control the distribution of published
          messages to subscribers</topic>
   <description>
      <p>
      It is possible to let a plugin handle the distribution of published messages.
      The normal behavior is that all client-sessions subscribing to a certain topic will get all 
      updates of that topic. This covers a wide range of use cases but sometimes it is just too 
      limiting.
      </p>
      <p>
      Suppose you want to ensure that a published message is consumed only once. That could be done by
      sending a PtP message to a client (by specifying his session to avoid double dispatch) and 
      setting the message as volatile. Great but this implies that the publisher knows the address of the 
      client. What if the destination has to be anonymous, i.e. if everybody is allowed to consume that 
      message (without the knowledge of the producer) as it would be the case of JMS queues ? 
      </p>
      <p>Suppose a load balancer is required where messages of the same topic have to be distributed
         <i>intelligently</i> among clients (for example by giving the current message to the client
	 having the lowest cpu consumption at the moment)
      </p>
      <p>The mentioned cases are just a few of all potential exotic wishes of the users. A good approach
         is to avoid to hard code such cases and make a plugin instead. This way the user gets the 
	 freedom she/he needs.
      </p>
      <p>The plugin acts on the distribution of the published message to the subscribers. There is a 
      maximum of one plugin instance per TopicHandler instance.</p>
      
      <h3>How to write my own plugin</h3>
      <p>
      As a plugin coder, you have to implement two interfaces
      </p>
      <ul>
         <li>I_Plugin: Which allows xmlBlaster to load the plugin</li>
         <li>I_MsgDistributor: Which forces you to implement some methods allowing you to control the 
	     message flow, i.e. which addresses deserve the message and if/when/how the message 
	     should be removed from the history queue.</li>
      </ul>
      <p>
      This is simple and straight forward (see requirement msgDistributor.plugin.ConsumableQueuePlugin).
      </p>
      <p>
      Note that this is only an example what you can do. The status message and priority configuration
      of the above example is specific for exactly this plugin.
      If you implement your own plugin, you can do whatever you like.
      </p>
      <p>
      For the above example exists an implementation which you can use or change
      to your needs, see the <i>ConsumableQueuePlugin</i> link below.
      </p>
   </description>
   <configuration where="server">
<!--
   -queue/callback/maxBytes
                       The maximum size in bytes of the storage [10485760].
   -queue/callback/maxBytesCache.
                       The maximum size in bytes in the cache [2097152].
   -queue/callback/onOverflow
                       What happens if storage is full [deadMessage]
   -queue/callback/onFailure
                       Error handling when storage failed [deadMessage]
   -queue/callback/type
                       The plugin type [CACHE]
   -queue/callback/version
                       The plugin version [1.0]
   -queue/callback/defaultPlugin
                       The plugin type,version (short form) [CACHE,1.0]
-->
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

         <tr>
            <td>MsgDistributorPlugin[MyPlugin][1]</td>
            <td>com.xy.MyPlugin</td>
            <td>Register your plugin</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>

         <tr>
            <td>MsgDistributorPlugin[Another][1.0]</td>
            <td>com.xy.MySpecial</td>
            <td>Register your plugin</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>

         <tr>
            <td>MsgDistributorPlugin/defaultPlugin</td>
            <td>"MyPlugin,1" or "Another,1.0" or "undef"</td>
            <td>Specifiy the plugin to use as a default.<br />
                Default is <i>undef</i> that is no default plugin is loaded which is usually the correct setting:<br />
                The client normally chooses on publish its desired plugin by specifying it in the topic section of 
		the publish QoS</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>
      </table>
      <!-- p>
      For coding and configuration of plugins please read the
      requirement msgDistributor.plugin.ConsumableQueuePlugin (see link below)
      </p -->
   </configuration>
   <see type="API">org.xmlBlaster.engine.distributor.I_MsgDistributor</see>
   <see type="API">org.xmlBlaster.engine.distributor.plugins.ConsumableQueuePlugin</see>
   <see type="API">org.xmlBlaster.util.plugin.I_Plugin</see>
   <see type="REQ">msgDistributor.plugin.ConsumableQueuePlugin</see>
   <see type="REQ">util.property.env</see>
   <author>laghi@swissinfo.org</author>
   <date>2003 10 16</date>
   <revision>$Revision: 1.2 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.distributor.ConfigurationParserTest</test>
   </testcase>
</requirement>

