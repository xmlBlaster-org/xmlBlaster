<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='interface.subscribe' type='NEW' prio='HIGH' status="CLOSED">
   <topic>Messages are asynchronous accessed with the subscribe() method</topic>
   <description>
      <p>
      The <b>subscribe()</b> method allows to subscribe for messages in xmlBlaster.
      You can subscribe with exactly one message by passing its oid, or by a
      selection of message by passing a XPATH query.
      </p>
      <p>
      Subscribed messages are sent to the callback servers update() method.
      Clients have to establish a callback server instance to allow asynchronous
      callbacks.
      </p>
      <p>
      Method detail (CORBA IDL notation):
      </p>
      <pre>
   typedef string XmlType;
   typedef sequence&lt;string> StringArr;

   XmlType subscribe(in XmlType xmlKey, in XmlType qos) raises(XmlBlasterException);
      </pre>
         
      <table border="1">
         <tr>
         <th>Parameter</th><th>Type</th><th>Description</th>
         </tr>
         <tr>
         <td>xmlKey</td><td>string</td><td>The XML encoded key containing the oid or XPATH query to select messages to subscribe</td>
         </tr>
         <tr>
         <td>xmlQos</td><td>string</td><td>The XML encoded Quality of Service QoS (see SubscribeQos link below)</td>
         </tr>
         <tr>
         <td>return</td><td>string</td>
         <td>An XML encoded string containing status and the unique
            subscription ID (see SubscribeReturnQos link below).
            You need to remember the subscriptionId for unsubscribing later.
         </td>
         </tr>
         <tr>
         <td>XmlBlasterException</td><td>exception</td><td>Thrown on error</td>
         </tr>
      </table>

      <br />

      <p>
      Here is an overview of all available <b>subscribe QoS</b>:
      </p>
      <pre>
&lt;qos>
   &lt;!-- Force a subscription ID from client side -->
   &lt;subscribe id='_subId:1'/>

   &lt;!-- Kill a MsgUnit even if there are pending updates or subscriptions (default: false) -->
   &lt;erase forceDestroy='true'/>
   
   &lt;!-- Don't send me the xmlKey meta data on updates (default: true) -->
   &lt;meta>false&lt;/meta>
   
   &lt;!-- Don't send me the content data on updates (notify only) (default: true) -->
   &lt;content>false&lt;/content>
   
   &lt;!-- Ignore a second subscribe on same oid or XPATH (default: true) -->
   &lt;multiSubscribe>false&lt;/multiSubscribe>

   &lt;!-- Inhibit the delivery of messages to myself if i have published it (default: true) -->
   &lt;local>false&lt;/local>
   
   &lt;!-- don't send an initial message after subscribe (default: true) -->
   &lt;initialUpdate>false&lt;/initialUpdate>
   
   &lt;!-- Suppress erase event to subscribers (default: true) -->
   &lt;notify>false&lt;/notify>
   
   &lt;!-- Filters messages i have subscribed as implemented in your plugin -->
   &lt;!-- Here we use the RegEx filter and only want content starting with 'H' -->
   &lt;filter type='GnuRegexFilter' version='1.0'>^H.*$&lt;/filter>
                                
   &lt;!-- Default is to deliver the current entry (numEntries='1'), '-1' deliver all (default: 1) -->
   &lt;history numEntries='20'/>
&lt;/qos>
      </pre>

      <h3>
      A special note how to subscribe in cluster environments:
      </h3>
      <p>
      If you subscribe to a cluster slave node, the subscription is only
      forwarded to a master node if the subscription key matches the configured
      master selection.
      </p>
   </description>


   <example lang="XML" type="HTML">
      <p>
      Here is an example of an exact query:
      </p>
      <table border="1">
         <tr><td>Key</td><td>&lt;key oid='MyMessage' /></td></tr>
         <tr><td>QoS</td><td>&lt;qos>&lt;initialUpdate>false&lt;/initialUpdate>&lt;/qos></td></tr>
      </table>
      <p>
      The topic <i>MyMessage</i> is queried and no initial update
      of existing history messages is delivered.
      </p>
      <p>
      And a return value:
    </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>
   &lt;state id='OK'/>
   &lt;subscribe id='__subId:34023'/>
&lt;/qos>
   </pre>
   </td></tr></table>
   </example>
   
   <example lang="XML" type="HTML">
      <p>
      Here is an example of an XPATH query:
      </p>
      <table border="1">
         <tr><td>Key</td><td>&lt;key oid='' queryType='XPATH'> /xmlBlaster/key[starts-with(@oid,'radar.')]  &lt;/key></td></tr>
         <tr><td>QoS</td><td>&lt;qos/></td></tr>
      </table>
      <p>
      All topics which oid starts with <i>radar.</i> is queried.
      </p>
      <p>
      And the returned value:
    </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>
   &lt;state id='OK'/>
   &lt;subscribe id='__subId:XPATH67'/>
&lt;/qos>
   </pre>
   </td></tr></table>

   </example>

   <example lang="XML" type="HTML">
      <p>
      A subscription in a cluster environment belonging to domain <i>RUGBY_NEWS</i>
      </p>
      <table border="1">
         <tr><td>Key</td><td>&lt;key oid='MyMessage' domain='RUGBY_NEWS' /></td></tr>
         <tr><td>QoS</td><td>&lt;qos/></td></tr>
      </table>
      <p>
      And a return value:
    </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>
   &lt;state id='OK'/>
   &lt;subscribe id='__subId:34023'/>
&lt;/qos>
   </pre>
   </td></tr></table>
   </example>
   
   <example lang="XmlRpc" type="HTML">
      <p>
      This is the XmlRpc server interface variant:
      </p>
      <pre>
   public String subscribe(String sessionId, String xmlKey_literal, String qos_literal)
                                                         throws XmlBlasterException
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code for an EXACT subscription:
      </p>
      <pre>
   import org.xmlBlaster.client.key.SubscribeKey;
   import org.xmlBlaster.client.qos.SubscribeQos;
   import org.xmlBlaster.client.qos.SubscribeReturnQos;

   ...

   SubscribeKey sk = new SubscribeKey(glob, "MyOid");

   SubscribeQos sq = new SubscribeQos(glob);

   SubscribeReturnQos sr = con.subscribe(sk.toXml(), sq.toXml());

   System.out.println("Success, subscriptionId=" + sr.getSubscriptionId());

      </pre>
   <p>
   See xmlBlaster/demo/javaclients/HelloWorld*.java for more examples.
   </p>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code for an XPATH subscription:
      </p>
      <pre>
   import org.xmlBlaster.client.key.SubscribeKey;
   import org.xmlBlaster.client.qos.SubscribeQos;
   import org.xmlBlaster.client.qos.SubscribeReturnQos;
   import org.xmlBlaster.util.enum.Constants;

   ...

   SubscribeKey sk = new SubscribeKey(glob, "/xmlBlaster/key[@oid='radar.track']",
                            Constants.XPATH);

   SubscribeQos sq = new SubscribeQos(glob);

   SubscribeReturnQos sr = con.subscribe(sk.toXml(), sq.toXml());

   System.out.println("Success, subscriptionId=" + sr.getSubscriptionId());

      </pre>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code for a subscriptions in a cluster environment
      which uses selection of master nodes with message domains:
      </p>
      <pre>
   import org.xmlBlaster.client.key.SubscribeKey;
   import org.xmlBlaster.client.qos.SubscribeQos;
   import org.xmlBlaster.client.qos.SubscribeReturnQos;

   ...

   SubscribeKey sk = new SubscribeKey(glob, "MyMessageOid");

   sk.setDomain("RUGBY_NEWS"); // Subscription is forwarded from slaves to master
   // without setting the domain the subscribe would just be handled by the slave connected to

   SubscribeReturnQos sr = con.subscribe(sk.toXml(), null);

   System.out.println("Success, subscriptionId=" + sr.getSubscriptionId());

      </pre>
   </example>


   <configuration>
   </configuration>

   <see type="REQ">interface</see>
   <see type="REQ">engine.qos.subscribe.duplicate</see>
   <see type="REQ">engine.qos.subscribe.multiSubscribe</see>
   <see type="REQ">engine.qos.subscribe.OfflineQueuing</see>
   <see type="REQ">client.subscribe.dispatch</see>

   <see type="LOCAL">../../demo/javaclients/HelloWorldSubscribe.java.html</see>
   <see type="API">org.xmlBlaster.engine.xml2java.XmlKey</see>
   <see type="API">org.xmlBlaster.client.qos.SubscribeQos</see>
   <see type="API">org.xmlBlaster.client.qos.SubscribeReturnQos</see>
   <see type="API">org.xmlBlaster.client.I_XmlBlasterAccess</see>
   <see type="API">org.xmlBlaster.protocol.xmlrpc.XmlBlasterImpl</see>

   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 01</date>
   <revision>$Revision: 1.17 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>Tests the subscribe method invocation</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSub</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubExact</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubXPath</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubManyClients</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubNoDup</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubNoLocal</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubXPathMany</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubDispatch</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubLostClient</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubMulti</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.qos.StatusQosFactoryTest</test>
      <test tool="SUITE">org.xmlBlaster.test.cluster.SubscribeTest</test>
      <test tool="SUITE">org.xmlBlaster.test.cluster.SubscribeXPathTest</test>
   </testcase>
</requirement>

