<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='client.javascript.rhino' type='NEW' prio='LOW' status="CLOSED">
   <topic>
      XmlBlaster can be easly implemented in javascript code making use of the LiveConnect 
      feature of the Rhino javascript interpreter (embedding of java code into javascript). 
      The advantage of using this technology is that you can use which protocol you whish to
      communicate with xmlBlaster.
   </topic>
   <description>
      You can use the java I_XmlBlasterAccess class as you where programming in java. 
      There is an implementation of the I_Callback Interface called  
      <code>org.xmlBlaster.client.JavascriptCallback</code> which can be instantiated and 
      passed when logging in. Whenever a message corresponds to a subscription, the update 
      method is called. The update method of <code>JavascriptCallback</code> does invoke a
      javascript update function which you must provide. The signature of such method is 
      currently the following:

      <pre>
      function update(loginName, key, content, qos) {
        ....
        return ...
      }
      </pre>

      where the types for the arguments passed are the same as for java with the only exception
      of the content which currently is a String (due to problems in interpreting 
      <code>byte[]</code>.
      <p>
      An example how it can be used with SVG is
      <a href="http://www.xmlBlaster.org/xmlBlaster/demo/javaclients/svg/rhino/chessRhino.svg">xmlBlaster's SVG internet chess</a>.
      </p>

   </description>
   <example lang="Javascript">
      <![CDATA[
      


/**
 * This example is a Chess game where the GUI is an SVG document which can be opened in a browser. Since this example 
 * makes use of the LiveConnect techology which is implemented in Rhino (http://www.mozilla.org) it can only used in
 * browsers which use this interpreter. It has been tested in batik (http://xml.apache.org).
 */

/**
 * This is the way to import packages into the Rhino Javascript Interpreter
 */
importPackage(java.awt);
importPackage(Packages.org.xmlBlaster.client);
importPackage(Packages.org.xmlBlaster.client.protocol);
importPackage(Packages.org.xmlBlaster.engine.helper);
importPackage(Packages.org.xmlBlaster.util);


   var x0  = 0; // the x coordinate of the first point (used to calculate the movement)
   var y0  = 0; // the y coordinate ...
   var doc;     // this svg document 
   var currentElement; // the element which has been selected.
   var xmlBlaster; // the xmlBlasterAccess object used to communicate with xmlBlaster


   
   /**
    * The function which returns a generated user name which should be unique within the same xmlBlaster server.
    */
   function getUser() {
      return System.getProperty("user.name") + System.currentTimeMillis();
   }
   

   /**
    * This function has been added to force batik to update. Without it the screen does not update, probably because
    * batik only updates when an event has been fired (xmlBlaster updates come in asynchroneously and do not generate
    * a dom event).
    */
   function fireClickEvent() {
     var evt = doc.createEvent("MouseEvents");
     evt.initEvent("click", true, true);

     var el = doc.getElementById("0");
     el.dispatchEvent(evt);
   }


   /**
    * This is the method which is invoked by the XmlBlaster object when a message matches a subscription
    */
   function update(loginName, key, content, qos) {
      var root = Xparse(new String(content));
      var element = root.contents[0];
      var id = element.contents[0].contents[0].value;

      var transform = element.contents[1].contents[0].value;
      var el = doc.getElementById(id);
      el.setAttribute("transform", transform);

      // hack to update the screen in batik ...
      setTimeout('fireClickEvent()', 1);
      return "";
   }
  

   /**
    * This helper function builds the string to use as the 'translate' attribute. It is this attribute which
    * makes the element move. If such an attribute does not exist, it is added, otherwise it is replaced.
    */
   function createTranslateAttribute(element, dx, dy) {
      var buf = element.getAttribute("transform");
      var pos = buf.indexOf("translate(");
      var x   = dx;
      var y   = dy;
        
      if (pos > -1) {
         buf = buf.substring(pos+10, buf.length());
         var A = new Array();
         A  = buf.split(',');
         x  += parseInt(A[0], 10);
         var B = new Array();
         B  = A[1].split(')');
         y += parseInt(B[0], 10);
      }
      return "translate(" + x + "," + y + ")";
   }
  
  
   /**
    * A helper function build the xml string to send as to xmlBlaster as the content of the message.
    */
   function toXml(id, transform) {
      var content = "<chess><id>" + id + "</id><transform>" + transform + "</transform></chess>";
      return content;
   }
        

   /**
    * Called when opening this document, this function establishes a connection to xmlBlaster, makes a login and 
    * a subscription to the messages it is insterested in. It currently connects on the localhost. You could easly 
    * change this by making it read the System properties.
    */
   function doInit(evt) { 
      doc = evt.target.ownerDocument;
      var key = new String("<?xml version='1.0'?><key oid='' queryType='XPATH'>//chess</key>");

      args = new Array(2);
      // you can set here the command line to pass to I_XmlBlasterAccess
      args[0] = new String("-bootstrapHostname");
      args[1] = new String("localhost");
      xmlBlaster = new XmlBlasterAccess(args);

      ConnectQos connectQos = new ConnectQos(glob, getUser(), "secret")
      xmlBlaster.connect(connectQos, new JavascriptCallback(this));
      xmlBlaster.subscribe(key, "<qos></qos>");
   }
    

   /**
    * sets the starting point for the movement of the elment.
    */
   function setStartPosition(evt) {
      x0 = evt.getClientX();
      y0 = evt.getClientY();
      currentElement = evt.target;
   }
  
  
   /**
    * Calculates the movement and then publishes this information to xmlBlaster. Note that it currently does only
    * calculate movements based on the original size of the document. In other words, if you resize the browser, 
    * you will get the wrong size of the movements.
    */
   function movePoint (evt) {
      var dx = evt.getClientX() - x0;
      var dy = evt.getClientY() - y0;
          
      //   var id = currentElement.getAttribute("id");
      // the next lines are a workaround for the bug in batik.
      var id = currentElement.getAttribute("id") + "A"; // workaround for the Bug ?
      currentElement = doc.getElementById(id);
      // end of the bugfix

      var transform = createTranslateAttribute(currentElement, dx, dy);
      var content = new String(toXml(id, transform));
      var key = "<?xml version='1.0'?><key oid=\'" +  id + "\'><chess>some chess name</chess></key>";
      var qos = "<qos></qos>";
     
      messageUnit = new MsgUnit(key, content, qos);
      xmlBlaster.publish(messageUnit);
   }
  

      ]]>
   </example>
   <todo>
      Pass byte[] objects to the update method.
   </todo>
   <see>org.xmlBlaster.client.JavascriptCallback</see>
   <author>laghi@swissinfo.org</author>
   <effort>1</effort>
   <date>2001 04 06</date>
   <revision>$Revision: 1.7 $</revision>
   <testcase status="INWORK">
      <name>-</name>
      <comment>Should even be tested with mozilla</comment>
      <test tool="MANUAL">Batik runs fine, see xmlBlaster/demo/javaclients/svg/rhino/chessRhino.svg</test>
   </testcase>
</requirement>

