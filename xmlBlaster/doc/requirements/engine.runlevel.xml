<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='engine.runlevel' type='NEW' prio='HIGH' status="CLOSED">
   <topic>XmlBlaster supports different run levels</topic>
   
   <description>
     <p>
     An xmlBlaster server instance has different states, we call it <i>run levels</i> as a gesture of honor
     to the UNIX run levels.<br />
     The run level 0 is a stopped xmlBlaster, the run level 9 is a fully operational run level.
     </p>
     Here is a description of the different run levels:
      <table border="1">
         <tr>
            <th>Level</th>
            <th>No</th>
            <th>active Services</th>
            <th>Description</th>
         </tr>
         <tr>
            <td>HALTED</td>
            <td>0</td>
            <td>-</td>
            <td>XmlBlaster is not existing</td>
         </tr>
         <tr>
            <td>STANDBY</td>
            <td>3</td>
            <td>All configured plugins are alive
                but only administrative access from outside is possible</td>
            <td>XmlBlaster has sync'd all databases and just waits, it is ready to be killed or reactivated</td>
         </tr>
         <tr>
            <td>CLEANUP</td>
            <td>6</td>
            <td>All configured plugins are alive and operational
                but only administrative access from outside is possible</td>
            <td>XmlBlaster still flushes queues to other cluster nodes or to connected clients</td>
         </tr>
         <tr>
            <td>RUNNING</td>
            <td>9</td>
            <td>All configured plugins are alive</td>
            <td>XmlBlaster is fully operational</td>
         </tr>
     </table>

     <p>
     Administration features:
     </p>
     <p>
     <ul>
       <li>Administer run level changes:<br />
       The internal command manager supports the attribute <i>getRunlevel()</i> and <i>setRunlevel()</i>
       allowing to monitor or change the run level via SNMP, telnet or other supported administration
       protocols (see requirement admin below).
       </li>
       <li>Configure the plugins:<br />
       An xml file describes the plugin configuration. It defines among other things startup and shutdown
       sequence, classname and plugin specific attributes. This file describes both plugins loaded
       by the runlevel manager (further called static plugins) and plugins which are loaded on client demand 
       (further called dynamic plugins). The default name for this file is xmlBlasterPlugins.xml.
       </li>
     </ul>
     </p>
     The xmlBlasterPlugins.xml file is searched in the following locations and the given order:

     <table border="1">
       <tr>
         <th>location or parameter</th>
         <th>example</th>
       </tr>
       <tr>
         <td>user.dir</td>
         <td>.</td>
       </tr>
       <tr>
         <td>Command line parameter '-pluginsFile'</td>
         <td>-pluginsFile /tmp/xmlBlasterPlugins.xml</td>
       </tr>
       <tr>
         <td>$PROJECT_HOME</td>
         <td>java -DPROJECT_HOME=/opt/xmlBlaster ...</td>
       </tr>
       <tr>
         <td>$HOME</td>
         <td>user.home</td>
       </tr>
       <tr>
         <td>classpath</td>
         <td>/opt/xmlBlaster/lib/xmlBlaster.jar:....</td>
       </tr>
       <tr>
         <td>java.ext.dirs</td>
         <td>/opt/jdk1.2.2/jre/lib/ext</td>
       </tr>
       <tr>
         <td>java.home</td>
         <td>/opt/jdk1.2.2/jre/lib</td>
       </tr>
     </table>

<pre>
<![CDATA[
<xmlBlaster>
   <!-- A typical plugin which is loaded by client request -->
   <plugin id='dispatchPriority'
           className='org.xmlBlaster.util.dispatch.plugins.prio.PriorizedDeliveryPlugin'
           jar='/tmp/my.jar'>
      <attribute id='config'>
         &lt;![CDATA[
         <msgDispatch defaultStatus='64k' defaultAction='send'>
         <onStatus oid='_bandwidth.status' content='64k' defaultAction='destroy'>
            <action do='send'  ifPriority='7-9'/>
            <action do='queue'  ifPriority='2-6'/>
         </onStatus>
         <onStatus oid='_bandwidth.status' content='2M'>
            <action do='send'  ifPriority='0-9'/>
         </onStatus>
         </msgDispatch>
         ]]&gt;
      </attribute>
   </plugin>

   <plugin id='queueCACHE' className='org.xmlBlaster.util.queue.cache.CacheQueueInterceptorPlugin'>
      <attribute id='transientQueue'>queueRAM</attribute>
      <attribute id='persistentQueue'>queueJDBC</attribute>
   </plugin>
   
   <plugin id='queueRAM' className='org.xmlBlaster.util.queue.ram.RamQueuePlugin'/>

   <plugin id='storageCACHE' className='org.xmlBlaster.engine.msgstore.cache.PersistenceCachePlugin'>
      <attribute id='transientQueue'>storageRAM</attribute>
      <attribute id='persistentQueue'>storageJDBC</attribute>
   </plugin>
   
   <plugin id='storageRAM' className='org.xmlBlaster.engine.msgstore.ram.MapPlugin'/>
   
   <!-- and here the declarations which are specific to the given nodes -->
   <node id='heron'>
      <plugin id='SOCKET-admin' className='org.xmlBlaster.protocol.socket.SocketDriver'>
         <attribute id='port'>69000</attribute>
      </plugin>
     
      <!-- /node/heron/plugin/SOCKET/attribute/port=6901 -->
      <!-- /node/heron/plugin/SOCKET/action/LOAD/onStartupRunlevel=3 -->
      <!-- /node/heron/plugin/SOCKET/action/LOAD/sequence=5 -->
      <plugin id='SOCKET' className='org.xmlBlaster.protocol.socket.SocketDriver'>
         <attribute id='port'>6901</attribute>
         <action do='LOAD' onStartupRunlevel='3' sequence='5' onFail='resource.configuration.pluginFailed'/>
         <action do='STOP' onShutdownRunlevel='2' sequence='4'/>
      </plugin>
     
      <plugin id='queueJDBC' className='org.xmlBlaster.util.queue.jdbc.JDBCQueueCommonTablePlugin'>
         <attribute id='url'>jdbc:oracle:thin:@localhost:1521:noty</attribute>
         <attribute id='user'>joe</attribute>
         <attribute id='password'>secret</attribute>
         <attribute id='connectionBusyTimeout'>90000</attribute>
         <attribute id='maxWaitingThreads'>300</attribute>
      </plugin>
     
      <plugin id='storageJDBC' className='org.xmlBlaster.engine.msgstore.cache.PersistenceCachePlugin'>
         <attribute id='url'>jdbc:oracle:thin:@localhost:1521:noty</attribute>
         <attribute id='user'>joe</attribute>
         <attribute id='password'>secret</attribute>
         <attribute id='connectionBusyTimeout'>90000</attribute>
         <attribute id='maxWaitingThreads'>300</attribute>
      </plugin>
    </node> <!-- heron -->
 
    <node id='avalon'>
       ...
      <plugin id='queueJDBC' className='org.xmlBlaster.util.queue.jdbc.JDBCQueueCommonTablePlugin'>
         <attribute id='url'>jdbc:oracle:thin:@localhost:1521:noty</attribute>
         <attribute id='user'>joe</attribute>
         <attribute id='password'>secret</attribute>
         <attribute id='connectionBusyTimeout'>90000</attribute>
         <attribute id='maxWaitingThreads'>300</attribute>
         <attribute id='tableNamePrefix'>AVALON_</attribute>
      </plugin>
      ...
    </node>
</xmlBlaster>
]]>

     </pre>                                                              
     <p>
     If a plugin is defined directly under the <i>xmlBlaster</i> tag, then its definition affects all nodes.
     Definitions under a specific node are stronger (i.e. they will overwrite any definition found under 
     xmlBlaster and affect only the node under which they are defined.
     <p>
        If you don't want to load a plugin you simply don't put it in the xml tree. Alternatively you 
        comment it out according to the xml syntax:
        <pre>
<!--
   <plugin id='SOCKET' className='org.xmlBlaster.protocol.socket.SocketDriver'>
      <action do='LOAD' onStartupRunlevel='3' sequence='1'
              onFail='resource.configuration.pluginFailed'/>
      <action do='STOP' onShutdownRunlevel='2' sequence='5'/>
   </plugin>
-->
        </pre>
     </p>
     </p>
     The plugin element:<br />
     The plugin tag has the following attributes:
     <ul>
        <li><b>id</b> (mandatory) which is the name uniquely identifying this plugin configuration. The 
            structure used to identify the plugins can be free chosen, it is not evaluated but is needed
            for referencing the plugin with refid.
        </li>
        <li><b>className</b> (mandatory) the full name of the java class implementing the plugin.</li>
        <li><b>jar</b> (optional) the coloumn (:) separated list of jar files on which to search for the 
            class to be loaded.
        </li>
     </ul>
     Besides the attributes, the plugin element has the following subtags:
     <ul>
       <li><b>attribute</b> configuration parameters to be passed to the plugin (0 to n times)</li>
       <li><b>action</b> the action to be undertaken on the specified circumstances (0 to n times
           where n is normally 2)</li>
     </ul>
     The <i>action</i> subelement:<br />
     <ul>
       <li><b><i>do</i></b> attribute describing what to do on the specified event. It can be <b>LOAD</b> 
           (which means load the plugin) or <b>STOP</b> (which means shutdown the plugin). 
       </li>
       <li>The event is specified by the attributes <b><i>onStartupRunLevel</i></b> (which is fired if 
           the run level change is incrementing) or <b><i>onShutdownRunLevel</i></b> (which is fired by
           decrementing run level changes). The values of these attributes is an integer which corresponds 
           to the run level on which they have to be activated respectively deactivated. If these attributes
           are omitted, then the run level manager will not load (respectively unload) the plugin. The 
           plugins are loaded on client request (dynamically). It is allowed to define both attributes in the
           same <i>action</i> tag but we don't recommended it. It would mean that the same action is done
           both on increasing run level changes and in decreasing ones.
       </li>
       <li>The <b><i>sequence</i></b> attribute is an integer defining the sequence number within the 
           specified run level, on which do undertaken the specified action. If omitted it will implicitly 
           be 0, that is, the first action on the given run level to be undertaken. If several plugins share 
           the same sequence within the same run level, the sequence between them is unspecified. A 0 means
           it is the chronologically first action to be undertaken both on increasing changes and on 
           decreasing ones.
       </li>
       <li>the <b><i>onFail</i></b> attribute defines which exception to throw if the specified action fails,
           i.e. if an exception is thrown and the plugin could not be loaded. The value of this attribute is
           the error code of the exeption to be thrown. If nothing (or empty) is specified, then the exeption
           is catched, a warn or error is logged (error if runtime exception or xmlBlaster internal error)
           and the normal flow of the program is continued. If the error code is unknown a
           <i>resource.configuration</i> error is thrown and the runlevel flow is interrupted.
       </li>
     </ul>
   </description>

   <example lang="any" type="HTML">
   <p>
   You can play with the run levels interactive on command line, start the server
   and type '?' when it is up to get the usage:
   </p>
   <pre>
java org.xmlBlaster.Main
...

----------------------------------------------------------
Following interactive keyboard input is recognized:
Key:
   g             Popup the control panel GUI.
   r &lt;run level> Change to run level (0,3,6,9).
   d &lt;file name> Dump internal state of xmlBlaster to file.
   q             Quit xmlBlaster.
----------------------------------------------------------

r 3

[RunlevelManager] Change request from run level RUNNING to run level STANDBY ...
[RunlevelManager] Successful shutdown to run level=CLEANUP.
[CorbaDriver] POA and ORB are down, CORBA resources released.
[RunlevelManager] Successful shutdown to run level=STANDBY.
   </pre>
   </example>

   <configuration where="server">
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

         <tr>
            <td>runlevel</td>
            <td>9</td>
            <td>Choose run level on xmlBlaster server startup, e.g. <pre>java org.xmlBlaster.Main -runlevel 6</pre></td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>
   </configuration>

   <see type="API">org.xmlBlaster.engine.RunlevelManager</see>
   <see type="API">org.xmlBlaster.engine.I_RunlevelListener</see>
   <see type="REQ">engine.runlevel.howto</see>
   <see type="REQ">admin</see>

   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 14</date>
   <revision>$Revision: 1.16 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE"></test>
   </testcase>
</requirement>

