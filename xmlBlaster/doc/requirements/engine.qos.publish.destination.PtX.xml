<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='engine.qos.publish.destination.PtX' type='NEW' prio='HIGH' status="INWORK">
   <topic>PtX (Point to XPath) messages are routed using the qos-destination tag</topic>
   <description>
      If you specify a  &lt;destination queryType='XPATH'&gt;  tag, the message will be delivered to
      all clients, for which the XPATH query matches.
      Assuming that clients are stored in a dedicated authentication xmlBlaster server,
      every client can be described with meta information in the XmlKey.
      The XPATH queries the client meta info, and all matching clients will receive the message.
      This allows a smart addressing of client with specific roles or in specific groups.
      You may categorize some client with the &lt;MANAGER&gt; tag, and some with the "TRUSTED"
      attribute. This allows to send a message for example to all managers which are trusted.
   </description>
   <example lang="Java">
      <![CDATA[
      Imagine your clients in xmlBlaster have following meta informations:
         <key oid='martin' contentMime='text/plain'>
            <MANAGER type='TRUSTED'>
               <SALARY type='HIGH' />
            </MANAGER>
         </key>

         <key oid='sabine' contentMime='text/plain'>
            <MANAGER type='TRUSTED'
               <SALARY type='OK_AS_WELL' />
            </MANAGER>
         </key>

      // Construct a message and send it to all MANAGER of type TRUSTED and to the CEO
      String xmlKey = "<key oid='' contentMime='text/plain'>\n" +
                      "</key>";

      String qos = "<qos>" +
                   "   <destination queryType='XPATH'>" +
                   "      //MANAGER[@type='trusted']" +
                   "   </destination>" +
                   "   <destination queryType='EXACT'>" +
                   "      CEO" +
                   "   </destination>" +
                   "</qos>";

      content = "Should we sponsor open source?";
      MessageUnit msgUnit = new MessageUnit(xmlKey, content.getBytes());
      try {
         xmlBlaster.publish(msgUnit, qos);
      } catch(XmlBlasterException e) {
         System.err.println("Failed to send message");
      }
      ]]>
   </example>
   <see>engine.qos.publish.destination.PtX</see>
   <author>ruff@swand.lake.de</author>
   <date>2000 01 17</date>
   <revision>$Revision: 1.2 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE"></test>
   </testcase>
</requirement>

