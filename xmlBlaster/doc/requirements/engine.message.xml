<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='engine.message' type='NEW' prio='HIGH' status="CLOSED">
   <topic>XmlBlaster uses a well defined message format</topic>
   <description>
      <p>
      XmlBlaster is a MoM (message oriented middleware) supporting distributed
      clients to communicate through messages.
      </p>
      <p>
      All messages have a header, a content and a QoS.
      </p>
      <ul>
         <li>
            HEADER - The message meta data<br />
            The header is XML based, so you are able to place your meta data
            of the message content here.<br />
            Your are able to query this meta data with XPath, the XML query language.
            <br />Example:
            <pre>
&lt;key oid='Product.Toaster' contentMime='image/gif'>
   &lt;color>blue&lt;/color>
   &lt;model>TopFamily&lt;/model>
   &lt;description>Picture of the new family toaster model&lt;/description>
&lt;/key>
            </pre>
         </li>
         <li>
            CONTENT - the data BLOB<br />
            The message content is a BLOB (binary data, or an 'octet sequence' in CORBA jargon).<br />
            So you may send JPEG, ASCII, XML, serialized code or whatever with your messages.<br />
            You can't query the content, but we will provide a MIME based plugin possibility in a future
            release, with a XML-XPath plugin as an example.<br />
            This will allow full text searches.
            <br />Example:
            <pre>
[Here is the binary data of the gif image]
            </pre>
         </li>
         <li>
            QoS - the Quality of Service<br />
            The Quality of Service are XML based informations to control the xmlBlaster.<br />
            For example you may specify some expiration date or transaction context or
            whatever the xmlBlaster is supporting.<br />
            If you use the direct addressing style, the destination addresses or destination XPath
            queries are placed here.
            <br />Example:
            <pre>
&lt;qos>
   &lt;isDurable />  &lt;!-- The message shall be recoverable if xmlBlaster crashes -->
&lt;/qos>
            </pre>
         </li>
      </ul>
      <p>
      Features of messages:
      </p>
      <ul>
         <li>Messages are created when published<br />
         When a data source (a client) publishes a message it
         gets created in xmlBlaster.
         </li>
         <li>A message has a unique identifier (oid)<br />
         If not specified by the publisher,
         a unique oid (object identifier) is generated by xmlBlaster for every message.
         Publisher using their own message id should take care to avoid naming
         conflicts.
         The oid can in this case be hierarchically organized, for example
         oid="MyCompany.MyProject.statusOfXy".
         </li>
         <li>Messages have a span of life<br />
         A message can be erased explicitly by a call with erase() or
         is discarded on expire timeout. 
         The message life cycle defaults to forever.
         </li>
         <li>Messages are atomic entities<br />
         A message is a small unit of data. The publisher decides what he puts
         into a message, but usually using atomic information nucleus is a good choice.
         </li>
         <li>The message meta data (key) is invariant<br />
         Once a message with an unique oid (object id) is created, the
         meta information (the attributes and descendant tags of the key)
         can't be changed any more. They are <i>final - const - readonly</i>.
         To change the key info, you need to delete and recreate the message
         or publish another message with another key oid.
         </li>
         <li>The message QoS can contain a transaction context<br />
         Messages can be processed under transaction control (two phase commit).
         This feature is not yet implemented.
         </li>
         <li>History of messages<br />
         Message updates the same oid overwrite the content
         of the previous message. If message history is needed, currently
         the oid should be left empty (xmlBlaster generates a new every time)
         and the message can be selected by meta tags.
         As this is not to well performing, in future there should be added support
         for content history in the same message.
         </li>
      </ul>
   </description>
   <example lang="Java" type="HTML">
      See link to Javadoc API of PublishQos below how to set message attributes.
   </example>
   <configuration where="server">
      <p>
      These parameters allow to configure the xmlBlaster server default behavior.
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>
         <tr>
            <td>message.maxRemainingLife</td>
            <td>0</td>
            <td>A message lease lasts forever if not otherwise specified. Specifies the maximum lifetime in milliseconds in the server, 0 is forever.</td>
            <td>yes</td>
         </tr>
      </table>
   </configuration>
   <configuration where="client">
      <hr />
      <p>
      These parameters can be specified on client side with java clients (see ConnectQos API).
      </p>
      <p>
      Other programming languages need to supply these setting with a raw XML string (see example section above).
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>
         <tr>
            <td>message.remainingLife</td>
            <td>0</td>
            <td>A message lease lasts forever if not otherwise specified.
                Specifies the lifetime in milliseconds for a specific message on publish(), 0 is forever.</td>
            <td>yes</td>
         </tr>
      </table>
   </configuration>
   <see type="API">org.xmlBlaster.client.PublishQosWrapper</see>
   <see type="API">org.xmlBlaster.client.PublishKeyWrapper</see>
   <see type="API">org.xmlBlaster.engine.xml2java.PublishQos</see>
   <see type="REQ">engine.queue</see>
   <see type="REQ">engine.callback</see>
   <see type="REQ">util.property</see>
   <author>ruff@swand.lake.de</author>
   <date>2002 02 04</date>
   <revision>$Revision: 1.4 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.</test>
   </testcase>
</requirement>

