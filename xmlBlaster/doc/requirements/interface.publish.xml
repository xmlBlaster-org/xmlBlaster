<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='interface.publish' type='NEW' prio='HIGH' status="CLOSED">
   <topic>All messages sent to xmlBlaster use the publish method</topic>
   <description>
      <p>
      The <b>publish()</b> method allows to send messages to xmlBlaster or in point to point
      (PtP) mode route messages to other clients.
      </p>
      <p>
      Method detail (CORBA IDL notation):
      </p>
      <pre>
   string publish(in MessageUnit msgUnit) raises(XmlBlasterException);
      </pre>

      <table border="1">
         <tr>
         <th>Parameter</th><th>Type</th><th>Description</th>
         </tr>
         <tr>
         <td>msg</td><td>MessageUnit</td><td>A structure containing an XML key, an XML QoS and the binary message content (see MsgUnit link below)</td>
         </tr>
         <tr>
         <td>return</td><td>string</td><td>An XML based return string containing status and other informations (see PublishReturnQos link below)</td>
         </tr>
         <tr>
         <td>XmlBlasterException</td><td>exception</td><td>Thrown on error</td>
         </tr>
      </table>
      <p>
      Method variants:
      </p>
      <ul>
       <li>publishArr() Publishes many messages in a bulk</li>
       <li>publishOneway() Publishes many messages in a bulk without a return value (without synchronous ACK)</li>
      </ul>
   </description>


   <example lang="XML" type="HTML">
      <p>
      Here is an example MsgUnit:
      </p>
      <table border="1">
         <tr><th>Field</th><th>Example</th></tr>
         <tr><td>Key</td><td>&lt;key oid='MyMessageOid' contentMime='text/plain'/></td></tr>
         <tr><td>Content</td><td>Hello world</td></tr>
         <tr><td>QoS</td><td>&lt;qos>&lt;priority>5&lt;/priority>&lt;/qos></td></tr>
      </table>
      <p>
      The <i>MsgUnit</i> consists of three attributes:
      </p>
      <p>
      The <b>key</b> is XML markup describing the topic name, here <i>MyMessageOid</i>
      and other useful meta information about this topic.
      </p>
      <p>
      The <b>content</b> is binary data which you want to transport with this message.
      </p>
      <p>
      The <b>QoS</b> is the <i>quality of service</i> it describes in XML markup
      how the message shall be handled by the xmlBlaster server.
      </p>
      <p>
      And a return value:
    </p>
   <table border="1"><tr><td>
   <pre>
&lt;qos>
   &lt;state id='OK' info='QUEUED[bilbo]'/>
   &lt;key oid='MyMessageOid'/>
   &lt;rcvTimestamp nanos='1042815836675000001'/>
&lt;/qos>
   </pre>
   </td></tr></table>
   <p>
     Above you got an acknowledge for your sent message, the <b>state</b> is OK.
   </p>
   <p>
     The topic name <i>MyMessageOid</i> is returned, this is helpful
     if you have not set an oid on publish and the oid is generated
     uniquely by xmlBlaster.
   </p>
   <p>
     Finally you get the approximate <b>receive timestamp</b> (UTC time),
     when the message arrived in the xmlBlaster server publish() method.
   </p>
   <p>
     It is given in nanoseconds elapsed since midnight, January 1, 1970 UTC.
     Note that the exact time is milliseconds only but an internal counter
     is added to have nanosecond precision, guaranteeing a unique timestamp
     for an xmlBlaster cluster node instance.
   </p>
   <p>
     This <b>rcvTimestamp</b> is unique for a message instance published and may be
     used to identify this message. For example a publisher and a receiver
     of a message can identify this message by its topic (key oid) and its
     receive timestamp. Have a look at requirement <i>interface.update</i> where
     this timestamp is delivered as well.
   </p>
   <p>
     To get a human readable view on the timestamp try:
   </p>
     <pre>
String time = qos.getRcvTimestamp().toString(); // Java

string time = TimestampFactory::getTimeAsString(Timestamp timestamp); // C++

->    2003-01-17 16:03:56.675000001
     </pre>
   </example>

   <example lang="XML" type="HTML">
      <p>
      Here is a full QoS of a published message in <b>publish/subscribe</b> mode:
      </p>
<pre>
&lt;qos>
   &lt;!-- 5 is NORM priority, 0 is slowest, 9 is highest -->
   &lt;priority>5&lt;/priority>

   &lt;!-- The message is automatically destroyed after 60000 milliseconds -->
   &lt;expiration lifeTime='60000'/>

   &lt;!-- The message is saved to harddisk to be recoverable after a crash -->
   &lt;persistent/>

   &lt;!-- Don't update messages with identical content as the predecessor -->
   &lt;forceUpdate>false&lt;/forceUpdate>

   &lt;!-- Control life cycle of still referenced message on message expiry -->
   &lt;forceDestroy>false&lt;/forceDestroy>

   &lt;clientProperty name='transactionId'>0x23345&lt;/clientProperty>
   &lt;clientProperty name='myName'>jack&lt;/clientProperty>
   &lt;clientProperty name='myAge' type='int'>12&lt;/clientProperty>

   &lt;!-- Administration: configure the topic on first publish (optional) -->
   &lt;topic readonly='false' destroyDelay='30000' createDomEntry='true'>
      &lt;persistence relating='msgUnitStore' maxEntries='1000' maxBytes='4000'/>
      &lt;queue relating='history' type='CACHE' version='1.0'
                maxEntries='1000' maxBytes='4000'/>
   &lt;/topic>
&lt;/qos>
</pre>
     <p>
      The message is sent with NORM priority and dies automatically after one minute.
      As it is important that the message survives a server crash or shutdown it
      is marked to be persistent.
     <p>
     </p>
      Finally we send the configuration for the topic. This is only evaluated
      if the topic didn't exist yet and needs to be created automatically
      when this publish arrives. We can omit these topic settings as
      there are choosen useful default values in this case.
     </p>
   </example>

   <example lang="XML" type="HTML">
      <p>
      Here is a full QoS of a published message in <b>PtP</b> (point to point) mode:
      </p>
<pre>
&lt;qos>
   &lt;!-- 5 is NORM priority, 0 is slowest, 9 (or MAX) is highest -->
   &lt;priority>MAX&lt;/priority>

   &lt;!-- false to make PtP message invisible for subscribes -->
   &lt;subscribable>false&lt;/subscribable>

   &lt;expiration lifeTime='129595811'/>

   &lt;persistent/>  &lt;!-- message is recovered on server crash -->

   &lt;forceUpdate>false&lt;/forceUpdate>
                 &lt;!-- messages with identical content as the predecessor
                         are not updated -->

   &lt;!-- Send to all login sessions of user 'Tim',
           if Tim is offline queue it -->
   &lt;destination queryType='EXACT' forceQueuing='true'>
      Tim
   &lt;/destination>

   &lt;!-- The login session '-2' of 'Ben' logged in
           at cluster node 'heron' -->
   &lt;destination>
      /node/heron/client/Ben/-2
   &lt;/destination>

   &lt;destination queryType='XPATH'>   &lt;!-- Not supported yet -->
      //[GROUP='Manager']
   &lt;/destination>

   &lt;!-- Administration: configure the topic on first publish
          (optional) -->
   &lt;topic readonly='false' destroyDelay='60000' createDomEntry='false'>
      &lt;persistence relating='msgUnitStore' type='CACHE' version='1.0'
                maxEntries='1000' maxBytes='4000' onOverflow='deadMessage'/>
      &lt;queue relating='history' type='CACHE' version='1.0'
                maxEntries='1000' maxBytes='4000' onOverflow='exception'/>
   &lt;/topic>
&lt;/qos>
</pre>
     <p>
     When we want to send a message to specific other clients we address
     the clients by there login names or session names.
     If a destination contains the session identifier (like '-2') only this
     specific login session of the client will receive the message.
     If we don't specify a publicSessionId, all login sessions of the user
     will receive the message.
     </p>
     <p>
     If we want to hide the PtP message from other subscribers of this topic
     we add the <b>subscribable</b> tag and set it to false.
     </p>
     <p>
     If a destination client is offline the publisher gets thrown back an exception
     and the message is not delivered.
     By adding the tag <b>forceQueuing</b> the message will be queued in xmlBlaster
     until the destination client logs in and will then be delivered to the destination.
     </p>
   </example>

   <example lang="XML" type="HTML">
      <p>
      Here is a full QoS of an <b>administrative</b> message.
      </p>
      <p>
      Such a message configures the topic only and does not contain any user content,
      it is not updated to subscribers and is not put to the history queue.<br />
      Usually this is the first published message for a specific key oid (=topic).
      </p>
<pre>
&lt;qos>
   &lt;!-- 9 is highest -->
   &lt;priority>9&lt;/priority>

   &lt;!-- Don't do any PtP or Pub/Sub actions, just configure the topic -->
   &lt;administrative/>

   &lt;!-- Configure the topic on first publish -->
   &lt;topic readonly='false' destroyDelay='60000' createDomEntry='true'>
      &lt;persistence relating='msgUnitStore' type='CACHE' version='1.0'
                 maxEntries='1000' maxBytes='4000' onOverflow='deadMessage'/>
      &lt;queue relating='history' type='CACHE' version='1.0'
                 maxEntries='1000' maxBytes='4000' onOverflow='exception'/>
   &lt;/topic>
&lt;/qos>
</pre>
     <p>
     The supported settings and default values are described in the <i>queue</i> requirements
     </p>
   </example>

   <example lang="XmlRpc" type="HTML">
      <p>
      This is the XmlRpc server interface variant:
      </p>
      <pre>
   public String publish (String sessionId, Vector msgUnitWrap)
                                             throws XmlBlasterException
      </pre>
   </example>

   <example lang="Java" type="HTML">
      <p>
      A typical Java client code in <b>publish/subscribe</b> mode:
      </p>
      <pre>
   import org.xmlBlaster.client.key.PublishKey;
   import org.xmlBlaster.client.qos.PublishQos;
   import org.xmlBlaster.util.MsgUnit;

   ...

   PublishKey pk = new PublishKey(glob, "HelloWorld4", "text/plain", "1.0");

   PublishQos pq = new PublishQos(glob);

   MsgUnit msgUnit = new MsgUnit(pk, "Hi", pq);

   PublishReturnQos retQos = con.publish(msgUnit);
      </pre>

      <p>
      A typical Java client code in <b>PtP</b> mode:
      </p>
      <pre>
   import org.xmlBlaster.client.key.PublishKey;
   import org.xmlBlaster.client.qos.PublishQos;
   import org.xmlBlaster.util.SessionName;
   import org.xmlBlaster.util.qos.address.Destination;

   ...

   PublishKey pk = new PublishKey(glob, "HelloWorld5", "text/plain", "1.0");

   PublishQos pq = new PublishQos(glob);
   pq.addDestination(new Destination(new SessionName(glob, "Tim/-5")));

   MsgUnit msgUnit = new MsgUnit(pk, "Hi".getBytes(), pq);

   PublishReturnQos retQos = con.publish(msgUnit);
      </pre>

   <p>
   See xmlBlaster/demo/HelloWorld*.java for more examples.
   </p>
   </example>

   <example lang="Perl" type="HTML">
      <p>
      A typical <b>Perl client code</b> in <b>publish/subscribe</b> mode:
      </p>
      <pre>
use Frontier::Client;

#$server_url = 'http://MyHost:8080/';
$server_url =  @ARGV[0];
print "\nTrying to connect to xmlBlaster server on $server_url ...\n";

# Make an object to represent the XMLRPC server.
$server = Frontier::Client->new(url => $server_url);

$connectQos = "&lt;qos>".
              "  &lt;securityService type='htpasswd' version='1.0'>".
              "    &lt;user>testpubUser&lt;/user>".
              "    &lt;passwd>secret&lt;/passwd>".
              "  &lt;/securityService>".
              "  &lt;ptp>true&lt;/ptp>".
              "  &lt;session timeout='86400000' maxSessions='10'/>".
              "&lt;/qos>";

# Call the remote server and get our result (we need to port to connect(),
# see XmlBlaster.pm).
$sessionId = $server->call('authenticate.login', "testpubUser",
                           "secret", $connectQos, "");
print "\nLogin success on $server_url, got secret sessionId=$sessionId \n";

# Publish a volatile message
my $publishKey="&lt;key oid='' contentMime='text/xml'>".
               "  &lt;service>post&lt;/service>".
               "  &lt;type>request&lt;/type>".
               "  &lt;id>123&lt;/id>".
               "&lt;/key>",
my $cdata="&lt;event>testing&lt;/event>";
my $publishQos="&lt;qos>".
               "  &lt;expiration lifeTime='0'/>".
               "  &lt;persistent>false&lt;/persistent>".
               "  &lt;topic destroyDelay='0' createDomEntry='true'/>".
               "&lt;/qos>";

$message = $server->call('xmlBlaster.publish', $sessionId,
        $publishKey,
        $cdata,
        $publishQos);

print "publish return is : $message\n";

# Logout from xmlBlaster
$server->call('authenticate.disconnect', $sessionId, "&lt;qos/>");
print "\nLogout done, bye.\n";
      </pre>

   <p>
   See xmlBlaster/demo/perl/xmlrpc/*.pl for more examples.
   </p>
   </example>


   <configuration>
   </configuration>

   <see type="LOCAL">../../demo/javaclients/HelloWorldPublish.java.html</see>
   <see type="API">org.xmlBlaster.util.enum.PriorityEnum</see>
   <see type="API">org.xmlBlaster.util.MsgUnit</see>
   <see type="API">org.xmlBlaster.client.qos.PublishQos</see>
   <see type="API">org.xmlBlaster.client.qos.PublishReturnQos</see>
   <see type="API">org.xmlBlaster.client.I_XmlBlasterAccess</see>
   <see type="API">org.xmlBlaster.protocol.xmlrpc.XmlBlasterImpl</see>

   <see type="REQ">interface</see>
   <see type="REQ">engine.message.lifecycle</see>

   <see type="REQ">engine.qos.publish.PubSub</see>
   <see type="REQ">engine.qos.publish.persistent</see>
   <see type="REQ">engine.qos.publish.forceUpdate</see>
   <see type="REQ">engine.qos.publish.isVolatile</see>
   <see type="REQ">engine.qos.publish.readonly</see>

   <see type="REQ">engine.qos.publish.destination.PtP</see>
   <see type="REQ">engine.qos.publish.destination.ForceQueuing</see>
   <see type="REQ">engine.qos.publish.destination.PtX</see>
   <see type="REQ">engine.qos.publish.destination.offline</see>

   <see type="REQ">cluster.PtP</see>

   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 01</date>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>Tests the publish method invocation</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestPub</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestPtD</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestPtPSubscribeable</test>
      <test tool="SUITE">org.xmlBlaster.test.cluster.PublishTest</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.qos.MsgQosFactoryTest</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.qos.StatusQosFactoryTest</test>
   </testcase>
</requirement>

