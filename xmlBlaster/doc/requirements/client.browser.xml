<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='client.browser' type='NEW' prio='LOW' status="CLOSED">
   <topic>
      XmlBlaster provides a framework to callback browsers (push mode) using a never
      closing HTTP connection.
   </topic>
   <description>
      <![CDATA[
      The browser callback framework is based on Java Servlets and some Javascript code.<p />
      The Java Servlet <code>BlasterHttpProxyServlet.java</code> keeps
      a permanent HTTP connection to the browser and a CORBA connection to
      xmlBlaster.
      <p />
      Features:
      <ul>
         <li>The Javascript files callback.js and util.js provide the functionality
         on the browser side, xparse.js allows to parse the xml messages in the browser.</li>
         <li>Very frequent message updates break the browsers, therefor the
         servlets automatically queues messages until the browser is ready again.</li>
         <li>The callBackFrame queues messages until the frames processed them.</li>
         <li>The callBackFrame is an own window, to avoid window resize problems
         of your application windows, and to avoid a 'waiting' cursor.</li>
         <li>The http connection is pinged automatically with small but
         big enough dummy data, so that the connection does not close.</li>
         <li>The browser responses on a ping with a 'pong', notifying the servlet
         that it is alive.</li>
         <li>The browser Javascript code is traceable with the Log Javascript class in util.js</li>
      </ul>
      <p>
         If you are logged in with your browser already and want in a later stage
         start the persistent connection, you can pass the login name and password using
         one of the following ways:
      </p>

      <pre>
      1. Variant: Passing infos using the URL (index.html example see below):
         document.location.href = "index.html?ActionType=login" +
                                  "&xmlBlaster.loginName=" + myLoginName +
                                  "&xmlBlaster.passwd=" + myPassword +
                                  "&xmlBlaster.invalidate=false");
         // xmlBlaster will read these variables and use them to login to xmlBlaster.

      2. Variant: Passing infos in a servlet with the session object:
         // prevent BlasterHttpProxyServlet from creating a new session ID:
         session.putValue("xmlBlaster.invalidate", "false");
         session.putValue("xmlBlaster.loginName", myLoginName);
         session.putValue("xmlBlaster.passwd", myPassword);
         response.sendRedirect("/index.html");  // index.html example see below
         // xmlBlaster will read these variables and use them to login to xmlBlaster.
      </pre>

      ]]>
   </description>
   <example lang="Java">
      <![CDATA[
Include this code into the index.html of your application, it
does a login and implements applications specific actions on
successful login:


      <script language="Javascript1.2">
         /**
          * Opens a window which holds the persistent http connection.
          * Cut and paste this function 'as is' into your html file.
          */
         function openCallBack()
         {
            winOptions = "height=100,width=350,screenX=0,screenY=0,status=no," +
                         "scrollbars=no,toolbar=no," +
                         "directories=no,menubar=no,location=no,resizable=no";

            // The location.search should contain the login URL varables, e.g.
            // "?ActionType=login&loginName=karl&passwd=secret"
            xmlBlasterWindow = window.open("/persistentWindow/index.html"+location.search,
                                           "xmlBlasterFrame", winOptions);
         }
         openCallBack();


         /**
          * Callback from callbackFrame that the persistent http connection
          * is established.
          * Now we may load our application.
          * Cut and paste this method into your html file and implement some
          * actions ...
          */
         function loginSucceeded(persistentWindow)
         {
            alert("Login succeeded, loading application ...");

            // Now you can initialize your own servlets or do other actions,
            // like dynamic HTML coding ...

            // e.g. this servlet subscribes to messages from xmlBlaster
            // see xmlBlaster/demo/html/systemInfo/SystemInfo.java
            cpuinfoFrame.location.href = "/servlet/SystemInfo?ActionType=cpuinfo";
         }


         /**
          * When leaving this frameset, logout from xmlBlaster and destroy the
          * persistent window.
          */
         function cleanup()
         {
            top.xmlBlasterWindow.location.href = "/servlet/BlasterHttpProxyServlet?ActionType=logout";
         }
      </script>

         ...

         <frameset onUnload="cleanup()" ...>
            ...




 To receive the message updates from xmlBlaster, any of your application frames
 can listen to them:


      <script language="Javascript1.2">
         /**
          * Tell the callbackFrame that i am interested in message updates.
          * Cut and paste this function 'as is' into your interested html frame
          */
         function initialize()
         {
            // alert("Registering '" + self.name + "' for updates in initialize()");
            top.xmlBlasterWindow.addUpdateListener( self );
            top.xmlBlasterWindow.setReady( self, true );
         }

         /**
          * The callback from xmlBlaster messages arrives here.
          * The Javascript objects are defined in callback.js
          * Cut and paste this function 'as is' into your interested html frame
          *
          * @param messageQueue array with MessageWrapperDom objects (key, content, qos)
          *        key     = UpdateKey object from callback.js
          *        content = The content (a string with the message data)
          *        qos     = UpdateQos object from callback.js
          */
         function update( messageQueue )
         {
            // alert(self.name + " is receiving " + messageQueue.length + " updates");
            top.xmlBlasterWindow.setReady( self, false ); // Tell that i'm busy ...
            for( var i = 0; i < messageQueue.length; i++ ) {
               var msg =  messageQueue[i];

               var keyOid = msg.key.oid;
               var mimeType = msg.key.contentMime;
               var content = msg.content;
               var sender = msg.qos.sender;
               // ...

               // Do whatever you like with the new arrived message, eg. draw
               // into another frame, or do some DHTML ...

            }
            top.xmlBlasterWindow.setReady( self, true ); // I'm ready for further updates
         }
      </script>

      ]]>
   </example>
   <todo>
      The framework allows to directly subscribe from Javascript,
      these requests are routed over the doPost() method of BlasterHttpProxyServlet.
   </todo>
   <see>org.xmlBlaster.protocol.http.BlasterHttpProxyServlet</see>
   <see>org.xmlBlaster.protocol.http.HttpPushHandler</see>
   <see>html.systemInfo.SystemInfo</see>
   <author>ruff@swand.lake.de</author>
   <hacker>Konrad.Krafft@ds.de</hacker>
   <hacker>ruff@swand.lake.de</hacker>
   <effort>12</effort>
   <date>2000 05 06</date>
   <revision>$Revision: 1.5 $</revision>
   <testcase status="INWORK">
      <name>-</name>
      <comment>It is not simple to provide a fully automated testsuite for this case</comment>
      <test tool="MANUAL">Netscape 4.72, Mozilla M13 run fine.</test>
   </testcase>
</requirement>

