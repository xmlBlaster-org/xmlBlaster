<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='protocol.email' type='NEW' prio='HIGH' status="CLOSED">
   <topic>XmlBlaster has a protocol plugin to support access via email</topic>
   <description>
     <p>
     It is possible for a client to send/receive messages to xmlBlaster via email. This way the
     user can publish messages or receive updates via a common emails.
     Our java client library supports this automatically, you can switch to email just by setting
     <code>-protocol email</code> on startup (having configured the SMTP and POP3 beforhand).<br />
     It is possible to send such messages from a normal email software like pine, outlook or thunderbird
     as well, but you need to now how to format the mail to have success.
     </p>
     <p>
     In some cases it makes sense to write a client which
     uses the email protocol (transparently to the user) because the combination 
     hardware, platform and implementation language does not offer a better communication alternative 
     or for example to bypass fire walls etc.
     </p>
     <p>
     A further usage would be to send / receive messages from a cellular phone via sms.
     </p>
     <p>
     Even if the email protocol in its nature has sessionless characteristics, we will create a session
     since this protocol may be used transparently by clients written following the protocol 
     abstraction paradigm. So before any publishing or subscription can be done, the user must 
     connect to get a session id.
     </p>
     <br /><a NAME="emailOverview"></a>
      <img src="protocol.email.overview.png" border="0" title="Email overview" alt="Email overview" />
     
     <p>In the above picture you see on the left side a client and on the right side a server.</p>
     <p>The client needs to connect with SMTP to its MTA (mail transfer agent) to be able to send outgoing messages
     and needs to connect with POP3 to its MTA to poll for incoming mails.</p>
     <p>The same setup applies for the xmlBlaster server.</p>
     <p>For testing purposes all can reuse the same MTA on your <code>localhost</code> or you can
     even have four different MTAs one for client-SMTP, client-POP3, server-SMTP and server-POP3.
     </p>
     <p>To find the MTAs you need to configure the properties <code>mail.smtp.url</code> and <code>mail.pop3.url</code>.
     The POP3 syntax is of the form <code>pop3://user:password@host:port/INBOX</code>. Only 'INBOX' is
     supported for pop3. <br />
     For SMTP use <code>smtp://user:password@host:port</code>.<br />
     Finally you need to configure what is your email address.
     </p>
     <p>
     For fine-tuning there are many more parameters available.
     </p>
<!--
     <p>
     To simplify the usage, it is permitted to send any number of commands in a single email. It is 
     even permitted to send messages (publish messages) where the content of the message is sent as
     an attachment. This is useful where the contents are binary data (for example pictures).
     </p>
     <p>
     Every request to the xmlBlaster server must be valid xml and start with the element tag 
     'xmlBlaster'. If that is not the case, it will be threated in the exception handling. The 
     exception handling considers the following cases:
     <ul>
       <li><b>The content of the message does not start with pure xml</b>. Then it will be considered
           as an error has occured in sending an acknowledge to the client and a delivery problem
           aroze. In such cases the message is striped and the xml content is extracted. The xml
           content is logged and an exception is thrown (then a manual redelivery can be done).
           If no xml content is found an exception is thrown and the message is rejected.
       </li>
       <li><b>The content is correct xml but does not start with the 'xmlBlaster' tag.</b>Then an
           exception is thrown and the message is rejected (since it probably isn't intended for
           xmlBlaster). 
       </li>    
     </ul>
     </p>
     <p>
     The element tag 'xmlBlaster' accepts an attribute <pre>sendAck='true | false (true)'</pre>
     </p>
     <p>
     Commands which normally need a sessionId as a parameter have an alternative without sessionId
     for such cases where a 'connect' is done in the same email. This way you don't need to wait for
     the acknowledge telling you your session id and the result is a faster protocol and less 
     messages are needed.
     </p>      
     <p>
     Before a publish or a subscribe can be done, connect must be invoked. This can be done on the
     same email (in which case you don't need to specify your sessionId for the further commands).
     </p>
      <p/>

       <pre>

&lt;xmlBlaster>
   &lt;connect>
      &lt;securityPlugin type='simple' version='1.0'>
         &lt;xmlBlaster:user>fritz&lt;/xmlBlaster:user>
         &lt;passwd>&lt;![CDATA[secret    ]]&gt;&lt;/passwd>
      &lt;/securityPlugin>
   &lt;/connect>
   &lt;publish>
      &lt;key>xxxx&lt;/key>
      &lt;content xlink='sss.jpg'/>
      &lt;qos>&lt;/qos>
   &lt;/publish>
   &lt;subscribe/>
   &lt;disconnect/>
&lt;/xmlBlaster>

       </pre>
-->
<p class="celltitel">Supported formats</p>
<p>The message needs to be serialized to be send in an email attachment.
This formatting is configurable,
currently we provide two variants. First the raw XBF (XmlBlasterFormat) format which is very
dense and used in the SOCKET protocol as well, second the human readable XmlScript format
which is used in the XML scripting framework of xmlBlaster already:
</p>
<pre>
XfbParser:
  mimeType="application/xmlBlaster-xbfz; name=xmlBlasterMessage.xbfz"
  fileName=xmlBlasterMessage.xbf


XmlScriptParser:
  mimeType="text/plain; name=xmlBlasterMessage.xml; charset=UTF-8"
  fileName = "xmlBlasterMessage.xml"      

  messageId = "xmlBlaster.mid"


</pre>

</description>

<example type="HTML">
<p class="celltitel">Simple command line example to test your MTA</p>
<p>To test access to your MTA you can invoke our SMTP and POP3 implementation standalone on the command line.
This can be usefull to test if your connection URL (user name, password etc) is correct:
</p>
<p>
1. Start a command line poller for user 'xmlBlaster':
</p>
<code>
   java -Dmail.pop3.url=pop3://xmlBlaster:xmlBlaster@localhost/INBOX org.xmlBlaster.util.protocol.email.Pop3Driver -receivePolling
</code>

<p>
2. Send from command line an email:
</p>

<code>
  java -Dmail.smtp.url=smtp://xmlBlaster:xmlBlaster@localhost org.xmlBlaster.util.protocol.email.SmtpClient -from xmlBlaster@localhost -to xmlBlaster@localhost
</code>
</example>



<example type="HTML">
<p class="celltitel">Sending mails manually from your email client (outlook, thunderbird etc)</p>
<p>After having a configured james MTA you can play with your email client software
and send manually emails to xmlBlaster.</p>
<p>The following sequence shows a connect, subscribe and disconnect, first you see the mozilla/thunderbird
email client sending a connect mail:</p>
     <br /><a NAME="emailOverview"></a>
      <img src="protocol.email.gui.png" border="0" title="Sending message with thunderbird" alt="Sending message with thunderbird" />
<p>1. Connect to xmlBlaster</p>
<pre>
SUBJECT:
&lt;messageId>&lt;requestId>1&lt;/requestId>&lt;/messageId>
CONTENT:
&lt;xmlBlaster>
  &lt;connect>
    &lt;qos>
      &lt;securityService type="htpasswd" version="1.0">
        &lt;user>tester&lt;/user>
        &lt;passwd>tester&lt;/passwd>
      &lt;/securityService>
      &lt;session name='emailTester/1' timeout='-1'/>
      &lt;queue relating='connection'>
         &lt;address type="email" />
      &lt;/queue>
      &lt;queue relating='callback' maxEntries='5' maxEntriesCache='2'>
         &lt;callback type="email" pingInterval='0' retries='-1'>
           blue8@localhost
         &lt;/callback>
      &lt;/queue>
    &lt;/qos>
 &lt;/connect>
&lt;/xmlBlaster>
</pre>
<p>No wait in your email GUI until the ConnectReturnQos mail arrives from xmlBlaster, from this
take the private session id and use it for further communication (see 'sessionId:127.0.0.2-null-1134492824506--1769759418-3'
below). We have set <code>pingInterval='0'</code> to not receive unwanted pings, and set <code>retries='-1'</code>
so that the server never deletes us. Further we have set with <code>timeout='-1'</code> the session expiry to unlimited.</p> 

<p>2. Subscribe to a topic</p>
<p>Copy the above sessionId into the subject and increment the requestId, the requestId must be ascending otherwise
xmlBlaster rejects it.</p>
<pre>
SUBJECT:
&lt;messageId>&lt;sessionId>sessionId:127.0.0.2-null-1134492824506--1769759418-3&lt;/sessionId>&lt;requestId>2&lt;/requestId>&lt;/messageId>
CONTENT:
&lt;xmlBlaster>
  &lt;subscribe>
    &lt;key oid="__sys__Login"/>
    &lt;qos>&lt;updateOneway>true&lt;/updateOneway>&lt;/qos>
  &lt;/subscribe>
&lt;/xmlBlaster>
</pre>
<p>Now the SubscribeReturnQos email should arrive and a callback mail (update()) containing the last logged in client,
as we have subscribed on this topic. Note that we have set <code>updateOneway=true</code> otherwise
we would need to acknowledge each received update message.</p>
<p>Here is the update mail:</p>
<pre>
&lt;updateOneway sessionId='unknown' requestId='1134497298063000000' type='I'>
 
 &lt;qos>
  &lt;sender>/node/heron/client/__RequestBroker_internal[heron]/1&lt;/sender>
  &lt;subscribe id='__subId:heron-1134497297978000000'/>
  &lt;expiration lifeTime='-1'/>
  &lt;rcvTimestamp nanos='1134497257820000000'/>
  &lt;queue index='0' size='1'/>
  &lt;forceUpdate/>
  &lt;isPublish/>
  &lt;clientProperty name='__sessionId' type='long'>1&lt;/clientProperty>
  &lt;clientProperty name='__publicSessionId' type='long'>1&lt;/clientProperty>
  &lt;clientProperty name='__absoluteName'>/node/heron/client/emailTester/1&lt;/clientProperty>
 &lt;/qos>
 
 &lt;key oid='__sys__Login'/>
  &lt;content type='String'>emailTester&lt;/content>
&lt;/updateOneway>
</pre>
<p>You can login some other java clients and you will receive further update emails.</p>


<p>3. Disconnect</p>
<p>And finally we disconnect again, to release all server side resources:</p>
<pre>
SUBJECT:
&lt;messageId>&lt;sessionId>sessionId:127.0.0.2-null-1134492824506--1769759418-3&lt;/sessionId>&lt;requestId>2&lt;/requestId>&lt;/messageId>
CONTENT:
&lt;xmlBlaster>
  &lt;disconnect/>
&lt;/xmlBlaster>
</pre>


</example>



<example type="HTML">
<p class="celltitel">Example of the email structure</p>
<h3>This example shows the structure of an email transporting xmlBlaster messages:</h3>
<pre>
&lt;message>
  &lt;from>demo@localhost&lt;/from>
  &lt;to>xmlBlaster@localhost&lt;/to>
  &lt;subject>XmlBlaster Generated Email&lt;/subject>
  &lt;content>javax.mail.internet.MimeMultipart@16614e7&lt;/content>
  &lt;attachment>
    &lt;filename>xmlBlasterMessage.xml&lt;/filename>
    &lt;contenttype>text/plain; name=xmlBlasterMessage.xml; charset=UTF-8&lt;/contenttype>
    &lt;content><![CDATA[
<ping sessionId='unknown' requestId='1' type='I'>
</ping>
]]>&lt;/content>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>messageId.mid&lt;/filename>
    &lt;contenttype>text/plain; name=messageId.mid; charset=UTF-8&lt;/contenttype>
    &lt;content><![CDATA[&lt;messageId>&lt;sessionId>1132061265263000000&lt;/sessionId>
                &lt;requestId>1132965149890000000&lt;/requestId>
                &lt;methodName>ping&lt;/methodName>&lt;/messageId>
    ]]>&lt;/content>
  &lt;/attachment>
&lt;/message>
</pre>
<h3>The raw email content looks more like this</h3>
<pre>
Return-Path: &lt;demo@localhost>
Received: from localhost ([127.0.0.1])
          by linux (JAMES SMTP Server 2.2.0) with SMTP ID 248
          for &lt;xmlBlaster@localhost>;
          Thu, 17 Nov 2005 16:45:12 +0100 (CET)
Message-ID: &lt;5683514.1132242312629.JavaMail.root@linux>
Date: Thu, 17 Nov 2005 16:45:12 +0100 (CET)
From: demo@localhost
To: xmlBlaster@localhost
Subject: XmlBlaster Generated Email
MIME-Version: 1.0
Content-Type: multipart/mixed; 
   boundary="----=_Part_3_23776721.1132242312553"
Delivered-To: xmlBlaster@localhost

------=_Part_3_23776721.1132242312553
Content-Type: text/plain; name=attachment1.xml; charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename=attachment1.xml


&lt;update sessionId='unknown' requestId='5' type='R'>
 &lt;qos>&lt;state id='OK'/>&lt;/qos>
&lt;/update>

------=_Part_3_23776721.1132242312553
Content-Type: text/plain; name=attachment2; charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename=attachment2

&lt;messageId>&lt;sessionId>xmlblast&lt;/sessionId>&lt;requestId>5&lt;/requestId>&lt;methodName>update&lt;/methodName>&lt;/messageId>
------=_Part_3_23776721.1132242312553--
</pre>
</example>
   
    <configuration where="server">
    <h2 class="celltitel">Setup a POP3 and SMTP mail transfer agent (MTA)</h2>
    <p>The fastest way for a test environment is to use the James MTA http://james.apache.org. 
    Here are the steps for a running test environment (runs fine on Windows, Unix and Linux):
    </p>
    <p>Download james, unpack it and start it:</p>
<pre>
tar xzvf /opt/download/james-2.2.0.tar.gz
cd james-2.2.0/bin
# Change to be 'root' to have access to ports 25 (SMTP) and 110 (POP3)
./run.sh
</pre>

    <p>Configure some users, here we use <code>xmlBlaster</code> for the server and <code>demo</code> for the client:</p>
<pre>
telnet localhost 4555

# Login as 'root' with password 'root'

# Add users demo and xmlBlaster:
adduser xmlBlaster xmlBlaster
 User xmlBlaster added

adduser demo demo
 User demo added

listusers
 Existing accounts 2
 user: demo
 user: xmlBlaster

quit
</pre>
  <p>Now our MTA is ready for testing.</p>

  <p><b>Hint:</b> On UNIX and Linux you can avoid starting james as root.</p>
  <p>
  Just change the ports to be above 1000, you could change the SMTP port from 25 -> 8025
  and the POP3 port from 110 -> 8110.<br />
  Edit <code>james-2.2.0/apps/james-plus/SAR-INF/config.xml</code>
  to do this and remove the nntp service.
  Additionally add those ports to <code>xmlBlasterPlugins.xml</code>
  and <code>xmlBlaster.properties</code>, here is an example for SMTP <code>smtp://xmlBlaster:xmlBlaster@localhost:8025</code>
  and for POP3 <code>pop3://xmlBlaster:xmlBlaster@localhost:8110/INBOX</code>
  </p>

  <h2 class="celltitel">Debugging</h2>
<pre>
call[org.xmlBlaster.util.protocol.email.Pop3Driver] true
call[org.xmlBlaster.util.protocol.email.SmtpClient] true
call[org.xmlBlaster.util.protocol.email.EmailExecutor] true
</pre>

  <h2 class="celltitel">Example configuration server side</h2>
<p>The email driver plugin listening on incoming emails is configured in <code>xmlBlasterPlugins.xml</code>
 (for example listening on connect(), subscribe() and publish() requests)</p>
<pre>
   &lt;!-- General EMAIL SMTP client service -->
   &lt;!-- needed by 'email' plugin and 'CbProtocolPlugin[email][1.0]' plugin -->
   &lt;plugin id='smtp' className='org.xmlBlaster.util.protocol.email.SmtpClient'>
      &lt;action do='LOAD' onStartupRunlevel='4' sequence='7' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='4' sequence='9'/>   
      &lt;attribute id='mail.smtp.url'>smtp://xmlBlaster:xmlBlaster@localhost&lt;/attribute>
   &lt;/plugin>

   &lt;!-- General EMAIL POP3 polling service -->
   &lt;!-- needed by 'email' plugin and 'CbProtocolPlugin[email][1.0]' plugin -->
   &lt;plugin id='pop3' className='org.xmlBlaster.util.protocol.email.Pop3Driver'>
      &lt;action do='LOAD' onStartupRunlevel='4' sequence='9' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='4' sequence='7'/>   
      &lt;attribute id='mail.pop3.url'>pop3://xmlBlaster:xmlBlaster@localhost:110/INBOX&lt;/attribute>
      &lt;attribute id='pop3PollingInterval'>500&lt;/attribute>
   &lt;/plugin>

   &lt;!-- EMAIL protocol driver (please activate 'pop3' and 'smtp' service at an earlier runlevel) -->
   &lt;plugin id='email' className='org.xmlBlaster.protocol.email.EmailDriver'>
      &lt;action do='LOAD' onStartupRunlevel='7' sequence='10' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='7' sequence='10'/>
      &lt;attribute id='mail.smtp.from'>xmlBlaster@localhost&lt;/attribute>   
      &lt;attribute id='compress/type'>zlib&lt;/attribute>
      &lt;attribute id='compress/minSize'>200&lt;/attribute>
      &lt;attribute id='parserClass'>org.xmlBlaster.util.xbformat.XbfParser&lt;/attribute>
      &lt;attribute id='mail.subject'>XmlBlaster generated mail&lt;/attribute>
   &lt;/plugin>
</pre>

<p>The format of the returned messages from the xmlBlaster server to email clients
is configured in <code>xmlBlaster.properties</code> (for example PublishReturnQos, Update messages, ConnectReturnQos etc.)</p>
<pre>
CbProtocolPlugin[email][1.0]=org.xmlBlaster.protocol.email.CallbackEmailDriver,\
                             mail.user=xmlBlaster,\
                             mail.password=xmlBlaster,\
                             compress/type=zlib,\
                             compress/minSize=200,\
                             mail.subject=Server generated email,\
                             parserClass=org.xmlBlaster.util.xbformat.XbfParser
#                             parserClass=org.xmlBlaster.util.xbformat.XmlScriptParser

#plugin/email/responseTimeout=300000
#plugin/email/pingResponseTimeout=60000
#plugin/email/updateResponseTimeout=30000000
</pre>
<p>
The format of the message in the email is defined by our XbfParser (see protocl.socket requirement), additionally
messages bigger 200 bytes are compressed with zlib.
Optionally you can choose to send the message in clear text XML markup by using our XmlScriptParser
instead of XbfParser.
</p>

  <h2 class="celltitel">Example configuration for an email client</h2>
<p>The format of send messages from the client to the xmlBlaster server
or to listen on server messages
is configured in <code>xmlBlaster.properties</code> (for example sending publish() or receiving update() etc.)</p>
<pre>
ClientProtocolPlugin[email][1.0]=org.xmlBlaster.client.protocol.email.EmailConnection,\
                                 mail.smtp.url=smtp://demo:demo@localhost,\
                                 mail.smtp.from=demo@localhost,\
                                 mail.pop3.url=pop3://demo:demo@localhost/INBOX,\
                                 pop3PollingInterval=500,\
                                 holdbackExpireTimeout=20000,\
                                 compress/type=zlib,\
                                 compress/minSize=200,\
                                 parserClass=org.xmlBlaster.util.xbformat.XmlScriptParser
# parserClass=org.xmlBlaster.util.xbformat.XbfParser

# Register the client side callback server plugin (to listen on update() or publishReturnQos)
ClientCbServerProtocolPlugin[email][1.0]=
         org.xmlBlaster.client.protocol.email.EmailCallbackImpl,\
         mail.smtp.url=smtp://demo:demo@localhost,\
         mail.smtp.from=demo@localhost,\
         mail.pop3.url=pop3://demo:demo@localhost/INBOX,\
         pop3PollingInterval=500,\
         holdbackExpireTimeout=20000,\
         compress/type=zlib,\
         compress/minSize=200,\
         messageIdForceBase64=false,\
         contentForceBase64=false,\
         parserClass=org.xmlBlaster.util.xbformat.XbfParser
#schemaDeclaration=xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:noNamespaceSchemaLocation='mySchema.xsd',\
#xmlDeclaration=&lt;?xml version='1.0' encoding='UTF-8'?>,\
#mail.subject=Generated email,\
#sendResponseSessionId=false,\
#sendResponseRequestId=false,\
#sendSimpleExceptionFormat=true,\
#parserClass=org.xmlBlaster.util.xbformat.XmlScriptParser
</pre>
<p>The above client has chosen to don't compress the outgoing mails.
Further it sends the UpdateReturnQos in clear XML text instead
of using our native XfbParser protocol.
</p>

      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>mail.smtp.url</td>
            <td>smtp://demo:demo@localhost:25</td>
            <td>The SMTP connection URL, the port is optional</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.pop3.url</td>
            <td>pop3://demo:demo@localhost:110/INBOX</td>
            <td>The POP3 connection URL, the port is optional</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>ProtocolPlugin[email][1.0]</td>
            <td><pre>org.xmlBlaster.protocol.email.EmailDriver</pre></td>
            <td>You need to activate EMAIL support in your xmlBlaster.properties file
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>CbProtocolPlugin[email][1.0]</td>
            <td><pre>org.xmlBlaster.protocol.email.CallbackEmailDriver</pre></td>
            <td>You need to activate EMAIL support in your xmlBlaster.properties file
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
<!-- TODO:
plugin/email/schemaDeclaration=xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:noNamespaceSchemaLocation='avitech.xsd'
plugin/email/xmlDeclaration=<?xml version='1.0' encoding='UTF-8'?>
plugin/email/mail.subject=Generated Email
                                         sendResponseSessionId=false,\
                                         sendResponseRequestId=false,\
                                         sendSimpleExceptionFormat=true
call[org.xmlBlaster.util.protocol.email.Pop3Driver] true
call[org.xmlBlaster.util.protocol.email.SmtpClient] true
call[org.xmlBlaster.util.protocol.email.EmailExecutor] true

plugin/email/responseTimeout=60000
plugin/email/pingResponseTimeout=30000

   /** 
    * Setting this to true we can force the messageId attachment to
    * always be base64 encoded.
    * <br />
    * Javamail does base64 encoding automatically if need so
    * the default of this variable is false.
    */
   private boolean messageIdForceBase64;

   /** 
    * Setting this to true we can force the MsgUnit attachment to
    * always be base64 encoded.
    * <br />
    * Javamail does base64 encoding automatically if need so
    * the default of this variable is false.
    */
   private boolean contentForceBase64;


The requestId is requested to be strictly increasing
to detect email duplicates and assure sequency
-->
      </table>
      <h2>TODO: Add the other properties (currently see javadoc)</h2>
      <p>Note: You can easily re-configure the POP3 and SMTP behavior on a running xmlBlaster
      with JMX</p>
      <p>Note: The current email callback implementation can handle max one connection per email account
       (like 'joe' on the POP3 server) if you don't supply a positive sessionId</p>

   </configuration>
   <todo type="HTML">
Make last requestId persistent to have loop and sequence protection after a restart
   </todo>
   <see type="REQ">protocol</see>
   <see type="API">org.xmlBlaster.util.protocol.email.Pop3Driver</see>
   <see type="API">org.xmlBlaster.util.protocol.email.SmtpClient</see>
   <see type="API">org.xmlBlaster.protocol.email.EmailDriver</see>
   <author>mr@marcelruff.info</author>
   <date>2005 11 23</date>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.</test>
   </testcase>
</requirement>

