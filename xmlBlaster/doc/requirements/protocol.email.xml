<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='protocol.email' type='NEW' prio='HIGH' status="CLOSED">
   <topic>XmlBlaster has a protocol plugin to support access via email</topic>
   <description>
     <p>
     It is possible for a client to send/receive messages to xmlBlaster via email. This way the
     user can publish messages or receive updates via a common email client. In such cases there is
     no need of a client (besides the email client).
     </p>
     <p>
     There may be another usage of this protocol: in some cases it makes sense to write a client which
     uses the email protocol (transparently to the user) because the combination 
     harware, platform and implementation language does not offer a better communication alternative 
     or for example to bypass firewalls etc.
     </p>
     <p>
     A further usage would be to send / receive messages from a cellular phone via sms.
     </p>
     <p>
     Even if the email protocol in its nature has sessionless characteristics, we will create a session
     since this protocol may be used transparently by clients written following the protocol 
     abstraction paradigm. So before any publishing or subscription can be done, the user must 
     connect to get a session id.
     </p>
<!--
     <p>
     To simplify the usage, it is permitted to send any number of commands in a single email. It is 
     even permitted to send messages (publish messages) where the content of the message is sent as
     an attachment. This is useful where the contents are binary data (for example pictures).
     </p>
     <p>
     Every request to the xmlBlaster server must be valid xml and start with the element tag 
     'xmlBlaster'. If that is not the case, it will be threated in the exception handling. The 
     exception handling considers the following cases:
     <ul>
       <li><b>The content of the message does not start with pure xml</b>. Then it will be considered
           as an error has occured in sending an acknowledge to the client and a delivery problem
           aroze. In such cases the message is striped and the xml content is extracted. The xml
           content is logged and an exception is thrown (then a manual redelivery can be done).
           If no xml content is found an exception is thrown and the message is rejected.
       </li>
       <li><b>The content is correct xml but does not start with the 'xmlBlaster' tag.</b>Then an
           exception is thrown and the message is rejected (since it probably isn't intended for
           xmlBlaster). 
       </li>    
     </ul>
     </p>
     <p>
     The element tag 'xmlBlaster' accepts an attribute <pre>sendAck='true | false (true)'</pre>
     </p>
     <p>
     Commands which normally need a sessionId as a parameter have an alternative without sessionId
     for such cases where a 'connect' is done in the same email. This way you don't need to wait for
     the acknowledge telling you your session id and the result is a faster protocol and less 
     messages are needed.
     </p>      
     <p>
     Before a publish or a subscribe can be done, connect must be invoked. This can be done on the
     same email (in which case you don't need to specify your sessionId for the further commands).
     </p>
      <p/>

       <pre>

&lt;xmlBlaster>
   &lt;connect>
      &lt;securityPlugin type='simple' version='1.0'>
         &lt;xmlBlaster:user>fritz&lt;/xmlBlaster:user>
         &lt;passwd>&lt;![CDATA[secret    ]]&gt;&lt;/passwd>
      &lt;/securityPlugin>
   &lt;/connect>
   &lt;publish>
      &lt;key>xxxx&lt;/key>
      &lt;content xlink='sss.jpg'/>
      &lt;qos>&lt;/qos>
   &lt;/publish>
   &lt;subscribe/>
   &lt;disconnect/>
&lt;/xmlBlaster>

       </pre>
-->
<p>Supported formats</p>
<pre>
XfbParser:
  mimeType="application/xmlBlaster-xbfz; name=xmlBlasterMessage.xbfz"
  fileName=xmlBlasterMessage.xbf


XmlScriptParser:
  mimeType="text/plain; name=xmlBlasterMessage.xml; charset=UTF-8"
  fileName = "xmlBlasterMessage.xml"      

  messageId = "xmlBlaster.mid"


</pre>

</description>

<example type="html">
<pre>
&lt;message>
  &lt;from>demo@localhost&lt;/from>
  &lt;to>xmlBlaster@localhost&lt;/to>
  &lt;subject>XmlBlaster Generated Email&lt;/subject>
  &lt;content>javax.mail.internet.MimeMultipart@16614e7&lt;/content>
  &lt;attachment>
    &lt;filename>xmlBlasterMessage.xml&lt;/filename>
    &lt;contenttype>text/plain; name=xmlBlasterMessage.xml; charset=UTF-8&lt;/contenttype>
    &lt;content><![CDATA[
&lt;ping sessionId='unknown' requestId='1' type='I'>
&lt;/ping>
]]>&lt;/content>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>messageId.mid&lt;/filename>
    &lt;contenttype>text/plain; name=messageId.mid; charset=UTF-8&lt;/contenttype>
    &lt;content><![CDATA[&lt;messageId>&lt;sessionId>1132061265263000000&lt;/sessionId>
                &lt;requestId>1&lt;/requestId>
                &lt;methodName>ping&lt;/methodName>&lt;/messageId>
    ]]>&lt;/content>
  &lt;/attachment>
&lt;/message>
</pre>
</example>
   
    <configuration where="server">
    <h2>Setup a POP3 and SMTP mail transfer agent (MTA)</h2>
    <p>The fastest way for a test environment is to use the James MTA http://james.apache.org
    Here are the steps for a running test environment (runs fine on Windows or on Unix/Linux):
    </p>
<pre>
tar xzvf /opt/download/james-2.2.0.tar.gz
cd james-2.2.0/bin
# Change to be 'root' to have access to ports 25 (SMTP) and 110 (POP3)
./run.sh

##### Configure some users:
telnet localhost 4555

# Login as 'root' with password 'root'

# Add users demo and xmlBlaster:
adduser xmlBlaster xmlBlaster
 User xmlBlaster added

adduser demo demo
 User demo added

listusers
 Existing accounts 2
 user: demo
 user: xmlBlaster

quit
</pre>
  <p>Now our MTA is ready for testing.</p>

  <h2>Debugging</h2>
<pre>
call[org.xmlBlaster.util.protocol.email.Pop3Driver] true
call[org.xmlBlaster.util.protocol.email.SmtpClient] true
call[org.xmlBlaster.util.protocol.email.EmailExecutor] true
</pre>

  <h2>Example configuration server side</h2>
<p>The email driver plugin listening on incoming emails is configured in <code>xmlBlasterPlugins.xml</code>
 (for example listening on connect(), subscribe() and publish() requests)</p>
<pre>
   &lt;!-- General EMAIL SMTP client service -->
   &lt;!-- needed by 'email' plugin and 'CbProtocolPlugin[email][1.0]' plugin -->
   &lt;plugin id='smtp' className='org.xmlBlaster.util.protocol.email.SmtpClient'>
      &lt;action do='LOAD' onStartupRunlevel='4' sequence='7' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='4' sequence='9'/>   
      &lt;attribute id='mail.user'>xmlBlaster&lt;/attribute>
      &lt;attribute id='mail.password'>xmlBlaster&lt;/attribute>
   &lt;/plugin>

   &lt;!-- General EMAIL POP3 polling service -->
   &lt;!-- needed by 'email' plugin and 'CbProtocolPlugin[email][1.0]' plugin -->
   &lt;plugin id='pop3' className='org.xmlBlaster.util.protocol.email.Pop3Driver'>
      &lt;action do='LOAD' onStartupRunlevel='4' sequence='9' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='4' sequence='7'/>   
      &lt;attribute id='mail.pop3.url'>pop3://xmlBlaster:xmlBlaster@localhost:110/INBOX&lt;/attribute>
      &lt;attribute id='activate'>false&lt;/attribute>
      &lt;attribute id='pop3PollingInterval'>500&lt;/attribute>
   &lt;/plugin>

   &lt;!-- EMAIL protocol driver (please activate 'pop3' and 'smtp' service at an earlier runlevel) -->
   &lt;plugin id='email' className='org.xmlBlaster.protocol.email.EmailDriver'>
      &lt;action do='LOAD' onStartupRunlevel='7' sequence='10' 
              onFail='resource.configuration.pluginFailed'/>
      &lt;action do='STOP' onShutdownRunlevel='7' sequence='10'/>
      &lt;attribute id='mail.smtp.from'>xmlBlaster@localhost&lt;/attribute>   
      &lt;attribute id='compress/type'>zlib&lt;/attribute>
      &lt;attribute id='compress/minSize'>200&lt;/attribute>
      &lt;attribute id='parserClass'>org.xmlBlaster.util.xbformat.XmlScriptParser&lt;/attribute>
      &lt;attribute id='mail.subject'>XmlBlaster Generated&lt;/attribute>
   &lt;/plugin>
</pre>

<p>The format of the returned messages from the xmlBlaster server to email clients
is configured in <code>xmlBlaster.properties</code> (for example PublishReturnQos, Update messages, ConnectReturnQos etc.)</p>
<pre>
CbProtocolPlugin[email][1.0]=org.xmlBlaster.protocol.email.CallbackEmailDriver,\
                             mail.user=xmlBlaster,\
                             mail.password=xmlBlaster,\
                             compress/minSize=200,\
                             compress/type=zlib,\
                             parserClass=org.xmlBlaster.util.xbformat.XbfParser
#                             parserClass=org.xmlBlaster.util.xbformat.XmlScriptParser
</pre>
<p>
The format of the message in the email is defined by our XbfParser (see protocl.socket requirement), additionally
messages bigger 200 bytes are compressed with zlib.
Optionally you can choose to send the message in clear text XML markup by using our XmlScriptParser
instead of XbfParser.
</p>

  <h2>Example configuration for an email client</h2>
<p>The format of send messages from the client to the xmlBlaster server
or to listen on server messages
is configured in <code>xmlBlaster.properties</code> (for example sending publish() or receiving update() etc.)</p>
<pre>
ClientProtocolPlugin[email][1.0]=\
      org.xmlBlaster.client.protocol.email.EmailConnection,\
      mail.user=demo,\
      mail.password=demo,\
      mail.pop3.url=pop3://demo:demo@localhost/INBOX,\
      pop3PollingInterval=500,\
      compress/minSize=200,\
      parserClass=org.xmlBlaster.util.xbformat.XbfParser
#compress/type=zlib,\
#parserClass=org.xmlBlaster.util.xbformat.XmlScriptParser

# Register the client side callback server plugin (to listen on update() or publishReturnQos)
ClientCbServerProtocolPlugin[email][1.0]=\
      org.xmlBlaster.client.protocol.email.EmailCallbackImpl,\
      mail.user=demo,\
      mail.password=demo,\
      mail.pop3.url=pop3://demo:demo@localhost/INBOX,\
      compress/minSize=200,\
      parserClass=org.xmlBlaster.util.xbformat.XmlScriptParser
#parserClass=org.xmlBlaster.util.xbformat.XbfParser
#compress/type=zlib,\
</pre>
<p>The above client has chosen to don't compress the outgoing mails.
Further it sends the UpdateReturnQos in clear XML text instead
of using our native XfbParser protocol.
</p>

      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>mail.smtp.host</td>
            <td>localhost</td>
            <td>Specify a hostname where the SMTP server runs
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.user</td>
            <td>xmlBlaster</td>
            <td>The EMAIL user account
                </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>mail.pop3.url</td>
            <td>pop3://demo:demo@localhost/INBOX</td>
            <td>The POP3 connection URL</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>ProtocolPlugin[email][1.0]</td>
            <td><pre>org.xmlBlaster.protocol.email.EmailDriver</pre></td>
            <td>You need to activate EMAIL support in your xmlBlaster.properties file
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>CbProtocolPlugin[email][1.0]</td>
            <td><pre>org.xmlBlaster.protocol.email.CallbackEmailDriver</pre></td>
            <td>You need to activate EMAIL support in your xmlBlaster.properties file
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
<!-- TODO:
plugin/email/schemaDeclaration=xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:noNamespaceSchemaLocation='avitech.xsd'
plugin/email/xmlDeclaration=<?xml version='1.0' encoding='UTF-8'?>
plugin/email/mail.subject=Generated Email
                                         sendResponseSessionId=false,\
                                         sendResponseRequestId=false,\
                                         sendSimpleExceptionFormat=true
call[org.xmlBlaster.util.protocol.email.Pop3Driver] true
call[org.xmlBlaster.util.protocol.email.SmtpClient] true
call[org.xmlBlaster.util.protocol.email.EmailExecutor] true

plugin/email/responseTimeout=60000
plugin/email/pingResponseTimeout=30000
-->
      </table>
   </configuration>
   <todo>
   </todo>
   <see type="REQ">protocol</see>
   <!-- <see type="API">org.xmlBlaster.protocol.email.EmailDriver</see> -->
   <author>laghi@swissinfo.org</author>
   <date>2002 09 23</date>
   <revision>$Revision: 1.4 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.</test>
   </testcase>
</requirement>

