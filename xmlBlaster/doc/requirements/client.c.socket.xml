<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">


<requirement id='client.c.socket' type='NEW' prio='HIGH' status='CLOSED'>
   <topic>
      XmlBlaster provides a client library written in ANSI C
   </topic>
   <description>
     <p>
     For C client applications you can use the header XmlBlasterAccessUnparsed.h which provides access to
     xmlBlaster in an easy way.
     </p>
     <h3>Features</h3>
     <ul>
        <li> Support on many OS like Windows, Windows-CE / Pocket PC,
             UNIX, Linux and the code is easy portable to embedded devices</li>

        <li> Compiles with C or with C++ compiler</li>

        <li> The communication protocol is based on the xmlBlaster internal SOCKET protocol</li>
        <li> Object/executable size is only 25 - 40 KBytes</li>
        
        <li> Supports synchronous xmlBlaster access with
          connect(), disconnect(), get(), publish(), erase(), ping()<br/>
          See example: XmlBlasterConnectionUnparsedMain.c</li>
        
        <li> Supports asynchronous access with client callback update()<br/>
          See example: CallbackServerUnparsed.c</li>

        <li> Supports sync and async communications with pthreads.<br/>
          Tested on Linux and Solaris and Windows, see example <i>XmlBlasterAccessUnparsed.c</i><br/>
          Uses posix threads DLL for Win, PocketPC, WinCE from
             http://sources.redhat.com/pthreads-win32<br/>
             This LGPL lib is included in our distribution 
             xmlBlaster/src/c/socket/pthreadVC.lib</li>

        <li> Reports exceptions nicely back to the client</li>

        <li> The client side xmlBlasterAccessUnparsed structure has function pointers
          for all methods to have object oriented like access,
          see HelloWorld.c as a usage example</li>

        <li> You can create multiple independent instances of client connections or callback servers
          and they can run in parallel.</li>

        <li> The access library and the callback library is thread safe (no global variables).
          </li>

        <li> The callback messages reuse the synchronous socket connection to tunnel
             messages back to the client. This makes possible a simple fire wall tunneling.
          </li>

        <li> The code is tested on memory leaks with valgrind and partially statically
             checked with splint.
          </li>
    </ul>

     <h3>Functionality</h3>
     <p>
     All invocations to xmlBlaster are done by invoking function pointers
     on struct XmlBlasterAccessUnparsed.
     </p>
     <p>
     <ul>
     <li>for connecting read the <a href="interface.connect.html">connect interface</a></li>
     <li>for disconnecting read the <a href="interface.disconnect.html">disconnect interface</a></li>
     <li>for erasing read the  <a href="interface.erase.html">erase interface</a></li>
     <li>for getting read the  <a href="interface.get.html">get interface</a></li>
     <li>for publishing read the  <a href="interface.publish.html">publish interface</a></li>
     <li>for subscribing read the  <a href="interface.subscribe.html">subscribe interface</a></li>
     <li>for unsubscribing read the  <a href="interface.unSubscribe.html">unSubscribe interface</a></li>
     <li>for callbacks read the  <a href="interface.update.html">update interface</a></li>
     </ul>
     </p>

     <h3>Memory footprint</h3>
     <p>
     On Linux the 'hello world' client executable has a very little footprint,
     on Windows you need to add the pthreadVC.lib size of ~ 29 kBytes:
     </p>
     <pre>
1. Complete synchronous access (without callback and single threaded):

 XmlBlasterConnectionUnparsedMain:  26 kBytes

   libc.so.6 => /lib/libc.so.6 (0x4002b000)
   /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)

2. Complete client connection and multi threaded callback server:

 XmlBlasterAccessUnparsedMain:      41 kBytes

   libpthread.so.0 => /lib/libpthread.so.0 (0x4002b000)
   libc.so.6 => /lib/libc.so.6 (0x4007b000)
   /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
     </pre>
     <h3>Compilation</h3>
     <p>
     You can try the ant based compilation, our build.xml supports
     Linux gcc, Solaris CC and Windows VC++:
     </p>
     <pre>
cd xmlBlaster
build.sh c-lib   (Use build.bat on Windows)
     </pre>
     <p>
     This creates a shared C library <i>xmlBlaster/lib/libxmlBlasterClientC.sl</i> on
     Linux or <i>xmlBlaster/lib/libxmlBlasterClientC.dll</i> on Windows.
     You can link your C or C++ client code with this library.
     </p>
     <p>
     Here are some complete examples how to compile a simple C client 'manually':
     </p>
     <pre>
cd xmlBlaster/src/c

Linux C:
   gcc -Wall -g -I. -o HelloWorld HelloWorld.c msgUtil.c
       socket/XmlBlasterConnectionUnparsed.c socket/xmlBlasterSocket.c

Linux C++:
   g++ -Wall -g -I. -o HelloWorld HelloWorld.c msgUtil.c
       socket/XmlBlasterConnectionUnparsed.c socket/xmlBlasterSocket.c

Windows:
   cl -D_WINDOWS -I. HelloWorld.c msgUtil.c socket\XmlBlasterConnectionUnparsed.c
                                   socket\xmlBlasterSocket.c ws2_32.lib

Solaris:
   cc -Xc -g -I. -o HelloWorld HelloWorld.c msgUtil.c
      socket/XmlBlasterConnectionUnparsed.c socket/xmlBlasterSocket.c -lsocket -lnsl
     </pre>
     <p>
     To compile a multi threaded client with synchronous access and asynchronous
     callbacks:
     </p>
     <pre>
cd xmlBlaster/src/c/socket

Linux C:
   gcc -DXmlBlasterAccessUnparsedMain -Wall -pedantic -g -D_REENTRANT -I..
       -o XmlBlasterAccessUnparsedMain XmlBlasterAccessUnparsed.c ../msgUtil.c
       xmlBlasterSocket.c XmlBlasterConnectionUnparsed.c CallbackServerUnparsed.c
       -lpthread

Windows:
   cl /MT /W4 -DXmlBlasterAccessUnparsedMain -D_WINDOWS -I.. -I../pthreads
      /FeXmlBlasterAccessUnparsedMain.exe  XmlBlasterAccessUnparsed.c ..\msgUtil.c
      xmlBlasterSocket.c XmlBlasterConnectionUnparsed.c CallbackServerUnparsed.c
      ws2_32.lib pthreadVC.lib
    
Solaris:
   cc  -DXmlBlasterAccessUnparsedMain -v -Xc -g -D_REENTRANT -I..
       -o XmlBlasterAccessUnparsedMain XmlBlasterAccessUnparsed.c ../msgUtil.c
       xmlBlasterSocket.c XmlBlasterConnectionUnparsed.c
       CallbackServerUnparsed.c -lpthread -lsocket -lnsl
     </pre>
     <p>
     Compilation hints are in the source files 
     <i>xmlBlaster/src/c/XmlBlasterConnectionUnparsedMain.c</i> (for synchronous access)
     <i>xmlBlaster/src/c/socket/XmlBlasterAccessUnparsed.c</i> (for complete multi threaded access including callbacks).
     </p>
     <h3>Implementation detail</h3>
     <p>
     The C library consists of 3 independent modules which are <i>XmlBlasterConnectionUnparsed</i>
     for synchronous access, <i>CallbackServerUnparsed</i> for the client callbacks and
     <i>XmlBlasterAccessUnparsed</i> which reuses the first two modules and combines them
     with multi threading to gain complete xmlBlaster functionality.
     The following sequence diagram shows a use case of a get() invocation, the
     threads are synchronized using the worker/boss paradigm with the wait/signal 
     approach of pthreads.
     </p>
     <p>
     <img src="client.c.socket.sequence.gif" border="0" alt="Client C Sequence Diagram"/>
     </p>
     <p>
     A demo using XmlRpc is available as well (see xmlBlaster/demo/c/xmlrpc/README).
     </p>
   </description>
   <example lang="C" type="HTML">
      <p><a NAME="example"></a></p>
      <p>
      This example shows a single threaded synchronous access:
      </p>

<pre bgcolor="#ffffff" text="#000000">
<a name="line1" href="#line1"> 1</a> <font color="#444444">/*----------------------------------------------------------------------------
<a name="line2" href="#line2"> 2</a> Name:      HelloWorld.c
<a name="line3" href="#line3"> 3</a> Project:   xmlBlaster.org
<a name="line4" href="#line4"> 4</a> Copyright: xmlBlaster.org, see xmlBlaster-LICENSE file
<a name="line5" href="#line5"> 5</a> Comment:   HelloWorld connects with raw socket to xmlBlaster
<a name="line6" href="#line6"> 6</a> Author:    &quot;Marcel Ruff&quot; &lt;xmlBlaster@marcelruff.info&gt;
<a name="line7" href="#line7"> 7</a> Compile:
<a name="line8" href="#line8"> 8</a>   Linux:   gcc -Wall -g -D_REENTRANT -I. -o HelloWorld HelloWorld.c msgUtil.c
<a name="line9" href="#line9"> 9</a>            socket/xmlBlasterSocket.c socket/XmlBlasterConnectionUnparsed.c
<a name="line10" href="#line10">10</a>   Win: cl /MT /W3 /Wp64 -D_WINDOWS -I. HelloWorld.c msgUtil.c socket\*.c ws2_32.lib
<a name="line11" href="#line11">11</a>   Sun: cc -g -D_REENTRANT -I. -o HelloWorld HelloWorld.c msgUtil.c
<a name="line12" href="#line12">12</a>        socket/xmlBlasterSocket.c socket/XmlBlasterConnectionUnparsed.c -lsocket -lnsl
<a name="line13" href="#line13">13</a> Date:      05/2003
<a name="line14" href="#line14">14</a> -----------------------------------------------------------------------------*/</font>
<a name="line15" href="#line15">15</a> <font color="0000ff"><strong>#include <font color="#008000">&lt;stdio.h&gt;</font></strong></font>
<a name="line16" href="#line16">16</a> <font color="0000ff"><strong>#include <font color="#008000">&lt;stdlib.h&gt;</font></strong></font>
<a name="line17" href="#line17">17</a> <font color="0000ff"><strong>#include <font color="#008000">&lt;string.h&gt;</font></strong></font>
<a name="line18" href="#line18">18</a> <font color="0000ff"><strong>#include <font color="#008000">&lt;XmlBlasterConnectionUnparsed.h&gt;</font></strong></font>
<a name="line19" href="#line19">19</a> 
<a name="line20" href="#line20">20</a> <font color="#444444"><i>/**
<a name="line21" href="#line21">21</a>  * Access the free memory in the server. 
<a name="line22" href="#line22">22</a>  */</i></font>
<a name="line23" href="#line23">23</a> <strong>int</strong> <font color="#2040a0">main</font><font color="4444FF">(</font><strong>int</strong> <font color="#2040a0">argc</font>, <strong>char</strong><font color="4444FF">*</font><font color="4444FF">*</font> <font color="#2040a0">argv</font><font color="4444FF">)</font>
<a name="line24" href="#line24">24</a> <font color="4444FF"><strong>{</strong></font>
<a name="line25" href="#line25">25</a>    <font color="#2040a0">MsgUnitArr</font> <font color="4444FF">*</font><font color="#2040a0">msgUnitArr</font><font color="4444FF">;</font>
<a name="line26" href="#line26">26</a>    <font color="#2040a0">XmlBlasterException</font> <font color="#2040a0">exception</font><font color="4444FF">;</font>
<a name="line27" href="#line27">27</a>    <strong>char</strong> <font color="4444FF">*</font><font color="#2040a0">connectQos</font>, <font color="4444FF">*</font><font color="#2040a0">response</font><font color="4444FF">;</font>
<a name="line28" href="#line28">28</a>    
<a name="line29" href="#line29">29</a>    <font color="#2040a0">XmlBlasterConnectionUnparsed</font> <font color="4444FF">*</font><font color="#2040a0">xb</font> <font color="4444FF">=</font> <font color="#2040a0">getXmlBlasterConnectionUnparsed</font><font color="4444FF">(</font><font color="#2040a0">argc</font>, <font color="#2040a0">argv</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line30" href="#line30">30</a> 
<a name="line31" href="#line31">31</a>    <font color="#2040a0">connectQos</font> <font color="4444FF">=</font>   <font color="#008000">&quot;&lt;qos&gt;&quot;</font>
<a name="line32" href="#line32">32</a>                   <font color="#008000">&quot; &lt;securityService type='htpasswd' version='1.0'&gt;&quot;</font>
<a name="line33" href="#line33">33</a>                   <font color="#008000">&quot;   &lt;user&gt;fritz&lt;/user&gt;&quot;</font>
<a name="line34" href="#line34">34</a>                   <font color="#008000">&quot;   &lt;passwd&gt;secret&lt;/passwd&gt;&quot;</font>
<a name="line35" href="#line35">35</a>                   <font color="#008000">&quot; &lt;/securityService&gt;&quot;</font>
<a name="line36" href="#line36">36</a>                   <font color="#008000">&quot;&lt;/qos&gt;&quot;</font><font color="4444FF">;</font>
<a name="line37" href="#line37">37</a>    <font color="#2040a0">response</font> <font color="4444FF">=</font> <font color="#2040a0">xb</font><font color="4444FF">-</font><font color="4444FF">&gt;</font><font color="#2040a0">connect</font><font color="4444FF">(</font><font color="#2040a0">xb</font>, <font color="#2040a0">connectQos</font>, <font color="4444FF">&amp;</font><font color="#2040a0">exception</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line38" href="#line38">38</a>    <font color="#2040a0">free</font><font color="4444FF">(</font><font color="#2040a0">response</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line39" href="#line39">39</a>    <strong>if</strong> <font color="4444FF">(</font><font color="4444FF">*</font><font color="#2040a0">exception</font>.<font color="#2040a0">errorCode</font> <font color="4444FF">!</font><font color="4444FF">=</font> <font color="#FF0000">0</font><font color="4444FF">)</font> <font color="4444FF"><strong>{</strong></font>
<a name="line40" href="#line40">40</a>       <font color="#2040a0">printf</font><font color="4444FF">(</font><font color="#008000">&quot;[client] Caught exception during connect, errorCode=%s, message=%s&quot;</font>,
<a name="line41" href="#line41">41</a>              <font color="#2040a0">exception</font>.<font color="#2040a0">errorCode</font>, <font color="#2040a0">exception</font>.<font color="#2040a0">message</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line42" href="#line42">42</a>       <font color="#2040a0">freeXmlBlasterConnectionUnparsed</font><font color="4444FF">(</font><font color="#2040a0">xb</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line43" href="#line43">43</a>       <font color="#2040a0">exit</font><font color="4444FF">(</font><font color="#FF0000">1</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line44" href="#line44">44</a>    <font color="4444FF"><strong>}</strong></font>
<a name="line45" href="#line45">45</a> 
<a name="line46" href="#line46">46</a>    <font color="#2040a0">printf</font><font color="4444FF">(</font><font color="#008000">&quot;[HelloWorld] Connected to xmlBlaster, invoking now get() ...<font color="#77dd77">\n</font>&quot;</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line47" href="#line47">47</a>    
<a name="line48" href="#line48">48</a>    <font color="#2040a0">msgUnitArr</font> <font color="4444FF">=</font> <font color="#2040a0">xb</font><font color="4444FF">-</font><font color="4444FF">&gt;</font><font color="#2040a0">get</font><font color="4444FF">(</font><font color="#2040a0">xb</font>, <font color="#008000">&quot;&lt;key oid='__cmd:?freeMem'/&gt;&quot;</font>, <font color="#FF0000">0</font>, <font color="4444FF">&amp;</font><font color="#2040a0">exception</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line49" href="#line49">49</a>    <strong>if</strong> <font color="4444FF">(</font><font color="4444FF">*</font><font color="#2040a0">exception</font>.<font color="#2040a0">errorCode</font> <font color="4444FF">!</font><font color="4444FF">=</font> <font color="#FF0000">0</font><font color="4444FF">)</font> <font color="4444FF"><strong>{</strong></font>
<a name="line50" href="#line50">50</a>       <font color="#2040a0">printf</font><font color="4444FF">(</font><font color="#008000">&quot;[HelloWorld] Caught exception in get errorCode=%s, message=%s&quot;</font>,
<a name="line51" href="#line51">51</a>              <font color="#2040a0">exception</font>.<font color="#2040a0">errorCode</font>, <font color="#2040a0">exception</font>.<font color="#2040a0">message</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line52" href="#line52">52</a>       <font color="#2040a0">freeXmlBlasterConnectionUnparsed</font><font color="4444FF">(</font><font color="#2040a0">xb</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line53" href="#line53">53</a>       <font color="#2040a0">exit</font><font color="4444FF">(</font><font color="#FF0000">1</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line54" href="#line54">54</a>    <font color="4444FF"><strong>}</strong></font>
<a name="line55" href="#line55">55</a>    <strong>if</strong> <font color="4444FF">(</font><font color="#2040a0">msgUnitArr</font> <font color="4444FF">!</font><font color="4444FF">=</font> <font color="4444FF">(</font><font color="#2040a0">MsgUnitArr</font> <font color="4444FF">*</font><font color="4444FF">)</font><font color="#FF0000">0</font> <font color="4444FF">&amp;</font><font color="4444FF">&amp;</font> <font color="#2040a0">msgUnitArr</font><font color="4444FF">-</font><font color="4444FF">&gt;</font><font color="#2040a0">len</font> <font color="4444FF">&gt;</font> <font color="#FF0000">0</font><font color="4444FF">)</font> <font color="4444FF"><strong>{</strong></font>
<a name="line56" href="#line56">56</a>       <strong>char</strong> <font color="4444FF">*</font><font color="#2040a0">contentStr</font> <font color="4444FF">=</font> <font color="#2040a0">strFromBlobAlloc</font><font color="4444FF">(</font><font color="#2040a0">msgUnitArr</font><font color="4444FF">-</font><font color="4444FF">&gt;</font><font color="#2040a0">msgUnitArr</font><font color="4444FF">[</font><font color="#FF0000">0</font><font color="4444FF">]</font>.<font color="#2040a0">content</font>,
<a name="line57" href="#line57">57</a>                                           <font color="#2040a0">msgUnitArr</font><font color="4444FF">-</font><font color="4444FF">&gt;</font><font color="#2040a0">msgUnitArr</font><font color="4444FF">[</font><font color="#FF0000">0</font><font color="4444FF">]</font>.<font color="#2040a0">contentLen</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line58" href="#line58">58</a>       <font color="#2040a0">printf</font><font color="4444FF">(</font><font color="#008000">&quot;[HelloWorld] xmlBlaster has %s bytes of free memory<font color="#77dd77">\n</font>&quot;</font>, <font color="#2040a0">contentStr</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line59" href="#line59">59</a>       <font color="#2040a0">free</font><font color="4444FF">(</font><font color="#2040a0">contentStr</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line60" href="#line60">60</a>    <font color="4444FF"><strong>}</strong></font>
<a name="line61" href="#line61">61</a>    <font color="#2040a0">freeMsgUnitArr</font><font color="4444FF">(</font><font color="#2040a0">msgUnitArr</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line62" href="#line62">62</a>    
<a name="line63" href="#line63">63</a>    <font color="#2040a0">xb</font><font color="4444FF">-</font><font color="4444FF">&gt;</font><font color="#2040a0">disconnect</font><font color="4444FF">(</font><font color="#2040a0">xb</font>, <font color="#FF0000">0</font>, <font color="4444FF">&amp;</font><font color="#2040a0">exception</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line64" href="#line64">64</a> 
<a name="line65" href="#line65">65</a>    <font color="#2040a0">freeXmlBlasterConnectionUnparsed</font><font color="4444FF">(</font><font color="#2040a0">xb</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line66" href="#line66">66</a>    <font color="#2040a0">printf</font><font color="4444FF">(</font><font color="#008000">&quot;[HelloWorld] Good bye.<font color="#77dd77">\n</font>&quot;</font><font color="4444FF">)</font><font color="4444FF">;</font>
<a name="line67" href="#line67">67</a>    <strong>return</strong> <font color="#FF0000">0</font><font color="4444FF">;</font>
<a name="line68" href="#line68">68</a> <font color="4444FF"><strong>}</strong></font>
</pre>

   </example>

   <example lang="C" type="HTML">
      <p><a NAME="example"></a></p>
      <p>
      This example shows a multi threaded access with asynchronous callbacks:
      </p>
   <pre><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <XmlBlasterAccessUnparsed.h>

/**
 * Here we receive the callback messages from xmlBlaster
 */
bool myUpdate(MsgUnitArr *msgUnitArr, XmlBlasterException *xmlBlasterException)
{
   size_t i;
   bool testException = false;
   for (i=0; i<msgUnitArr->len; i++) {
      char *xml = messageUnitToXml(&msgUnitArr->msgUnitArr[i]);
      printf("[client] CALLBACK update(): Asynchronous message update arrived:%s\n", xml);
      free(xml);
      msgUnitArr->msgUnitArr[i].responseQos = strcpyAlloc("<qos><state id='OK'/></qos>");
      /* Return QoS: Everything is OK */
   }
   if (testException) {
      strncpy0(xmlBlasterException->errorCode, "user.clientCode",
               XMLBLASTEREXCEPTION_ERRORCODE_LEN);
      strncpy0(xmlBlasterException->message, "I don't want these messages",
               XMLBLASTEREXCEPTION_MESSAGE_LEN);
      return false;
   }
   return true;
}

/**
 * Invoke: XmlBlasterAccessUnparsedMain -debug true  -numTests 10
 */
int main(int argc, char** argv)
{
   int ii;
   int numTests = 1;
   for (ii=0; ii < argc-1; ii++)
      if (strcmp(argv[ii], "-numTests") == 0)
         sscanf(argv[++ii], "%d", &numTests);

   for (ii=0; ii<numTests; ii++) {
      int iarg;
      char *response = (char *)0;
      /*
       * callbackSessionId:
       * Is created by the client and used to validate callback messages in update. 
       * This is sent on connect in ConnectQos.
       * (Is different from the xmlBlaster secret session ID)
       */
      const char *callbackSessionId = "topSecret";
      XmlBlasterException xmlBlasterException;
      XmlBlasterAccessUnparsed *xa = 0;
      bool debug = false;

#     ifdef PTHREAD_THREADS_MAX
         printf("[client] Try option '-help' if you need usage informations, max %d"
                " threads per process are supported on this OS\n", PTHREAD_THREADS_MAX);
#     else
         printf("[client] Try option '-help' if you need usage informations\n");
#     endif

      for (iarg=0; iarg < argc; iarg++) {
         if (strcmp(argv[iarg], "-help") == 0 || strcmp(argv[iarg], "--help") == 0) {
            char usage[XMLBLASTER_MAX_USAGE_LEN];
            const char *pp =
            "\n  -debug               true/false [false]"
            "\n  -numTests            How often to run the same tests [1]"
            "\n\nExample:"
            "\n  XmlBlasterAccessUnparsedMain -debug true"
                 " -dispatch/connection/plugin/socket/hostname server.mars.universe";
            printf("Usage:\n%s%s\n", xmlBlasterAccessUnparsedUsage(usage), pp);
            exit(1);
         }
      }

      for (iarg=0; iarg < argc-1; iarg++) {
         if (strcmp(argv[iarg], "-debug") == 0)
            debug = !strcmp(argv[++iarg], "true");
      }

      xa = getXmlBlasterAccessUnparsed(argc, argv);
      if (xa->initialize(xa, myUpdate) == false) {
         printf("[client] Connection to xmlBlaster failed,"
                " please start the server or check your configuration\n");
         freeXmlBlasterAccessUnparsed(xa);
         exit(1);
      }

      {  /* connect */
         char connectQos[2048];
         char callbackQos[1024];
         sprintf(callbackQos,
                  "<queue relating='callback' maxEntries='100' maxEntriesCache='100'>"
                  "  <callback type='SOCKET' sessionId='%s'>"
                  "    socket://%s:%d"
                  "  </callback>"
                  "</queue>",
                  callbackSessionId, xa->callbackP->hostCB, xa->callbackP->portCB);
         sprintf(connectQos,
                "<qos>"
                " <securityService type='htpasswd' version='1.0'>"
                "   <user>fritz</user>"
                "   <passwd>secret</passwd>"
                " </securityService>"
                "%s"
                "</qos>", callbackQos);

         response = xa->connect(xa, connectQos, myUpdate, &xmlBlasterException);
         if (*xmlBlasterException.errorCode != 0) {
            printf("[client] Caught exception during connect errorCode=%s, message=%s\n",
                   xmlBlasterException.errorCode, xmlBlasterException.message);
            freeXmlBlasterAccessUnparsed(xa);
            exit(1);
         }
         free(response);
         printf("[client] Connected to xmlBlaster, do some tests ...\n");
      }

      response = xa->ping(xa, 0);
      if (response == (char *)0) {
         printf("[client] ERROR: Pinging a connected server failed\n");
      }
      else {
         printf("[client] Pinging a connected server, response=%s\n", response);
         free(response);
      }

      { /* subscribe ... */
         const char *key = "<key oid='HelloWorld'/>";
         const char *qos = "<qos/>";
         printf("[client] Subscribe message 'HelloWorld' ...\n");
         response = xa->subscribe(xa, key, qos, &xmlBlasterException);
         if (*xmlBlasterException.errorCode != 0) {
            printf("[client] Caught exception in subscribe errorCode=%s, message=%s\n",
                   xmlBlasterException.errorCode, xmlBlasterException.message);
            xa->disconnect(xa, 0, &xmlBlasterException);
            freeXmlBlasterAccessUnparsed(xa);
            exit(1);
         }
         printf("[client] Subscribe success, returned status is '%s'\n", response);
         free(response);
      }

      {  /* publish ... */
         MsgUnit msgUnit;
         printf("[client] Publishing message 'HelloWorld' ...\n");
         msgUnit.key = strcpyAlloc("<key oid='HelloWorld'/>");
         msgUnit.content = strcpyAlloc("Some message payload");
         msgUnit.contentLen = strlen(msgUnit.content);
         msgUnit.qos =strcpyAlloc("<qos><persistent/></qos>");
         response = xa->publish(xa, &msgUnit, &xmlBlasterException);
         freeMsgUnitData(&msgUnit);
         if (*xmlBlasterException.errorCode != 0) {
            printf("[client] Caught exception in publish errorCode=%s, message=%s\n",
                   xmlBlasterException.errorCode, xmlBlasterException.message);
            xa->disconnect(xa, 0, &xmlBlasterException);
            freeXmlBlasterAccessUnparsed(xa);
            exit(1);
         }
         printf("[client] Publish success, returned status is '%s'\n", response);
         free(response);
      }

      {  /* unSubscribe ... */
         const char *key = "<key oid='HelloWorld'/>";
         const char *qos = "<qos/>";
         printf("[client] UnSubscribe message 'HelloWorld' ...\n");
         response = xa->unSubscribe(xa, key, qos, &xmlBlasterException);
         if (response) {
            printf("[client] Unsubscribe success, returned status is '%s'\n", response);
            free(response);
         }
         else {
            printf("[client] Caught exception in unSubscribe errorCode=%s, message=%s\n",
                   xmlBlasterException.errorCode, xmlBlasterException.message);
            xa->disconnect(xa, 0, &xmlBlasterException);
            freeXmlBlasterAccessUnparsed(xa);
            exit(1);
         }
      }

      {  /* get synchronous ... */
         size_t i;
         const char *key = "<key queryType='XPATH'>//key</key>";
         const char *qos = "<qos/>";
         MsgUnitArr *msgUnitArr;
         printf("[client] Get synchronous messages with XPath '//key' ...\n");
         msgUnitArr = xa->get(xa, key, qos, &xmlBlasterException);
         if (*xmlBlasterException.errorCode != 0) {
            printf("[client] Caught exception in get errorCode=%s, message=%s\n",
                   xmlBlasterException.errorCode, xmlBlasterException.message);
            xa->disconnect(xa, 0, &xmlBlasterException);
            freeXmlBlasterAccessUnparsed(xa);
            exit(1);
         }
         if (msgUnitArr != (MsgUnitArr *)0) {
            for (i=0; i<msgUnitArr->len; i++) {
               char *contentStr = strFromBlobAlloc(msgUnitArr->msgUnitArr[i].content,
                                                msgUnitArr->msgUnitArr[i].contentLen);
               const char *dots = (msgUnitArr->msgUnitArr[i].contentLen > 96) ?
                                  " ..." : "";
               printf("\n[client] Received message#%u/%u:\n"
                      "-------------------------------------"
                      "%s\n <content>%.100s%s</content>%s\n"
                      "-------------------------------------\n",
                      i+1, msgUnitArr->len,
                      msgUnitArr->msgUnitArr[i].key,
                      contentStr, dots,
                      msgUnitArr->msgUnitArr[i].qos);
               free(contentStr);
            }
            freeMsgUnitArr(msgUnitArr);
         }
         else {
            printf("[client] Caught exception in get errorCode=%s, message=%s\n",
                   xmlBlasterException.errorCode, xmlBlasterException.message);
            xa->disconnect(xa, 0, &xmlBlasterException);
            freeXmlBlasterAccessUnparsed(xa);
            exit(1);
         }
      }


      {  /* erase ... */
         const char *key = "<key oid='HelloWorld'/>";
         const char *qos = "<qos/>";
         printf("[client] Erasing message 'HelloWorld' ...\n");
         response = xa->erase(xa, key, qos, &xmlBlasterException);
         if (*xmlBlasterException.errorCode != 0) {
            printf("[client] Caught exception in erase errorCode=%s, message=%s\n",
                   xmlBlasterException.errorCode, xmlBlasterException.message);
            xa->disconnect(xa, 0, &xmlBlasterException);
            freeXmlBlasterAccessUnparsed(xa);
            exit(1);
         }
         printf("[client] Erase success, returned status is '%s'\n", response);
         free(response);
      }

      if (xa->disconnect(xa, 0, &xmlBlasterException) == false) {
         printf("[client] Caught exception in disconnect, errorCode=%s, message=%s\n",
                xmlBlasterException.errorCode, xmlBlasterException.message);
         freeXmlBlasterAccessUnparsed(xa);
         exit(1);
      }

      freeXmlBlasterAccessUnparsed(xa);
      if (numTests > 1) {
         printf("[client] Successfully finished test #%d from %d\n\n", ii, numTests);
      }
   }
   printf("[client] Good bye.\n");
   return 0;
}
        ]]>
   </pre>
   </example>

   <example lang="C" type="HTML">
      <p><a NAME="example"></a></p>
      <p>
      This example shows how to redirect the logging output from the C lib:
      </p>
    <pre><![CDATA[
/* Snippet from xmlBlaster/demo/c/socket/LogRedirect.c */

...

/**
 * Customized logging output is handled by this method. 
 * <p>
 * We register this function with 
 * </p>
 * <pre>
 * xa->log = myLogger;
 * </pre>
 * @param currLevel The actual log level of the client
 * @param level The level of this log entry
 * @param location A string describing the code place
 * @param fmt The formatting string
 * @param ... Other variables to log, corresponds to 'fmt'
 * @see xmlBlaster/src/c/msgUtil.c: xmlBlasterDefaultLogging() is the default implementation
 */
static void myLogger(XMLBLASTER_LOG_LEVEL currLevel,
                     XMLBLASTER_LOG_LEVEL level,
                     const char *location, const char *fmt, ...)
{
   /* Guess we need no more than 200 bytes. */
   int n, size = 200;
   char *p = 0;
   va_list ap;

   if (level > currLevel) { /* LOG_ERROR, LOG_WARN, LOG_INFO, LOG_TRACE */
      return;
   }
   if ((p = (char *)malloc (size)) == NULL)
      return;

   for (;;) {
      /* Try to print in the allocated space. */
      va_start(ap, fmt);
      n = vsprintf (p, fmt, ap);
      va_end(ap);
      /* If that worked, print the string to console. */
      if (n > -1 && n < size) {
         if (level == LOG_TRACE)
            printf("%s %s\n", getLogLevelStr(level), p);
         else
            printf("{%s-%s-%s} [%s] %s\n", __DATE__, __TIME__, getLogLevelStr(level), location, p);
         free(p);
         return;
      }
      /* Else try again with more space. */
      if (n > -1)    /* glibc 2.1 */
         size = n+1; /* precisely what is needed */
      else           /* glibc 2.0 */
         size *= 2;  /* twice the old size */
      if ((p = (char *)realloc (p, size)) == NULL) {
         return;
      }
   }
}

...

/* Code in main() */

...

xa = getXmlBlasterAccessUnparsed(argc, argv);

/* Register our own logging function */
xa->log = myLogger;

...
        ]]>
    </pre>
   </example>

   <configuration where="client">
      <p><a NAME="config"></a>
      These configurations are tested:
      </p>
      <table border="1">
       <tr>
       <th>No.</th>
       <th>OS</th>
       <th>Compiler</th>
       <th>xmlBlaster</th>
       <th>Thread library</th>
       <th>Protocol library</th>
       <th>XML library</th>
       <th>Date</th>
       <th>Author</th>
       <th>Comment</th>
       </tr>

       <tr>
       <td>1</td>
       <td>Linux 2.4.20</td>
       <td><a href="http://www.gnu.org/software/gcc/gcc.html" target="others">g++ and gcc 3.3</a></td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/CHANGES">0.848+</a></td>
       <td><a href="http://www.gnu.org/software/libc/" target="others">pthread</a></td>
       <td>SOCKET <a href="http://www.xmlBlaster.org/xmlBlaster/doc/requirements/protocol.socket.html" target="others">protocol.socket requirement</a></td>
       <td>Unparsed access with raw XML strings</td>
       <td>2003-05-29</td>
       <td><a href="mailto:xmlBlaster@marcelruff.info">Marcel</a></td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/src/c/README">README</a></td>
       </tr>

       <tr>
       <td>2</td>
       <td>Linux 2.4.9</td>
       <td><a href="http://www.gnu.org/software/gcc/gcc.html" target="others">g++ and gcc 2.95.3</a></td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/CHANGES">0.848+</a></td>
       <td><a href="http://www.gnu.org/software/libc/" target="others">pthread</a></td>
       <td>SOCKET <a href="http://www.xmlBlaster.org/xmlBlaster/doc/requirements/protocol.socket.html" target="others">protocol.socket requirement</a></td>
       <td>Unparsed access with raw XML strings</td>
       <td>2003-05-29</td>
       <td><a href="mailto:xmlBlaster@marcelruff.info">Marcel</a></td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/src/c/README">README</a></td>
       </tr>

       <tr>
       <td>3</td>
       <td><a href="http://wwws.sun.com/software/download/index.html" target="others">SunOS 5.8 sparc</a></td>
       <td>cc: Forte Developer 7 C 5.4 2002/03/09</td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/CHANGES">0.848+</a></td>
       <td>pthread</td>
       <td>SOCKET <a href="http://www.xmlBlaster.org/xmlBlaster/doc/requirements/protocol.socket.html" target="others">protocol.socket requirement</a></td>
       <td>Unparsed access with raw XML strings</td>
       <td>2003-06-02</td>
       <td><a href="mailto:xmlBlaster@marcelruff.info">Marcel</a></td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/src/c/README">README</a></td>
       </tr>

       <tr>
       <td>4</td>
       <td>WindowsXP</td>
       <td>VC 7 (May 2003)</td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/CHANGES">0.848+</a></td>
       <td><a href="http://sources.redhat.com/pthreads-win32" target="others">pthreads-win32</a></td>
       <td>SOCKET <a href="http://www.xmlBlaster.org/xmlBlaster/doc/requirements/protocol.socket.html" target="others">protocol.socket requirement</a></td>
       <td><a href="http://expat.sourceforge.net/" target="others">Expat</a> is not yet integrated</td>
       <td>2003-06-03</td>
       <td><a href="mailto:xmlBlaster@marcelruff.info">Marcel</a></td>
       <td><a href="http://www.xmlBlaster.org/xmlBlaster/src/c/README">README</a></td>
       </tr>

      </table>

      <p>
      These parameters allow to configure the C-client on command line:
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>-dispatch/connection/plugin/socket/hostname</td>
            <td>localhost</td>
            <td>Where to find the server</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>-dispatch/connection/plugin/socket/port</td>
            <td>7607</td>
            <td>The port where xmlBlaster listens</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>-dispatch/connection/plugin/socket/localHostname</td>
            <td>localhost</td>
            <td>Force the local host name of the socket connection.
                Can be useful on multi homed hosts</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>

         <tr>
            <td>-dispatch/connection/plugin/socket/localPort</td>
            <td>9911</td>
            <td>Force the local port of the socket connection.
               Can be useful with firewalls</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>

         <tr>
            <td>-dispatch/connection/plugin/socket/responseTimeout</td>
            <td>60000 (in milliseconds, defaults to one minute)</td>
            <td>How long to block on method invocation</td>
            <td><img src="ok.gif" border="0" alt="yes" />UNIX only</td>
         </tr>

         <!-- A separate callback server is not yet supported
              we reuse the sync connection to tunnel callback messages back
         <tr>
            <td>-dispatch/callback/plugin/socket/hostname</td>
            <td>localhost</td>
            <td>The IP (or host name) where to establish the callback server.
                Can be useful on multi homed hosts</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>-dispatch/callback/plugin/socket/port</td>
            <td>7607</td>
            <td>The port of the callback server</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         -->

         <tr>
            <td>-debug</td>
            <td>false</td>
            <td>true switches logging output on</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

      </table>

   </configuration>

   <todo type='HTML'>
      <h3>This beta release is considered stable, but we need to:</h3>
      <p>
      <ul>
      <li> Adding mutex to every function call?<br />
      Currently you can have many
      connections to xmlBlaster from one client where each connection may
      be used by a different thread. But running multi threads on one connection
      instance is currently not synchronized, this design decision is pending.
      If you have such a case just add your own mutex to the function calls.</li>

      <li> Invoking xmlBlaster from within the callback thread (in update() function)
        will deadlock (i believe so).
        Probably we need to add a thread pool</li>

      <li> Add extended property support (parsing command line and getenv())</li>

      <li> Add another layer which parses the QoS with Expat</li>

      <li> Add client persistent queue with <a href="http://www.sqlite.org" target='others'>SQLite</a></li>

      <li> Use it as a SOCKET protocol plugin for our C++ client library to 
           get all the nice fail safe features for the C lib and to
           make the C++ lib smaller (the CORBA plugin is quite big).</li>

      <li> Add some demo in xmlBlaster/demo/c</li>

      <li> Add testsuite (with ant)</li>

      </ul>
      </p>
   </todo>

   <see type="CODE" lang="C">HelloWorld.c</see>
   <see type="CODE" lang="C">XmlBlasterAccessUnparsed.h</see>
   <see type="CODE" lang="C">xmlBlaster/demo/c/socket/LogRedirect.c</see>
   <see type="INTERNET">http://www.xmlblaster.org/xmlBlaster/src/c/README</see>
   <see type="INTERNET">http://sources.redhat.com/pthreads-win32/</see>
   <see type="INTERNET">http://xmlrpc-c.sourceforge.net/</see>
   <see type="REQ">protocol.socket</see>
   <see type="REQ">interface</see>

<!--   <see type="REQ">cluster</see> -->
   <author><a href="mailto:mr@marcelruff.info">Marcel Ruff</a></author>
   <date>2003 05 29</date>
   <revision>$Revision: 1.18 $</revision>
</requirement>

