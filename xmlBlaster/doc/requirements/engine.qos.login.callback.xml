<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='engine.qos.login.callback' type='NEW' prio='MEDIUM' status="CLOSED">
   <topic>Clients of XmlBlaster can specify their desired callbacks during login</topic>
   <description>
      <p>
      When you subscribe to messages or get sent a PtP message, xmlBlaster will
      deliver this to you through a callback.
      </p>
      <p>
      You can specify your preferred callback protocol and your address through the
      qos (Quality of Service) parameter of the login method.<br />
      </p>
      <p>
      The default callback protocol is "IOR" which stands for a CORBA callback.
      The client must supply a Corba callback interface with the
      method update() and ping(), see xmlBlaster.idl. This method is called by xmlBlaster for callbacks.
      </p>
      <p>
      Other supported protocols are "RMI" and "XML-RPC", scheduled protocols are "EMAIL" and "SOAP".<br />
      </p>
      <p>
      Further protocols may be plugged into xmlBlaster very easy -
      you only need to implement the interface I_CallbackDriver.java
      with your protocol driver and register it in xmlBlaster.properties<br />
      </p>
      <p>
      You can specify zero to many callbacks for one single client,
      with mixed protocols, all of them will be invoked for new messages.
      </p>
   </description>

   <changerequest prio='MEDIUM' status="OPEN">
   <!-- name>Michele,Marcel</name -->
   <p>
   A callback address corresponds to a callback server created
   by a client. A client may establish many callback servers,
   for example one CORBA and another for XML-RPC.
   Only one callback address is actively used by xmlBlaster.
   If the callback fails, the subsequent callback addresses will be
   tried until the message is delivered.
   If all callback addresses fail, the result will depend on the
   specified login qos.
   </p>

   <p>
   Below there follows a QoS of a login method,
   this raw string is delivered to xmlBlaster to control the behavior of this client.
   All elements/attributes have a default value, so a simple
      &lt;qos>&lt;/qos>
   will allow a login as well. In this case no callbacks are possible
   but synchronous access with get() runs fine.
   </p>

   <p>
   Delegated subscribes: it is possible to subscribe for somebody else to certain messages. This can
   be handled by logging in again with the callback addresses of that delegated client (kind of gift)
   </p>

   </changerequest>

   <example lang="Java">
      <![CDATA[
      For detailed QoS examples see requirement "engine.callback"

      For examples using raw Corba, see
        demo/javaclients/corba/ClientRaw.java
        testsuite/src/c++/clientPOA.cc
      ]]>
   </example>
   <see type="REQ">protocol</see>
   <see type="REQ">engine.callback</see>
   <see type="API">org.xmlBlaster.client.LoginQosWrapper</see>
   <see type="API">org.xmlBlaster.engine.helper.CallbackAddress</see>
   <see type="API">org.xmlBlaster.engine.helper.QueueProperty</see>
   <see type="API">org.xmlBlaster.util.ConnectQos</see>
   <author>ruff@swand.lake.de</author>
   <date>2000 05 16</date>
   <revision>$Revision: 1.24 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE"></test>
   </testcase>
</requirement>
