<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='j2ee.jms' type='NEW' prio='LOW' status="OPEN">
   <topic>
      xmlBlaster provides an implementation of the JMS API.
   </topic>
   <description>
    <p>The main purpose of <b>XmlBlaster</b> is <b>not</b> to be <i>yet another JMS implementation</i>. There 
    are conceptual differences but generally, a relatively simple mapping can be found between the features
    required by a jms provider and a subset of the wide range of features provided by xmlBlaster.
    </p>
    <p>Currently the implementation status is in its very first stage and only a simple demo is working.</p>
   </description>
   <configuration>
   </configuration>
   
   <example>
   <p>This demo can be found in demo/javaclients/j2ee/jms</p>
     <pre>
package javaclients.j2ee.jms;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.jms.Topic;
import javax.jms.TopicConnection;
import javax.jms.TopicConnectionFactory;
import javax.jms.TopicPublisher;
import javax.jms.TopicSession;
import javax.jms.TopicSubscriber;

import org.jutils.log.LogChannel;
import org.xmlBlaster.j2ee.jms.XBConnectionFactory;
import org.xmlBlaster.j2ee.jms.XBTopic;
import org.xmlBlaster.util.Global;

/**
 * SimpleTest
 *
 * @author <a href="mailto:laghi@swissinfo.org">Michele Laghi</a>
 * 
 */
public class SimpleJmsDemo implements MessageListener {

   private Global global;
   private LogChannel log;

   public SimpleJmsDemo(Global global) {
      this.global = global;
      this.log = this.global.getLog("jms-test");
   }
   
   public void prepare() throws JMSException {
      try {
         // create a factory (normally retreived by naming service)
         TopicConnectionFactory factory = new XBConnectionFactory(this.global);
         // should be retreived via jndi
         Topic topic = new XBTopic("jms-test");
      
         TopicConnection connection = factory.createTopicConnection();
         connection.start();
         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
         TopicSubscriber subscriber = session.createSubscriber(topic);
         subscriber.setMessageListener(this);
      
         TopicPublisher publisher = session.createPublisher(topic);
      
         TextMessage msg = session.createTextMessage();
         msg.setText("this is a simple jms test message");
         publisher.publish(msg);
      
         Thread.sleep(3000L);
         connection.stop();
      }
      catch (Exception ex) {
         ex.printStackTrace();
      }
   }
   

   public void onMessage(Message message) {
      try {
         if (message instanceof TextMessage) {
            System.out.println(((TextMessage)message).getText());
         }
      }
      catch (JMSException ex) {
         System.err.println(ex.getMessage());
         ex.printStackTrace();
      }
   }

   public static void main(String[] args) {
      Global global = new Global(args);
      SimpleJmsDemo test = new SimpleJmsDemo(global);
      try {
         test.prepare();
      }
      catch (Exception ex) {
         ex.printStackTrace();
      }
   }
}
     </pre>
   </example>


<!--
   <see type="LOCAL"></see>
   <see type="API"></see>
  <see type="REQ"></see>
-->
   <author>laghi@swissinfo.org</author>
   <date>2003 09 25</date>
   <revision>$Revision: 1.1 $</revision>
  <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.j2ee.jms.TestAll</test>
   </testcase>
</requirement>
