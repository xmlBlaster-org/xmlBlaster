<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">


<requirement id='client.cpp.protocol' type='NEW' prio='HIGH' status='CLOSED'>
   <topic>
      The cpp client library handles the communication to xmlBlaster transparently.
   </topic>
   <description>
     <p>
     <b>For the user</b><br/>
     The user can make all invocations to xmlBlaster by using the class XmlBlasterAccess. This class
     hides all intrinsic communication protocol dependencies. In other words if you want to write a client
     to xmlBlaster you don't need any knowledge of the communication layer, i.e. CORBA, XMLRPC, SOCKET
     or whatever protocol you decide to use.
     </p>
     <p>
     <b>For the programmer</b><br/>
     It is relatively easy to write a plugin that handles the communication to xmlBlaster.
     First of all you must make sure you have the counterpart on the server side. Lets say you want to 
     write the socket plugin, such a protocol is already supported on the server side (and java clients).
     <ul>
     <li>
     Get familiar with the details of the protocol you want to implement (for example by reading the 
     socket requirement).
     </li>
     <li>
     Write a requirement describing the protocol (I should not say so since I am bad at it myself).
     </li>
     <li>
     Write a class which implements I_XmlBlasterConnection (this will be the sender) and one which 
     implements I_CallbackServer (the receiver). Note that I_CallbackServer and I_XmlBlasterConnection 
     could be implemented by one single class (this is currently done in CORBA. See for that the 
     CorbaDriver).
     </li>
     <li>
     Add the code for the creation of an instance of the sender in the method 
     <b>DeliveryManager::getPlugin(...)</b>  and the removal or deletion of that instance in the method
     <b>DeliveryManager::releasePlugin(...)</b>.
     </li>
     <li>
     Add the code for the creation of an instance of the receiver in 
     <b>CbServerPluginManager::getPlugin(...)</b> and the removal of the instance in 
     <b>CbServerPluginManager::releasePlugin(...)</b>
     </li>
     <li>
     Write a test suite which tests the good work you have done
     </li>
     <li>
     Since you want to enjoy but also let others enjoy and admire your work, commit the code to CVS 
     and make a statement on the mailing list
     </li>
     </ul>
     </p>
     <p>
        For situations where you have to configure on instantiate protocol specific stuff, for example as
        if you would want to use an instance of an orb which you have instantiated outside XmlBlaster, you
        must make sure to instantiate the protocol driver by passing all external parameters. In the 
        mentionned case we would create an instance of CorbaDriver by passing an external orb by assigning it
        a certain instance name. Then, when instantiating an XmlBlasterAccess object we must make sure to
        pass to it the same instance name. This way we make sure that we will use that particular instance of
        the driver and at the same time XmlBlasterAccess does not need to know anything about the protocol it
        will be using.
     </p>
   </description>


   <see type="REQ">client.cpp.precondition</see>
   <see type="CODE" lang="CPP">org::xmlBlaster::demo::ExternOrb</see>

<!--   <see type="REQ">cluster</see> -->
   <author><a href="mailto:laghi@swissinfo.org">Michele Laghi</a></author>
   <date>2003 01 15</date>
   <revision>$Revision: 1.4 $</revision>
</requirement>

