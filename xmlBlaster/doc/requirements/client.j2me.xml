<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">


<requirement id='client.j2me' type='NEW' prio='LOW' status='CLOSED'>
   <topic>
      XmlBlaster provides a tiny java client library for j2me MIDgets
   </topic>
   <description>
     <p>
     If you develop j2me applications you can connect with our tiny client java library which
     is specific to applets and j2me applications.
     
     </p>
     <h2>Features</h2>
     <ul>
        <li> Supports complete xmlBlaster access including <i>real time</i> asynchronous
             callbacks.</li>

        <li> The communication protocol is based on a persistent http connection which is used
             to push back callback messages</li>

        <li> Reports exceptions nicely back to the client</li>
    </ul>

     <h2>Overview</h2>
     <p>
     The following illustration shows a typical use case, a MIDlet running for example in a
     cellular phone or in a PAD contacts the Web Server, for example 
     <a href="http://www.apache.org/" target="others">Apache</a>,
     which directs the call to a servlet engine with xmlBlasters communication servlet.
     The servlet looks at the applet request and opens a connection to xmlBlaster to
     delegate the request.
     <p>
     Supported MIDget methods are
     </p>
     <ul>
     <li>for connecting read the <a href="interface.connect.html">connect interface</a></li>
     <li>for disconnecting read the <a href="interface.disconnect.html">disconnect interface</a></li>
     <li>for erasing read the  <a href="interface.erase.html">erase interface</a></li>
     <li>for getting read the  <a href="interface.get.html">get interface</a></li>
     <li>for publishing read the  <a href="interface.publish.html">publish interface</a></li>
     <li>for subscribing read the  <a href="interface.subscribe.html">subscribe interface</a></li>
     <li>for unsubscribing read the  <a href="interface.unSubscribe.html">unSubscribe interface</a></li>
     <li>for callbacks read the  <a href="interface.update.html">update interface</a></li>
     </ul>
     </p>

     <h2>Online demo</h2>
     <p>
     If your mobile supports MIDlets, try it online with this URL:
     <code>http://www.xmlblaster.org:8080/xmlBlaster/j2me/SystemInfo.jad</code>
     </p>
   </description>

   <example type="HTML">
   <p>There is a little demo showing the way this works. The demo SystemInfo has the same 
   functionality as the SystemInfoApplet. In order to be run it needs a running xmlBlaster (with
   the xmlrpc port redirected or disactivated), a SystemInfoPublisher which publishes on the 
   given xmlBlaster and a servlet engine running (for example apache's tomcat). If you don't
   want to bother about configuring and starting these, you can use the ones which constantly run
   on the xmlBlaster server. The url of the servlet is 
   <i>http://www.xmlBlaster.org:8080/xmlBlaster/AppletServlet</i>.
   </p>
   <p>
   If you have access to an embedded device which supports j2me (and more precisely CLDC-1.1 and
   MIDP-2.0 profile) you can download the precompiled demo application directly from the xmlBlaster server:<br/>
   <ul>
     <li><a href="http://www.xmlblaster.org:8080/xmlBlaster/j2me/SystemInfo.jad">SystemInfo.jad</a></li>
     <li><a href="http://www.xmlblaster.org:8080/xmlBlaster/j2me/SystemInfo.jar">SystemInfo.jar</a></li>
   </ul>
   </p>
   And you can then run the application (check/adjust the URL in SystemInfo.jad before).
   <p>
   If you are not that lucky of having such a device you still can try this demo out by using an
   emulator. You can download sun's j2me development kit which allows you to compile the 
   applications yourself. You can find it at 
   <a href="http://java.sun.com/products/j2mewtoolkit/download-2_1.html">Sun's j2me pages</a>.
   Once you have downloaded it install it in a directory of your choice. Lets say you 
   install it on ${J2ME_HOME}.<br/>
   To compile the application you then invoke:<br/>
   <pre>
   build -DJ2ME_HOME=${J2ME_HOME} j2me
   </pre>
   to run the application run:
   <pre>
   ${J2ME_HOME}/bin/emulator -Xdescriptor ${XMLBLASTER_HOME}/demo/j2me/SystemInfo.jad
   </pre>
   and an application similar to this should appear:<br/>
   <center><img src="j2meDemo.jpg" name="j2meDemo" align="center" border="1"/></center>
   </p>   
   </example>

   <example type="HTML">
   <h2>Quick start installation of the server side stuff (if you want the server to be run locally)</h2>
   <p>
   You can try it with tomcat locally (no apache is necessary,
   i had tomcat 3.2.4, 4.1.29 and 5.0.14 to test it, others should work as well):
   </p>
   <h2>
   1. Create a war file:
   </h2>
   <p>
   The <tt>$TOMCAT_HOME/webapps/xmlBlaster.war</tt> file contains all necessary
   servlets and xmlBlaster client library to forward requests to xmlBlaster.
   You can have a look at the configuration
   in <code>xmlBlaster/demo/http/WEB-INF/web.xml</code> before creating the war file.
   </p>
<pre>
  cd xmlBlaster

  build  -DTOMCAT_HOME=/opt/jakarta_tomcat   deploy_war
</pre>
   <p>
   Set TOMCAT_HOME to point to your installation and the <code>xmlBlaster.war</code>
   will be automatically deployed to <code>$TOMCAT_HOME/webapps/xmlBlaster.war</code>
   </p>

   <h2>
   2. Start the xmlBlaster server and a demo publisher (keep port 8080 free for tomcat)
   </h2>
   <pre>
  java org.xmlBlaster.Main -plugin/xmlrpc/port 8081   
  
  java  http.dhtml.systemInfo.SystemInfoPublisher
   </pre>

   <h2>
   3. Start the tomcat web server
   </h2>
   <p>
   The <tt>$TOMCAT_HOME/webapps/xmlBlaster.war</tt> was created and copied already in step 1.
   </p>
   <pre>
 cd $TOMCAT_HOME/bin
 startup.sh
   </pre>

   <h2>
   4. Create the jar file which is transferred to the mobile device
   </h2>
   <pre>
 build j2me
   </pre>
   <p>The result is <tt>xmlBlaster/demo/j2me/SystemInfo.jar</tt> and
      <tt>xmlBlaster/demo/j2me/SystemInfo.jad</tt>.
   </p>

   <h3>Edit your <tt>SystemInfo.jad</tt> file</h3>
   You need to add the URL which points to the <code>SystemInfo.jar</code> file and to the
   servlet <code>AppletServlet</code> to the <tt>SystemInfo.jad</tt> file:
   <pre>
MIDlet-1: SystemInfo, SystemInfo.png, SystemInfoMidlet
MIDlet-Info-URL: http://www.xmlblaster.org/xmlBlaster/doc/requirements/client.j2me.html
MIDlet-Jar-Size: 27299 
MIDlet-Jar-URL: <font color="red">http://localhost:8080/xmlBlaster/j2me/SystemInfo.jar</font>
MIDlet-Name: SystemInfo
MIDlet-Vendor: www.xmlBlaster.org
MIDlet-Version: 1.0
MicroEdition-Configuration: CLDC-1.0
MicroEdition-Profile: MIDP-1.0
servletUrl: <font color="red">http://localhost:8080/xmlBlaster/AppletServlet</font>
   </pre>
   <p>
   <h3>Now copy</h3> the <code>xmlBlaster/demo/j2me/SystemInfo.jar</code> and 
   <code>xmlBlaster/demo/j2me/SystemInfo.jad</code> file to be available on the web server (tomcat):
   </p>
   <pre>
   mkdir $TOMCAT_HOME/webapps/xmlBlaster/j2me
   cp ${XMLBLASTER_HOME}/demo/j2me/SystemInfo.ja? $TOMCAT_HOME/webapps/xmlBlaster/j2me
   </pre>

   <h2>
   5. Watch the result with your mobile
   </h2>
   <p>
   Start the emulator or if you have a mobile device somehow connected to you computer run it:
   </p>
   <pre>
   ${J2ME_HOME}/bin/emulator -Xdescriptor ${XMLBLASTER_HOME}/demo/j2me/SystemInfo.jad
   
   ${J2ME_HOME}/bin/emulator -Xdescriptor http://localhost:8080/xmlBlaster/j2me/SystemInfo.jad

   http://localhost:8080/xmlBlaster/j2me/SystemInfo.jad
   </pre>

   <h2>Note</h2>
   <p>For convenience the Urls of <tt>SystemInfo.jad</tt> can be passed to ant and will be replaced as shown above:</p>
   <pre>
   build -DJ2ME_HOME=/opt/WTK2.1 
         -DMIDlet-Jar-URL=http://localhost:8080/xmlBlaster/j2me/SystemInfo.jar
         -DMIDlet-servletUrl=http://localhost:8080/xmlBlaster/AppletServlet
       j2me
   </pre>

   <h2>Problems</h2>
   <p>If the emulator says '<tt>Warning: Failed to initialize WMA message routing support</tt>'
   try setting write permissions to your J2ME directory:
   </p>
   <pre>
chmod a+rwx ${J2ME_HOME}
chmod a+rwx ${J2ME_HOME}/appdb
   </pre>

   </example>

   <configuration where="server">
      If you want to setup an http server from which be able to download your application, you have to
      make sure the server recognizes the jad and the jar files as mimetypes.  For an apache server this
      means that the configuration file (default httpd.conf) contains the lines:
      <pre>
AddType text/vnd.sun.j2me.app-descriptor .jad
AddType application/java-archive .jar
      </pre>
      and then restart the apache server. More about "Over The Air" (OTA) Provisioning
      can be found <a href="http://developers.sun.com/techtopics/mobility/allarticles/#ota">here</a>.
   </configuration>                                     

   <see type="API">org.xmlBlaster.client.protocol.http.common.I_XmlBlasterAccessRawBase</see>
   <see type="REQ">interface</see>
   <see type="REQ">client.browser</see>
   <see type="REQ">client.java.applet</see>
   <see type="INTERNET">http://jakarta.apache.org/tomcat/</see>
   <see type="INTERNET">http://www.xmlBlaster.org:8080/xmlBlaster/index.html</see>
   <see type="INTERNET">http://www.xmlBlaster.org:8080/xmlBlaster/HelloWorld3.html</see>
   <see type="INTERNET">http://www.xmlBlaster.org:8080/xmlBlaster/SystemInfoApplet.html</see>

<!--   <see type="REQ">cluster</see> -->
   <author><a href="mailto:laghi@swissinfo.org">Michele Laghi</a></author>
   <date>2004 04 01</date>
   <revision>$Revision: 1.10 $</revision>

   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
   </testcase>
</requirement>

