<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='util.log.plugin' type='NEW' prio='HIGH' status='CLOSED'>
   <topic>XmlBlaster allows to plugin alternative LogableDevices</topic>
   <description>
     <p>
     A PluginManager for plugging in loggers has been added to XmlBlaster. The
     LogDevicePluginManager allows one to define any number of logging plugins, called  I_LogDeviceFactory. An  I_LogDeviceFactory is a factory that returns 
org.jutils.log.LogableDevice's. These are use to add to the LogChannels set up in XmlBlaster. To ad a new logger to XmlBlaster one creates an implementation of a I_LogDeviceFactory which returnes LogableDevices that logs in the way one want.</p>
  <p>Log plugins are defined with the plugin name <b>LoggableDevicePlugin</b>. There are two plugins currently in XmlBlaster: org.xmlBlaster.util.log.ConsoleLogDeviceFactory and org.xmlBlaster.util.log.FileLogDeviceFactory. A typical definition of a plugin looks like this:</p>
   <pre>
LoggableDevicePlugin[console][1.0]=org.xmlBlaster.util.log.ConsoleLogDeviceFactory
   </pre>
   <p>
To actually use a logger plugin one has to specify the logDevices to actually use. These are specifyed by giving a comma separated list of plugin names in the property <b>logDevice</b>. A logDevice may specifyed globaly, or for a particular logging domain, given by LogChannel.getChannelKey().So for example, given the following plugins:</p>
<pre>
LoggableDevicePlugin[console][1.0]=org.xmlBlaster.util.log.ConsoleLogDeviceFactory
LoggableDevicePlugin[file][1.0]=org.xmlBlaster.util.log.FileLogDeviceFactory,logFile=mylogfile
</pre>
   <p>One could specify that for all logger console should be used:</p>
<pre>
logDevice=console
</pre>
<p>But also that for a particular LogChannel another configuration should be used. In this case all logging done agains the cb LogChannel would go both to the console and the file loggers. If console had not been specifyed, only file would be used for cb.</p>
<pre>
logDevice[cb]=console,file
</pre>
<p>If there are no logging plugins specifyed or no plugins referenced in a logDevice property the old logging style setup will be used. This will also be used if there is some failour in loading through the plugin framework. To guard agains cirucular dependacies - i.e when a logging plugin or any used classes them self tries to set up logging - any calls to initLog in Global from a thread that is setting up logging already will result in a LogDeviceConsole beeing added to the LogChannel in question. This for example means the the logging in PluginInfo will be run directly through a LogDeviceConsole whenever used in the pluggalble logging stuff.</p>
   </description>
   <example lang="Java" type="HTML">
     
      <h2 id="LOG4J">This is an example of a Log4j I_LogDeviceFactory</h2>
      
      <pre>
      <![CDATA[
package org.backsource.in.blaster;

import org.xmlBlaster.util.Global;
import org.xmlBlaster.util.XmlBlasterException;
import org.xmlBlaster.util.log.I_LogDeviceFactory;
import org.xmlBlaster.util.plugin.PluginInfo;
import org.jutils.log.LogableDevice;
import org.jutils.log.LogChannel;

import org.apache.log4j.Logger;

public class Log4jDeviceFactory implements I_LogDeviceFactory {
   private static final String LOG_DOMAIN="org.xmlBlaster";
   private Global glob;
   public Log4jDeviceFactory (){
      
   }
   public void init(Global glob, PluginInfo pluginInfo) throws XmlBlasterException {
      this.glob = glob;
      
   }
   
   public String getType() {return "log4j";}
   public String getVersion() {return "1.0";}
   public void shutdown() {}

   public  LogableDevice getLogDevice(LogChannel channel) {
      String key = channel.getChannelKey();
      String domain = LOG_DOMAIN;
      if ( key != null) {
         domain = domain + "."+key;
         
      } // end of if ()
      Logger l = Logger.getLogger(domain);
      return new Log4jDevice(l);

   }


   class Log4jDevice implements LogableDevice {
      Logger log = null;
      Log4jDevice(Logger log) {
         if ( log == null) {
            throw new NullPointerException("Logger is not allowed to be null");  
         } // end of if ()
         
         this.log = log;
      }
      public void log(int level, String source, String str) {
         
         StringBuffer logTxt = new StringBuffer();
         logTxt.append("[").append(source).append("] ").append(str);
         
         switch (level) {
         case LogChannel.LOG_CALL:
         case LogChannel.LOG_DUMP:
         case LogChannel.LOG_TIME:
         case LogChannel.LOG_TRACE:
            if (log.isDebugEnabled())
               log.debug(logTxt);
            break;
         case LogChannel.LOG_ERROR:
            log.error(logTxt);
            break;
         case LogChannel.LOG_INFO:
            log.info(logTxt);
            break;
         case LogChannel.LOG_WARN:
            log.warn(logTxt);
            break;
         default:
            log.info(logTxt);
            break;
         }; // end of switch
      } // end of log
   }
}// Log4jDeviceFactory
      ]]>
      </pre>
      <p>Which would be configured with.</p>
      <pre>
       LoggableDevicePlugin[log4j][1.0]=org.backsource.in.blaster.Log4jDeviceFactory
       logDevice=log4j
      </pre>
   </example>

   <example lang="Java" type="HTML">
   <h2 id="JDK14">Redirect logging into JDK 1.4 (or higher) java.util.logging framework</h2>
   <p>
   XmlBlaster provides a plugin, called <tt>LogJdkDeviceFactory</tt>,
   which redirects xmlBlaster logging output to
   the JDK native logging facility which is available since JDK 1.4.
   To activate it please add those lines to <tt>xmlBlaster.properties</tt>:
   </p>
   <pre>
LoggableDevicePlugin[jdk14logging][1.0]=org.xmlBlaster.util.log.LogJdkDeviceFactory
logDevice=jdk14logging
   </pre>
   </example>

   <configuration where="server">
      <p>
       Each plugin must be defined using the standard plugin syntax (no speciall classloader stuff is available though), for examle.</p>
       <pre>
       LoggableDevicePlugin[console][1.0]=org.xmlBlaster.util.log.ConsoleLogDeviceFactory
      </pre>
      <p>
      To actually use the plugin one has to specify a comma separated list of plugins to use in the property <b>logDevice</b>. A logDevice may be specifyed globaly and for each defined LogChannel by giving the log channes name:
      </p>
      <pre>
        logDevice=console
        logDevice[cb]=console,file
        logDevice[corba]=file
      </pre>
   </configuration>

   <configuration where="server">
      <p>
       Command line example:
      </p>
       <pre>
 java org.xmlBlaster.Main -logFile test.log -logDevice file,console
       </pre>
   </configuration>
   <see type="API">org.xmlBlaster.util.log.LogDevicePluginManager</see>
   <see type="API">org.xmlBlaster.util.log.I_LogDeviceFactory</see>
   <see type="API">org.xmlBlaster.util.log.ConsoleLogDeviceFactory</see>
   <see type="API">org.xmlBlaster.util.log.FileLogDeviceFactory</see>
   <see type="API">org.xmlBlaster.util.plugin.I_Plugin</see>
   <author>pra@tim.se</author>
   <date>2002 11 07</date>
   <revision>$Revision: 1.2 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <!--<test tool="SUITE">org.xmlBlaster.test.mime.TestXPathSubscribeFilter</test>-->
   </testcase>
</requirement>
