<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='admin.errorcodes' type='NEW' prio='LOW' status="CLOSED">
   <topic>XmlBlaster supports well defined error codes</topic>
   <description>
    <p>
      XmlBlaster throws only one exception namely the XmlBlasterException.
      To distinguish the errors, xmlBlaster supports an hierarchical error code schema.
    </p>

    <p>
      The following drawing illustrates some exception situations:
    </p>
    <br />
     <img src="ExceptionHandling.gif" border="0" title="XmlBlaster exception handling example" alt="Example for xmlBlaster exceptions" />
    <br />

    <br />
    <p>
    We support a set of top level error code categories:
    </p>
    <table border="1">
     <tr><th>errorCode</th><th>Description</th></tr>
     <tr><td><b>internal</b></td>
       <td>
        Internal errors which are caused by programming errors like null-pointer, illegal arguments and other bugs.
        If such an error occurs you should report it to the xmlBlaster mailing list.
       </td>
     </tr>
     <tr><td><b>resource</b></td>
       <td>
        XmlBlaster uses many local resources like hard disk space, RAM and reading or writing files.
        If resources exhaust, or access to local resources is not possible or if the configuration
        of those resources is wrong this can usually be solved by the server administrator or deployer
        of xmlBlaster.<br />
        Some typical members of this category are outOfMemory, ioException, fileNotFound and more.
       </td>
     </tr>
     <tr><td><b>communication</b></td>
       <td>
        The communication layer to clients or other xmlBlaster cluster nodes is an important
        part of xmlBlaster. We could categorize them into the <i>resource</i> category as
        typical IO exceptions, but we keep them separate here to manifest the importance for the MoM.
       </td>
     </tr>
     <tr><td><b>user</b></td>
       <td>
         User errors are exceptions when clients access xmlBlaster in an illegal way.
         For example trying to login with a wrong password or sending a message with a corrupted
         XML-message key syntax will be reported by a <i>user</i> exception.
       </td></tr>
     <tr><td><b>transaction</b></td>
       <td>
         This is not specified yet.
       </td></tr>
     <tr><td><b>legacy</b></td>
       <td>
        Old style xmlBlaster exceptions are marked as <i>legacy</i> until they are ported to
        this new behaviour.
       </td>
     </tr>
    </table>
    <br />

    <p>
    Examples for the error codes <i>errorCode</i>:
    </p>
    <table border="1">
     <tr><th>errorCode</th><th>Description</th></tr>
     <tr><td>internal</td><td>Server internal problems</td></tr>
     <tr><td>internal.unknown</td><td>Server internal problems which are not known</td></tr>
     <tr><td>internal.nullpointer</td><td>Coding error (blame maintainers)</td></tr>
     <tr><td>internal.illegalArgument</td><td>Coding error</td></tr>
     <tr><td>...</td><td>...</td></tr>
     <tr><td>resource</td><td>Problems with resources on server hardware or configuration</td></tr>
     <tr><td>resource.outOfMemory</td><td>No more memory, increase RAM or <i>java -Xmx</i> option</td></tr>
     <tr><td>resource.exhaust</td><td>A resource of your system exhausted</td></tr>
     <tr><td>resource.configuration.pluginFailed</td><td>Your configuration (e.g. in xmlBlaster.properties) is invalid</td></tr>
     <tr><td>...</td><td>...</td></tr>
     <tr><td>communication</td><td>Problems with client server communication</td></tr>
     <tr><td>communication.noconnection.polling</td><td>We have currently no remote connection but are polling for it</td></tr>
     <tr><td>communication.noconnection.dead</td><td>The remote connection is dead and it is not possible to recover</td></tr>
     <tr><td>...</td><td>...</td></tr>
     <tr><td>user</td><td>Errors caused by wrong usage</td></tr>
     <tr><td>user.security.authentication.accessDenied</td><td>Your login failed</td></tr>
     <tr><td>user.security.authorization.notAuthorized</td><td>Your message was not accepted</td></tr>
     <tr><td>user.publish.qos</td><td>Illegal syntax in your QoS</td></tr>
     <tr><td>user.publish.qos.destination</td><td>Message not delivered as destination is illegal</td></tr>
     <tr><td>user.publish.key</td><td>Your key has illegal syntax</td></tr>
     <tr><td>user.publish.key.oid</td><td>Such an oid is not accepted</td></tr>
     <tr><td>user.publish.maxSize</td><td>The message sent is too big</td></tr>
     <tr><td>...</td><td>...</td></tr>
     <tr><td>transaction</td><td>Todo</td></tr>
    </table>
    <br />

    <p>
    An XmlBlasterException contains a set of attributes describing an exception, all of type String:
    </p>
    <ul>
      <li><b>{0} errorCode</b>:  The hierarchical error code (e.g. <i>"security.notauthenticated"</i>)</li>
      <li><b>{1} node</b>:       Cluster node location (e.g. <i>/node/heron</i>)</li>
      <li><b>{2} location</b>:   Logical location in the code (e.g. <i>client/joe/3-SubscriptionInfo</i>)</li>
      <li><b>{3} isServerSide</b>: Marks the origin of the exception, if originally is thrown on server or client side</li>
      <li><b>{4} message</b>:     The human readable error text (e.g. <i>"Authorization denied for message oid 'accountRetrieval'"</i>)</li>
      <li><b>{5} versionInfo</b>:     Information like xmlBlaster version, OS name, Java version etc.<br />
                  (e.g. <i>"version=0.81,os.name=Linux,java.version=1.4.1-rc, build.java.vendor=IBM,build.java.version=1.3.1, build.timestamp=06/17/2002 01:59 PM"</i>)</li>
      <li><b>{6} timestamp</b>:       Timestamp when exception was thrown (e.g. <i>2002-02-10 11:57:51.804000001</i>)</li>
      <li><b>{7} stackTrace</b>:      The stack trace (optional, for debugging)</li>
      <li><b>{8} embeddedMessage</b>:    The original exception message (optional, if another exception is re-thrown)</li>
      <li><b>{9} errorCode.getUrl()</b>: The online URL describing the problem</li>
    </ul>
    <br />
    <p>
    Examples for <i>location</i>:
    </p>
    <table border="1">
     <tr><th>location</th><th>Description</th></tr>
     <tr><td>/node/heron/client/joe/3</td><td>A specific user session</td></tr>
     <tr><td>/node/heron/plugin/email</td><td>Email protocol problems</td></tr>
     <tr><td>...</td><td>...</td></tr>
    </table>

    <br />
    <p>
    All ID's could be made available in a java.util.ResourceBundle,
    the client or server can display a localized text for the errorCode in this case.
    </p>

   </description>

   <example lang="XML" type="RAW">

An xml representation is

XmlBlasterException.toXml():
============================

 &lt;exception id='user.publish.qos'>

    &lt;errorCode>
       &lt;user>
          &lt;publish>
             &lt;qos/>
          &lt;/publish>
       &lt;/user>
    &lt;/errorCode>

    &lt;location>
       &lt;node>
           &lt;heron>
             &lt;client>
                &lt;joe/>
             &lt;/client>
           &lt;/heron>
       &lt;/node>
    &lt;/location>

    &lt;message>&lt;![CDATA[Invalid publish]]&gt;&lt;/message>

    &lt;stackTrace/>

 &lt;/exception>
   </example>

   <example lang="JAVA" type="RAW">

// Example showing how to convert an Exception (as a server developer)
import org.xmlBlaster.util.XmlBlasterException;
import org.xmlBlaster.util.enum.ErrorCode;

try {

   ... // Throws exceptions 

}
catch (CorbaException ex) {

   throw new XmlBlasterException(glob,
                  ErrorCode.COMMUNICATION_NOCONNECTION_POLLING,
                  this.getClass().getName(),
                  "No callback connection to client joe",
                  ex);

}
   </example>

   <example lang="JAVA" type="RAW">

//=====================================================================
// Example showing usage by a client

try {

   ... // Throws exceptions 

}
catch (XmlBlasterException ex) {

   // Display full stack trace for internal exceptions
   // and moderate information for user exceptions with getMessage():

   log4j.error(ex.getMessage());
}
//=====================================================================


//=====================================================================
// For user exceptions the output could look like this:
errorCode=[user.configuration]
node=[xmlBlaster]
location=[ConnectionsHandler-client:client/joe]
message=[Please provide a public session ID]
//=====================================================================


//=====================================================================
// For internal exceptions the output could look like this:
node=[xmlBlaster]
location=[XmlBlasterAccess-client/joe]
java.lang.NullPointerException: 

stackTrace=java.lang.NullPointerException: 
        at org.xmlBlaster.client.XmlBlasterAccess.connect(XmlBlasterAccess.java:181)
        at HelloWorld2(HelloWorld2.java:28)
        at HelloWorld2.main(HelloWorld2.java:76)
errorCode=internal.nullpointer message=Connection failed
        at org.xmlBlaster.util.XmlBlasterException.convert(XmlBlasterException.java:551)
        at org.xmlBlaster.util.XmlBlasterException.convert(XmlBlasterException.java:540)
        at org.xmlBlaster.client.XmlBlasterAccess.connect(XmlBlasterAccess.java:211)
        at HelloWorld2(HelloWorld2.java:28)
        at HelloWorld2.main(HelloWorld2.java:76)

versionInfo=version=0.844,os.name=Linux,os.version=2.4.19-4GB,
java.vm.vendor=IBM Corporation,java.vm.version=1.4.0,os.arch=x86,
build.timestamp=03/24/2003 11:46 PM,
build.java.vendor=IBM Corporation,build.java.version=1.4.0

errorCode description=A null pointer is an xmlBlaster internal programming error,
                      please post it to the mailing list.
//=====================================================================
   </example>

   <configuration where="server">
      <p>
      These parameters allow to configure the dispatch plugin.
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>XmlBlasterException.logFormat</td>
            <td>errorCode=[{0}] serverSideException={3} node=[{1}] message=[{4} {8}]</td>
            <td>Allows to format the returned exception text when <i>exception.getMessage()</i> is invoked.
            See the meaning of the numbers in the above description, e.g. <i>{0}</i> is a place holder
            for the <i>errorCode</i> and <i>{5}</i> for <i>versionInfo</i>.
            <p>
            The left example would result in a logging output like:
            </p>
            <i>
            errorCode=[resource.overflow.queue.bytes] node=[/node/heron] message=[Bla bla ]
            </i>
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>XmlBlasterException.logFormat.internal</td>
            <td>Dumps extended informations including the stack trace</td>
            <td>Allows to format the returned exception text when <i>exception.getMessage()</i> is invoked
            specifically for <i>internal</i> exceptions.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>XmlBlasterException.logFormat.resource</td>
            <td>defaults to XmlBlasterException.logFormat</td>
            <td>Allows to format the returned exception text when <i>exception.getMessage()</i> is invoked
            specifically for <i>resource</i> exceptions.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>XmlBlasterException.logFormat.communication</td>
            <td>defaults to XmlBlasterException.logFormat</td>
            <td>Allows to format the returned exception text when <i>exception.getMessage()</i> is invoked
            specifically for <i>communication</i> exceptions.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>XmlBlasterException.logFormat.user</td>
            <td>defaults to XmlBlasterException.logFormat</td>
            <td>Allows to format the returned exception text when <i>exception.getMessage()</i> is invoked
            specifically for <i>user</i> exceptions.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>XmlBlasterException.logFormat.transaction</td>
            <td>defaults to XmlBlasterException.logFormat</td>
            <td>Allows to format the returned exception text when <i>exception.getMessage()</i> is invoked
            specifically for <i>transaction</i> exceptions.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>XmlBlasterException.logFormat.legacy</td>
            <td>defaults to XmlBlasterException.logFormat</td>
            <td>Allows to format the returned exception text when <i>exception.getMessage()</i> is invoked
            specifically for <i>legacy</i> exceptions.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>
   </configuration>

   <todo type='HTML'>
   </todo>
   
   <see type="API">org.xmlBlaster.util.enum.ErrorCode</see>
   <see type="API">org.xmlBlaster.util.XmlBlasterException</see>
   <!-- see type="REQ">admin.commands</see -->
   
   <author>konrad.krafft@doubleslash.de</author>
   <author>xmlBlaster@marcelruff.info</author>
   <author>laghi@swissinfo.org</author>
   
   <date>2002 09 24</date>
   
   <revision>$Revision: 1.25 $</revision>

   <testcase status="OPEN">
      <name>-</name>
      <comment>Currently not available</comment>
      <test tool="SUITE"></test>
   </testcase>
</requirement>

