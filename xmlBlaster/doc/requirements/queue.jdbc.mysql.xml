<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='queue.jdbc.mysql' type='NEW' prio='LOW' status='INWORK'>
   <topic>
        XmlBlaster has an advanced queuing facility.
		  Among others, one tested persistence layer is offered by
        communicating with a MySQL database.
   </topic>
    <description>
       <p>The generic plugin for jdbc based queues has been tested against MySQL using the Liberty Database 
       abstraction layer. See also queue.jdbc.ldbc</p>
        <p>MySQL Server is available from <a href='http://www.mysql.org/' target='others'>http://www.mysql.org/</a>
        where you can find all necessary information and instructions on how to make MySQL Server run.
        </p>
        <p>Once you have a running database you can configure xmlBlaster to make it run against it.
        First you need to download the jdbc driver.
		  <a href='http://www.mysql.com/downloads/api-jdbc.html' target='others'>http://www.mysql.com/downloads/api-jdbc.html</a>
		  You must put these files in the CLASSPATH (for example you can put them into $XMLBLASTER_HOME/lib 
		  and add them to the CLASSPATH or in your runtime library directory jre/lib/ext/.
        </p>
        <h3>Setup MySQL Server</h3>
		  <ol>
		  <li>Note some default installs disable MySQL Networking. See /etc/mysql/my.cnf [mysqld] skip-networking</li>
		  <li>Also increase the Maximum Packet Size. [mysqld] max_allowed_packet MySQL Default on Debian Woody is 1M (meg) xmlBlaster will fail some tests with a setting below 3M</li>
		  <li>Create the database to be used. mysql; create database xmlb;</li>
        <li>Setup xmlBlaster.properties as described in the example section below</li>
		  </ol>
    </description>
    <example lang="Java" type="HTML">
    
   </example>
   <configuration where="server">
   <p>These parameters allow you to configure a cache queue running with MySQL Server
   </p>
     To activate persistence please add the following to your properties file:
     <pre>
persistence/topicStore/defaultPlugin=JDBC,1.0
persistence/msgUnitStore/defaultPlugin=CACHE,1.0

QueuePlugin[JDBC][1.0]=org.xmlBlaster.util.queue.jdbc.JdbcQueueCommonTablePlugin,\
                    url=jdbc:ldbc:mysql://localhost/xmlb,\
                    user=xmlb,\
                    password=secret,\
                    connectionPoolSize=1,\
                    connectionBusyTimeout=90000,\
                    maxWaitingThreads=300,\
                    tableNamePrefix=XB_,\
                    entriesTableName=ENTRIES,\
                    dbAdmin=true,\
                    cascadeDeleteSupported=false,\
                    nestedBracketsSupported=false,\
                    configurationIdentifier=ldbc
                    
QueuePlugin[RAM][1.0]=org.xmlBlaster.util.queue.ram.RamQueuePlugin
QueuePlugin[CACHE][1.0]=org.xmlBlaster.util.queue.cache.CacheQueueInterceptorPlugin,\
persistentQueue=JDBC,transientQueue=RAM

queue/subject/defaultPlugin=CACHE,1.0
queue/history/defaultPlugin=CACHE,1.0
queue/callback/defaultPlugin=CACHE,1.0
useTopicStore=true

JdbcDriver.drivers=org.ldbc.jdbc.jdbcDriver

JdbcDriver.mapping[ldbc]=string=varchar(128),"longint=decimal(19,0)",int=int,boolean=char(1),\
		blob=blob,pingStatement=Show All,blobVarName=ablob, keyAttr=not null
     </pre>
     <table border="1">
        <tr>
          <td><b>Property</b></td>
          <td><b>default</b></td>
          <td><b>comment</b></td>
        </tr>
        <tr>
          <td>persistence/topicStore/defaultPlugin</td>
          <td>JDBC,1.0</td>
          <td>The default persistance topic store plugin.</td>
        </tr>
        <tr>
          <td>persistence/msgUnitStore/defaultPlugin</td>
          <td>CACHE,1.0</td>
          <td>The default persistance message unit store plugin.</td>
        </tr>
        <tr>
          <td>url</td>
          <td>jdbc:ldbc:mysql://localhost/xmlb</td>
          <td>The database url string. Example jdbc:ldbc:mysql://localhost:3306/xmlb</td>
        </tr>
        <tr>
          <td>user</td>
          <td>xmlb</td>
          <td>The database user name.</td>
        </tr>
        <tr>
          <td>password</td>
          <td>secret</td>
          <td>The database password</td>
        </tr>
        <tr>
            <td>connectionPoolSize</td>
            <td>1</td>
            <td>The number of connections to the DB (tests showed that a low number gives the best performance).</td>
        </tr>
        <tr>
            <td>connectionBusyTimeout</td>
            <td>90000</td>
            <td>The time to wait in milliseconds until to timeout when waiting for a connection to the DB.</td>
        </tr>
        <tr>
            <td>maxWaitingThreads</td>
            <td>300</td>
            <td>The maximum number of threads waiting for a connection to the DB.</td>
        </tr>
        <tr>
          <td>tableNamePrefix</td>
          <td>XB_</td>
          <td>the name prefix for the table containing the entries. Note that the complete names for the 
              tables are created by adding the tableNamePrefix to the names. So if you specify 
              <i>entriesTableName=ENTRIES</i> and <i>tableNamePrefix=XB_</i> you will get the name of the table 
              to be <i>XB_ENTRIES</i>.
          </td>
        </tr>
        <tr>
          <td>entriesTableName</td>
          <td>ENTRIES</td>
          <td>the name postfix for the table containing the entries.</td>
        </tr>
        <tr>
          <td>dbAdmin</td>
          <td>true</td>
          <td>if set to true xmlBlaster will try to create tables if needed.</td>
        </tr>
		  <tr>
          <td>cascadeDeleteSupported</td>
          <td>false</td>
          <td>Ldbc does not currently support cascade delete. A code work around has been put in place.</td>
        </tr>
		  <tr>
          <td>nestedBracketsSupported</td>
          <td>false</td>
          <td>Ldbc does not support nested brackets in some queries.</td>
        </tr>
		  <tr>
          <td>configurationIdentifier</td>
          <td>ldbc</td>
          <td>The identifier used for database mapping. See JdbcDriver.mapping[ldbc]</td>
        </tr>
        <tr>
            <td>maxStatementLength</td>
            <td>2048</td>
            <td>The maximum SQL statement length supported by this JDBC driver.
            If the JDBC meta data delivers this information this property is ignored.</td>
         </tr>
         <tr>
            <td>enableBatchMode</td>
            <td>true</td>
            <td>Tells the driver to make the addition of entries in batch mode, i.e. several entries are
	        added in the same sweep. This can improve performance on some DB's significantly. The 
		drawback is that it could loose performance and create noisy logs in the case you insert
		several entries and one of them is already in the DB. Then everything would be rolled back
		and repeated in single mode (we can not save the current state since PostGres implicitly
		aborts transactions in case of an SQLException is thrown). If the DB used does not support
		batch mode, then this option is ignored.
	          </td>
         </tr>
         <tr>
          <td>QueuePlugin[RAM][1.0]</td>
          <td>org.xmlBlaster.util.queue.ram.RamQueuePlugin</td>
          <td>Ram based plugin.</td>
        </tr>
        <tr>
          <td>QueuePlugin[CACHE][1.0]</td>
          <td>CacheQueueInterceptorPlugin,<br></br>persistentQueue=JDBC,<br></br>transientQueue=RAM</td>
          <td>Cache plugin.</td>
        </tr>
         <tr>
          <td>queue/subject/defaultPlugin</td>
          <td>CACHE,1.0</td>
          <td>The queue subject default plugin.</td>
        </tr>
        <tr>
          <td>queue/history/defaultPlugin</td>
          <td>CACHE,1.0</td>
          <td>The queue history default plugin.</td>
        </tr>
        <tr>
          <td>queue/callback/defaultPlugin</td>
          <td>CACHE,1.0</td>
          <td>The queue callback default plugin.</td>
        </tr>
        <tr>
          <td>useTopicStore</td>
          <td>false</td>
          <td>Use the topic store.</td>
        </tr>
     </table>
      <p>Additionally the configuration parameters for the ram queue and the jdbc queue must be defined.
      </p>
   </configuration>
   <see type="API">org.xmlBlaster.util.queue.I_Queue</see>
   <see type="API">org.xmlBlaster.util.queue.jdbc.JdbcQueueCommonTablePlugin</see>
   <see type="API">org.xmlBlaster.util.queue.QueuePluginManager</see>
   <see type="API">org.xmlBlaster.util.queue.I_QueueEntry</see>
   <see type="API">org.xmlBlaster.util.qos.storage.QueuePropertyBase</see>
   <see type="API">org.xmlBlaster.util.I_Plugin</see>
   <see type="API">org.xmlBlaster.util.Global</see>
   <see type="REQ">queue</see>
	<see type="REQ">queue.jdbc.ldbc</see>

   <author>Peter Bennett</author>
   <date>2003 07 11</date>
   <revision>$Revision: 1.4 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.classtest.queue.I_QueueTest</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.queue.JdbcQueueTest</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.queue.CacheQueueTest</test>
   </testcase>
</requirement>

