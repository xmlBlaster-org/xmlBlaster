<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='engine.callback' type='NEW' prio='HIGH' status="CLOSED">
   <topic>XmlBlaster has a sophisticated client callback framework</topic>
   <description>
      <p>
      XmlBlaster has a callback framework to send messages to clients.
      Clients need to establish a callback server (in any supported protocol)
      to receive these asynchronous messages.
      </p>
      <img src="MsgQueue.gif" border="0" title="XmlBlaster Message Queue" alt="Overview of the internal message queue framework" />
      <p>
      Callback Features:
      </p>
      <ul>
      <li>Thread pool<br />
      A callback is invoked by a thread from a thread pool. Retrieving a thread
      from the pool consumes approximately 180 micro seconds compared to approximately
      800 micro seconds creating a thread natively.
      It is guaranteed that a maximum of one thread is occupied per queue/callback.
      </li>
      <li>Zero or once delivery (transient message)<br />
      A message is usually delivered exactly once. Under certain failure circumstances
      a message can't be delivered or is even redelivered:
      <ol>
         <li>If xmlBlaster is shutdown or crashes, transient messages are lost.</li>
         <li>If the client can't be reached or the client does not acknowledge the
         message, xmlBlaster will redeliver the message. Such messages are marked with
         a QoS tag &lt;redeliver>12&lt;/redeliver> whereby 12 is the current attempt.
         xmlBlaster retries as configured (see below) or until the message or queue
         span of life expires and in this case the lost messages
         are published as <i>dead letters</i> (the login session is destroyed as well).
         Redelivering can be switched off, resulting in immediate <i>dead letters</i> and
         garbage collection of resources.
         </li>
         <li>For PtP messages it could be reasonable to inform the sender of the message about
         this situation [needs to be specified]</li>
      </ol>
      </li>
      <li>Once and only once delivery (durable message)<br />
      Durable messages are guaranteed to be delivered once and only once, even if
      xmlBlaster crashes or is shutdown interim. Durable messages are stored
      in xmlBlasters database on hard disk as soon as it arrives.
      Only if a client is not reachable or not acknowledging, a message
      can be lost (see previous paragraph).
      </li>
      <li>Burst mode (collect messages)<br />
      XmlBlaster allows to activate a <i>burst mode</i>. This allows to
      collect messages for a client for a configurable amount of time (typically
      50 milli seconds). This increases latency of message delivery for 50 msec
      but allows a much higher message throughput. The overall performance increases.
      </li>
      <li>Protect against misbehaving clients [TODO]<br />
      Every callback is controlled by a timer, to avoid leakage of threads
      and memory resources in the server when clients misconduct.
      </li>
      <li>ACK/NAK handling<br />
      Clients shall acknowledge messages if they are capable to do so.
      For dumb clients or connectionless protocols like email, the xmlBlaster
      plugin driver can simulate the ACK. Callbacks are only as reliable
      as the protocol and client allows.<br />
      ACK/NAK handling is achieved through return values of method invocation.
      Oneway invocations have no ACK/NAK support on application level, but the underlying
      TCP ACK/NAK makes them reliable enough for many use cases.
      </li>
      <li>Automatic disconnect detection<br />
      Failed callback connections are caught by xmlBlaster and handled as described
      above.
      </li>
      <li>Authentication on callback<br />
      The update() method invoked on client side has to accept the message and has
      the problem to trust the sender. Another process may otherwise misuse the
      callback and send unauthorized messages. Therefore the first argument in update()
      sends a sessionId, which must be passed to xmlBlaster initially on callback construction.
      </li>
      <li>Oneway invocations<br />
      Oneway invocations are method invocations without a return value.
      The increase performance but loose ACK/NAK on application level:
      The publish() and update() methods support oneway variants called publishOneway()
      and updateOneway().<br />
      Note that only CORBA and our native SOCKET protocol support oneway invocations.
      XmlRpc, RMI and the like don't support this mode.
      </li>
      <li>Message compression [TODO]<br />
      Messages can be compressed with the zip format. The zip applies for the content of
      the message only. Zipping happens before sending a message to a callback server which
      requested this service.
      Zipping is applied only to contents bigger a configurable value, typically contents
      bigger 1.2 kBytes.
      </li>
      <li>Pinging of callback server<br />
      The callback server is pinged every minute as default. Pinging with method ping() is similar
      implemented as the update() invocation on the client callback server.
      If the ping fails ('onExhaust') the session is killed - the client is auto logged out.
      </li>
      <li>Error handling<br />
      We distinguish recovery procedures for callback connection problems
      and for blocking clients and for clients sending NAK.
      <p>
      There are different error conditions when invoking update() or ping():
      </p>
      <ol>
         <li>Receiver is not reachable or throws an exception<br />
         Depending on configuration we try to redeliver. When we give up
         a dead letter is published and the client is logged out.
         </li>
         <li>Receiver blocks [TODO]<br />
         Currently we can't detect this, the callback worker thread is blocked
         and lost.
         </li>
         <li>Receiver sends error in return string<br />
         The return value is ignored, the message counts as delivered.
         In future this information may be used for transaction processing.
         </li>
      </ol>
      <p>
      A possible approach for a lost PtP messages is to send a NAK to the
      sender of the message [TODO - needs to be specified]
      </p>
      </li>
      
      <li><br />
      </li>
      </ul>

      <p>
      Open issues
      </p>
      <ul>
      <li>Blocking publisher<br />
      XmlBlaster blocks a publish() invocation of a client until it has
      securely accepted the message.
      Is it necessary to support a blocking until e.g. a PtP message is delivered
      to its destinations (like a blocking RPC call)?
      </li>
      <li>Transactional context<br />
      Transaction support (probably based on Jini) and failure recovery needs to be specified.
      </li>
      </ul>
      <p>
      </p>
   </description>
   <example lang="Java">
   This shows the callback part of a connect() or subscribe() QoS:
   <![CDATA[
   <callback type='IOR' sessionId='4e56890ghdFzj0' pingInterval='60000'
             retries='5' delay='60000' oneway='true' useForSubjectQueue='true'>
      IOR:00044550005...
      <compress type='gzip' minSize='1000'/>
      <burstMode collectTime='400'/>
   </callback>
   ]]>
   Use CORBA to callback messages, on error retry 5 times pausing 60000 millis between retries.
   
   Deliver the given sessionId with update() to the client so that the client can trust us.
   
   Ping the client every 60000 millis (one minute) to check if he is alive.
   
   The given callback may be used by the subjectQueue as well.

   Compress messages bigger 1000 bytes before sending them to me.

   Collect messages for 400 milliseconds and update them in one callback (burst mode)
   This update mode is a 'transaction' for all collected messages.

   The messages are sent oneway, there is no return value or exception transfer
   for this method invocation. In other words there is no
   application level ACK. Default is oneway='false'.
   </example>
   <configuration where="client">
      <p>
      These parameters can be specified on client side with java clients (see ConnectQos API).
      </p>
      <p>
      Other programming languages need to supply these setting with a raw XML string (see example section above).
      </p>
      <table border="1">
         <tr>
            <td>Property</td>
            <td>Default</td>
            <td>Description</td>
            <td>Implemented</td>
         </tr>
         <tr>
            <td>cb.collectTime</td>
            <td>0</td>
            <td>BurstMode: The time to collect messages for update</td>
            <td>yes</td>
         </tr>
         <tr>
            <td>cb.pingInterval</td>
            <td>60000 (one minute)</td>
            <td>Ping interval: pinging every given milliseconds</td>
            <td>yes</td>
         </tr>
         <tr>
            <td>cb.retries</td>
            <td>0</td>
            <td>How often to retry if callback fails: defaults to 0 == don't retry, on failure we give up.
                Set to -1 to try forever</td>
            <td>yes</td>
         </tr>
         <tr>
            <td>cb.delay</td>
            <td>60000 (one minute)</td>
            <td>Delay between callback retires in milliseconds</td>
            <td>yes</td>
         </tr>
         <tr>
            <td>cb.useForSubjectQueue</td>
            <td>true</td>
            <td>Shall this session callback be used for subjectQueue messages as well?</td>
            <td>yes</td>
         </tr>
         <tr>
            <td>cb.compress.type</td>
            <td>""</td>
            <td>Compress messages if set to "gzip" or "zip"</td>
            <td>no</td>
         </tr>
         <tr>
            <td>cb.compress.minSize</td>
            <td>0</td>
            <td>Messages bigger this size in bytes are compressed</td>
            <td>no</td>
         </tr>
         <tr>
            <td>cb.ptpAllowed</td>
            <td>true</td>
            <td>PtP messages wanted? Defaults to true, false prevents spamming</td>
            <td>yes</td>
         </tr>
         <tr>
            <td>cb.recieveTimestampHumanReadable</td>
            <td>false</td>
            <td>You can force a human readable timestamp in the QoS of received messages on update(), see API of UpdateQos below</td>
            <td>yes</td>
         </tr>
         <tr>
            <td>cb.sessionId</td>
            <td>unknown</td>
            <td>The identifier sent to the callback client, the client can decide if he trusts this invocation</td>
            <td>yes</td>
         </tr>
      </table>
   </configuration>
   <see type="API">org.xmlBlaster.engine.queue.MsgQueue</see>
   <see type="API">org.xmlBlaster.engine.callback.CbWorker</see>
   <see type="API">org.xmlBlaster.engine.helper.CallbackAddress</see>
   <see type="API">org.xmlBlaster.engine.helper.QueueProperty</see>
   <see type="API">org.xmlBlaster.engine.util.ConnectQos</see>
   <see type="API">org.xmlBlaster.client.UpdateQos</see>
   <see type="API">testsuite.org.xmlBlaster.TestCallbackConfig</see>
   <see type="REQ">engine.queue</see>
   <see type="REQ">engine.qos.login.callback</see>
   <see type="REQ">util.property</see>
   <see type="REQ">util.property.args</see>
   <see type="REQ">util.property.env</see>
   <author>ruff@swand.lake.de</author>
   <date>2002 02 04</date>
   <revision>$Revision: 1.17 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>Check failure handling</comment>
      <test tool="SUITE">testsuite.org.xmlBlaster.TestCallback</test>
   </testcase>
   <testcase status="INWORK">
      <name>-</name>
      <comment>Check different configuration settings</comment>
      <test tool="SUITE">testsuite.org.xmlBlaster.TestCallbackConfig</test>
   </testcase>
</requirement>

