<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='mime.plugin.publishfilter.howto' type='NEW' prio='HIGH' status='CLOSED'>
   <topic>XmlBlaster supports to plugin your own publish message filters</topic>
   <description>
      <p>
      XmlBlaster allows to code your own specific plugins to filter messages looking
      into their content similar to CORBA interceptors.
      The plugin is MIME aware, allowing to code different plugins
      for different message MIME types. A MIME type is for example "text/xml" or "audio/midi"
      or your own specific message MIME type like "application/cool".
      The mime type "*" registers the plugin for all message MIME types.
      </p>
      <p>
      There is an example xmlBlaster/src/java/org/xmlBlaster/engine/mime/demo/PublishLenChecker.java
      showing how to code your plugin. Just take a copy of this and change the parts 
      you want.
      </p>
      <p>
      These are the steps to implement your plugin:
      </p>
      <ul>
      <li>Your plugin needs to implement the interface I_Plugin<br />
      This allows our plugin manager to load the plugin as specified in xmlBlaster.properties
      </li>
      <li>Your plugin needs to implement the interface I_PublishFilter<br />
      The main things here are
      <ul>
         <li>Code your filter rules in the method intercept(), return "OK" if you accept the message
         or return an error string like <i>REJECTED</i> if you want to reject it.
         Please read the Javadoc of the intercept() method about its behavior on exceptions.
         </li>
         <li>
         Return the MIME types and version number this plugin can handle.
         </li>
      </ul>
      </li>
      <li>Register the plugin in xmlBlaster.properties (or on command line)<br />
      This entry registers the plugin PublishLenChecker.
         <table border="1"><tr><td><pre>

MimePublishPlugin[PublishLenChecker][1.0]=org.xmlBlaster.engine.mime.demo.PublishLenChecker
         </pre></td></tr></table>
      Clients address the plugin when they publish a message which has a mime type supported
      by your plugin.
      </li>
      <li>You can pass optional parameters to your plugin<br />
      This entry registers the plugin PublishLenChecker in xmlBlaster.properties and
      adds some options (needs to be in one line).
         <table border="1"><tr><td><pre>

MimePublishPlugin[PublishLenChecker][1.0]=
  org.xmlBlaster.engine.mime.demo.PublishLenChecker,DEFAULT_MAX_LEN=10000,DEFAULT_MIN_LEN=10
         </pre></td></tr></table>
      The plugin can access these options in its init() call:
         <table border="1"><tr><td><pre>
<![CDATA[
public void init(String[] options) throws XmlBlasterException {
   if (options != null) {
      for (int ii=0; ii<options.length-1; ii++) {
         if (options[ii].equalsIgnoreCase("DEFAULT_MAX_LEN")) {
            DEFAULT_MAX_LEN = (new Long(options[++ii])).longValue();
            Log.info(ME, "Setting DEFAULT_MAX_LEN=" + DEFAULT_MAX_LEN +
                         " as configured in xmlBlaster.properties");
         }
         ...
      }
   }
}
]]>
         </pre></td></tr></table>
      </li>
   </ul>
   </description>
   <example lang="Java">
For an example look at the code of PublishLenChecker.java (link below).
   </example>

   <configuration>
      <p>
      This parameter registers the plugin with xmlBlaster.
      </p>
      <table border="1">
         <tr>
            <td>MimePublishPlugin[myPlugin][1.0]</td>
            <td>myPlugin.mycomp.com
            </td>
            <td>
            Give your plugin a nice name, and use this in the first bracket,
            and give your plugin a version number which you add in the second bracket.<br />
            Than pass the class name of your plugin as the property value.<br />
            The name/version must be the same which you returned for I_Plugin.getType() and I_Plugin.getVersion().
            </td>
            <td>yes</td>
         </tr>
      </table>
   </configuration>

   <see type="API">org.xmlBlaster.engine.mime.I_PublishFilter</see>
   <see type="API">org.xmlBlaster.engine.mime.demo.PublishLenChecker</see>
   <see type="API">org.xmlBlaster.util.I_Plugin</see>
   <see type="REQ">mime.plugin.publishfilter</see>
   <see type="REQ">util.property.env</see>
   <author>ruff@swand.lake.de</author>
   <date>2002 03 14</date>
   <revision>$Revision: 1.4 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">testsuite.org.xmlBlaster.mime.TestPublishFilter</test>
   </testcase>
</requirement>

