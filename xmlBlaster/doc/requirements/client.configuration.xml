<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='client.configuration' type='NEW' prio='MEDIUM' status="INWORK">
   <topic>Description of the available client side configuration</topic>
   <description>
     <p>
     To understand the command syntax imagine a simple xml representation of an xmlBlaster client.
     </p>
     <table border="1"><tr><td><pre>
     <!-- pre class="BORDER" netscape does not like this -->
     <![CDATA[
<xmlBlaster>
   <node id='heron'>
      <plugin id='queue:CACHE' className='org.xmlBlaster.util.queue.cache.CacheQueueInterceptorPlugin'>
         <attribute id='transientQueue'>queue:RAM</attribute>
         <attribute id='persistentQueue'>queue:JDBC</attribute>
      </plugin>

      <plugin id='queue:RAM' className='org.xmlBlaster.util.queue.ram.RamQueuePlugin'/>

      <plugin id='queue:JDBC' className='org.xmlBlaster.util.queue.jdbc.JDBCQueueCommonTablePlugin'>
         <attribute id='url'>jdbc:oracle:thin:@localhost:1521:noty</attribute>
         <attribute id='user'>joe</attribute>
         <attribute id='password'>secret</attribute>
         <attribute id='connectionBusyTimeout'>90000</attribute>
         <attribute id='maxWaitingThreads'>300</attribute>
      </plugin>

      <client id='joe'>
         <state>ALIVE</state>
         <session id='-3'>
            <uptime>10050</uptime>

            <numPublished>4</numPublished>
            <numGets>7</numGets>
            <numUpdates>614050</numUpdates>

            <dispatch id='callback' sessionId='4e56890ghdFzj0'
                  pingInterval='10000' retries='-1' delay='10000'
                  oneway='false'>
               <plugin refid='dispatch:priority'/>
               <burstMode collectTime='400' />
               <compress type='gzip' minSize='3000'/>
               <ptp>true</ptp>
               <queue id='callback'>
                  <plugin refid='queue:CACHE'/>
                  <numEntries>7</numEntries>
                  <numBytes>90023</numBytes>
                  <maxEntries>1000</maxEntries>
                  <maxBytes>2000000</maxBytes>
                  <maxEntriesCache>100</maxEntriesCache>
                  <maxBytesCache>200000</maxBytesCache>
                  <threshold>80</threshold>  <!-- 80% -->
                  <thresholdOverflow type='event'/> <!-- a trap -->
                  <clearAction>DEAD_MESSAGE | DISCARD</clearAction>
                  <onOverflow>DEAD_MESSAGE</onOverflow>
                  <entry id='556643'>
                     <topic refid='hello'>
                        <entry refid='1046976320144000020'/>
                     </topic>
                  </entry>
               </queue>
               <address>
                  <plugin refid='protocol:SOCKET:users'/>
                  myHost.com:3098
               </address>
            </dispatch>

            <subscriptionList>__subId:3,__subId:XPATH2</subscriptionList>
            
            <!-- The settings used on the client side -->
            <dispatch id='client'>
               <queue>
                  <plugin refid='queue:CACHE'/>
                  <maxEntries>200</maxEntries>
                  <entry id='1046976320188000000' type='publish'>
                     <!-- client side queued entries -->
                     <key oid='hello' contentMime='text/plain'/>
                     <content>Salute</content>
                     <qos>
                        <persistent/>
                        <sender>/node/heron/client/joe</sender>
                        <expiration lifeTime='-1'/>
                     </qos>
                  </entry>
               </queue>
               <address id='client'>
                  <plugin id='protocol:XML-RPC:client' className='org.xmlBlaster.client.protocol.xmlrpc.XmlRpcConnection'>
                     <attribute id='hostname'>server.mycomp.com</attribute>
                     <attribute id='port'>6901</attribute>
                  </plugin>
               </address>
               <retries>-1</retries>
               <pingInterval>10000</pingInterval>
               <delay>10000</delay>
               <burstModeCollectTime>0</burstModeCollectTime>
               <cbSessionId>rcxxy77C</cbSessionId>
               <cbOneway>false</cbOneway>
               <cbPtpAllowed>true</cbPtpAllowed>
            </dispatch>
<!-- command line (or telnet) example -->
<!--
java HelloWorld3

   -/node/heron/client/HelloWorld3/session/3/dispatch/clientSide/queue/clientSide/maxEntries 200
   -dispatch/clientSide/queue/clientSide/maxEntries 200
   -dispatch/clientSide/queue//maxEntries 200
   -queue/clientSide/maxEntries 200
   -queue//maxEntries 200

   -dispatch/clientSide/pingInterval 10000

   -dispatch/callback/address/callback/  http://x.y.com:8089
   -dispatch/callback/address//  http://x.y.com:8089

   -dispatch/callback/pingInterval 20000

Old style:
 java HelloWorld3 -queue.maxEntries 200
                  -pingInterval 10000
                  -ior??
                  -cb.pingInterval 20000
-->

         </session> <!-- -3 -->

      </client> <!-- joe -->

      <!-- System properties, xmlBlaster.properties and
           command line arguments -->
      <numSysprop>117</numSysprop>
      <syspropList>java.io.tmpdir,java.vm.version,...</syspropList>
      <sysprop id='java.io.tmpdir'>/tmp</sysprop>
      <sysprop id='java.vm.version'>1.3.1</sysprop>
      <sysprop id='user.language'>es</sysprop>
      <sysprop id='Persistence.Path'>/home/mom/data</sysprop>
      <sysprop id='logFile'>/var/log/xmlBlaster-heron.log</sysprop>

   </node> <!-- heron -->
</xmlBlaster>
     ]]>
     </pre></td></tr></table>

   </description>


   <example lang="any" type="HTML">
      <p>
         Here is an example of a complete and valid URI, we should try
         not to break this syntax with our query language (NOTE: this is currently not implemented):
      </p>
   </example>

   <configuration where="server">
      <p>
      The available commands are marked as R=readable, W=writable, S=subscribable
      T=schedulable, P=pollable
      </p>
      <table border="1">
         <tr>
            <th>Command</th>
            <th>Type</th>
            <th>Read/Write</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

         <tr>
            <td>TODO</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
         </tr>

      </table>
   </configuration>

   <todo type="HTML">
      <ul>
        <li>Read/Write access with telnet and MoM clients on system properties, internal states
            and messages is implemented.</li>
        <li>SNMP (SnmpGateway.java) support is missing.</li>
        <li>JMX (JmxGateway.java) support is missing.</li>
        <li>A swing or browser based GUI interface for administration.</li>
        <li>Wildcard queries.</li>
        <li>XPath queries with <a href="http://jakarta.apache.org/commons/jxpath/" target="others">JXPath</a></li>
      </ul>
   </todo>

   <see type="API">org.xmlBlaster.engine.admin.I_AdminNode</see>
   <see type="API">org.xmlBlaster.engine.admin.I_AdminSubject</see>
   <see type="API">org.xmlBlaster.engine.admin.I_AdminSession</see>
   <see type="API">org.xmlBlaster.engine.admin.extern.TelnetGateway</see>
   <see type="REQ">admin</see>
   <see type="REQ">admin.telnet</see>
   <see type="REQ">admin.messages</see>
   <see type="REQ">engine.runlevel</see>

   <author>Heinrich.Goetzger@exploding-systems.de</author>
   <author>Michele.Laghi@swisscom.com</author>
   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 12</date>
   <revision>$Revision: 1.1 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.classtest.CommandWrapperTest</test>
   </testcase>
</requirement>

