<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='client.configuration' type='NEW' prio='MEDIUM' status="CLOSED">
   <topic>Description of the available client side configuration</topic>
   <description>

     <p>If you want to use the default behavior of xmlBlaster clients  you don't need to bother about 
        configuration parameters. For many usages however it is necessary to modify some of the
        parameters. These can be specified in the following ways:
        <ul>
          <li>a configuration file (normally xmlBlaster.properties)</li>
          <li>on the command line</li>
          <li>via setter methods in the code</li>
        </ul>
     </p>

     <p>The configuration file is the weakest, followed by the command line. The setter methods are the
        strongest and will overwrite defaults. The configuration file can reside in different directories.
     </p>

     <p><b>Configuration File</b><br/>
        The search path and sequence is described in the <a href='./util.property.html'>util.property 
        requirement</a>. For tips and syntax inside the configuration file have a look at the requirement
        <a href='./util.property.env.html'>util.property.env</a>
     </p>

     <p><b>Command Line</b><br/> 
        on the command line you can assign values to configuration parameters by prepending a - sign to
        the name of the parameter, then a space and then the value to be assigned. For example the 
        following is correct syntax:
        <pre>
java HelloWorld2 -dispatch/connection/pingInterval 1000
        </pre>                                    
        <b>For a list of all available command line parameters invoke -help on the command line:</b>
       <pre>
java HelloWorld2 -help
       </pre>
     </p>

     <p><b>Setter Methods</b><br/>
        A further alternative (and the strongest one) to assign values to the configuration parameters,
        is to explicitly set them in the client code you write yourself. Here follows a simple example:
        <pre>
      ...
   ConnectQos qos = new ConnectQos(glob);
   Address address = new Address(glob);
   address.setDelay(4000L);      // retry connecting every 4 sec
   address.setRetries(-1);       // -1 == forever
   address.setPingInterval(0L);  // switched off
      ...
        </pre>
        For a more detailed example have a look at the code for 
        <a href='http://www.xmlblaster.org/xmlBlaster/demo/javaclients/HelloWorld6.java.html'>HelloWorld6</a>.
     </p>
     <p>The following is a list of groups of properties used to configure xmlBlaster clients. <i><b>We
     are changing the syntax for the properties from the original "dot and bracket" syntax like
     <pre>
  -dispatch/callback/plugin/socket/responseTimeout 1000
  -trace[core] true
     </pre>
     to the new "slash" notation which we believe fits better our needs 
     <pre>
  -queue/callback/maxEntries 1000   
     </pre>
     This is an ongoing process and not all properties have been ported yet. You can read the status of
     this porting in the right column in the next table.
     </b></i>
      <center>
      <table border="1">
         <tr><th>Groups of Parameters</th><th>ported to new syntax</th></tr>
         <tr><td>Choice of Connection Protocol</td><td><img src="ok.gif" border="0" alt="yes"/></td></tr>
         <tr><td>Security Features</td><td><img src="no.gif" border="0" alt="no"/></td></tr>
         <tr><td>Security Plugin Specific Properties</td><td><img src="no.gif" border="0" alt="no"/></td></tr>
         <tr><td>Session Settings</td><td><img src="no.gif" border="0" alt="no"/></td></tr>
         <tr><td>Failsafe Connection to XmlBlaster Server</td><td><img src="ok.gif" border="0" alt="yes"/></td></tr>
         <tr><td>Server Side Callback (in case we install a local callback server)</td><td><img src="ok.gif" border="0" alt="yes"/></td></tr>
         <tr><td>Queue ClientSide Storage Properties</td><td><img src="ok.gif" border="0" alt="yes"/></td></tr>
         <tr><td>Queue Callback Storage Properties</td><td><img src="ok.gif" border="0" alt="yes"/></td></tr>
         <tr><td>Specific Communication Protocol Options</td><td><img src="ok.gif" border="0" alt="no"/></td></tr>
         <tr><td>Logging Options</td><td><img src="no.gif" border="0" alt="no"/></td></tr>
         <tr><td>Properties Framework</td><td><img src="no.gif" border="0" alt="no"/></td></tr>
      </table>
      </center>
     </p>
     <p>Please use the <i>-help</i> option to check the current status:</p>
     <pre>

 java org.xmlBlaster.Main -help     (server side configuration)

 java HelloWorld3 -help             (client side configuration)
     </pre>


     <p><b>Failsafe Connection to XmlBlaster Server</b><br/>

     The following parameters control the client side dispatch configuration
     <center>
     <table border="1">
       <tr><th>Command line</th><th>Comment and [default]</th></tr>
       <tr>
         <td>-dispatch/connection/burstMode/collectTimeOneway</td>
         <td>Number of milliseconds we shall collect oneway publish messages [0].
             This allows performance tuning, try set it to 200.</td>
       </tr>
       <tr>
         <td>-dispatch/connection/pingInterval</td>
         <td>Pinging every given milliseconds [10000]</td>
       </tr>
       <tr>
         <td>-dispatch/connection/retries</td>
         <td>How often to retry if connection fails (-1 is forever) [-1]</td>
       </tr>
       <tr>
         <td>-dispatch/connection/delay</td>
         <td>Delay between connection retries in milliseconds [5000] A delay value > 0 
            switches fails save mode on, 0 switches it off</td>
      </tr>

       <tr>
         <td>-dispatch/connection/protocol</td>
         <td>You can choose another protocol for the communication to xmlBlaster [defaults to -protocol]</td>
      </tr>
       <tr>
         <td>-bootstrapPort</td>
         <td>You can choose another bootstrapPort for the communication to xmlBlaster [3412]</td>
      </tr>
       <tr>
         <td>-dispatch/connection/plugin/xmlrpc/port</td>
         <td>You can choose another XmlRpc port for the communication to xmlBlaster [defaults to -plugin/xmlrpc/port]</td>
      </tr>



    </table>
    </center>
    </p>


     <p><b>Protocol specific configuration</b><br/>

     The following parameters control the client side dispatch configuration,
     in this example we show the options for the SOCKET protocol.
     <center>
     <table border="1">
       <tr><th>Command line</th><th>Comment and [default]</th></tr>
       <tr>
         <td>-dispatch/connection/plugin/socket/hostname</td>
         <td>IP or DNS host name where the xmlBlaster server is running [localhost].</td>
       </tr>
       <tr>
         <td>-dispatch/connection/plugin/socket/port</td>
         <td>The port where the server is listening [7607]</td>
       </tr>
       <tr>
         <td>-dispatch/connection/plugin/socket/localHostname</td>
         <td>Usually you don't need to set this parameter.
             My be useful for example if you are running on a multi homed host
             having multiple local IP addresses [localhost].</td>
       </tr>
       <tr>
         <td>-dispatch/connection/plugin/socket/localPort</td>
         <td>Usually this is dynamically chosen by your OS. You can configure it
             for example if you need to force a local port to satisfy a firewall.</td>
       </tr>
    </table>
    </center>
    </p>

     <p><b>Server Side Callback (in case we install a local callback server)</b><br/>
     The following parameters control the callback (server side) dispatch configuration. It only makes
     sense to configure these if you have assigned a callback to this session.
    <center>
     <table border="1">
       <tr><th>Command line</th><th>Comment and [default]</th></tr>
       <tr>
         <td>-dispatch/callback/sessionId</td>
         <td>The session ID which is passed to our callback server update() method.</td>
       </tr>
       <tr>
         <td>-dispatch/callback/burstMode/collectTime</td>
         <td>Number of milliseconds xmlBlaster shall collect callback messages [0].
            The burst mode allows performance tuning, try set it to 200.
         </td>
       </tr>
       <tr>
         <td>-dispatch/callback/oneway</td>
         <td>Shall the update() messages be send oneway (no application level ACK) [false]</td>
       </tr>
       <tr>
         <td>-dispatch/callback/pingInterval</td>
         <td>Pinging every given milliseconds [10000]</td>
      </tr>
       <tr>
         <td>-dispatch/callback/retries</td>
         <td>How often to retry if callback fails (-1 forever, 0 no retry, > 0 number of retries) [-1]</td>
      </tr>
       <tr>
         <td>-dispatch/callback/delay</td>
         <td>Delay between callback retries in milliseconds [5000]</td>
      </tr>
       <tr>
         <td>-dispatch/callback/compress/type</td>
         <td>With which format message be compressed on callback []</td>
      </tr>
       <tr>
         <td>-dispatch/callback/compress/minSize</td>
         <td>Messages bigger this size in bytes are compressed [0]</td>
      </tr>
       <tr>
         <td>-dispatch/callback/ptpAllowed</td>
         <td>PtP messages wanted? false prevents spamming [true]</td>
      </tr>
       <tr>
         <td>-dispatch/callback/protocol</td>
         <td>You can choose another protocol for the callback server [defaults to -protocol]</td>
      </tr>
       <tr>
         <td>-dispatch/callback/plugin/socket/port</td>
         <td>You can choose another port for the callback server [defaults to the protocol specific default port]</td>
      </tr>
    </table>
    </center>
     </p>

     <p><b>Queue Client Side Storage Properties</b><br/>
     <center>
     <table border="1">
       <tr><th>Command line</th><th>Comment and [default]</th></tr>
       <tr><td>-queue/connection/maxEntries</td><td>The maximum allowed number of messages [1000].</td></tr>
       <tr><td>-queue/connection/maxEntriesCache</td><td>The maximum allowed number of messages in the cache [1000].</td></tr>
       <tr><td>-queue/connection/maxBytes</td><td>The maximum size in bytes of the storage [10485760].</td></tr>
       <tr><td>-queue/connection/maxBytesCache</td><td>The maximum size in bytes in the cache [2097152].</td></tr>
       <tr><td>-queue/connection/onOverflow</td><td>What happens if storage is full [deadMessage]</td></tr>
       <tr><td>-queue/connection/onFailure</td><td>Error handling when storage failed [deadMessage]</td></tr>
       <tr><td>-queue/connection/type</td><td>The plugin type [RAM]</td></tr>
       <tr><td>-queue/connection/version</td><td>The plugin version [1.0]</td></tr>
       <tr><td>-queue/connection/defaultPlugin</td><td>The plugin type,version (short form) [RAM,1.0]</td></tr>
     </table>
     </center>
     </p>
     

     <p><b>Queue Callback Storage Properties</b><br/>
     <center>
     <table border="1">
       <tr><th>Command line</th><th>Comment and [default]</th></tr>

       <tr><td>-queue/callback/maxEntries</td><td>The maximum allowed number of messages [1000].</td></tr>
       <tr><td>-queue/callback/maxEntriesCache</td><td>The maximum allowed number of messages in the cache [1000].</td></tr>
       <tr><td>-queue/callback/maxBytes</td><td>The maximum size in bytes of the storage [10485760].</td></tr>
       <tr><td>-queue/callback/maxBytesCache</td><td>The maximum size in bytes in the cache [2097152].</td></tr>
       <tr><td>-queue/callback/onOverflow</td><td>What happens if storage is full [deadMessage]</td></tr>
       <tr><td>-queue/callback/onFailure</td><td>Error handling when storage failed [deadMessage]</td></tr>
       <tr><td>-queue/callback/type</td><td>The plugin type [RAM]</td></tr>
       <tr><td>-queue/callback/version</td><td>The plugin version [1.0]</td></tr>
       <tr><td>-queue/callback/defaultPlugin</td><td>The plugin type,version (short form) [RAM,1.0]</td></tr>
     </table>
     </center>
     </p>
     <b>Note that if you omit the prefix, i.e. if you write on the command line</b>
     <pre>
-maxBytes 10000
     </pre>
     <b>then you will assign this both to the connection queue and to the callback queue.</b>
     <p>
     To understand the command syntax imagine a simple xml representation of an xmlBlaster client.
     </p>

     <center>
     <table border="1"><tr><td><pre>
     <!-- pre class="BORDER" netscape does not like this -->
     <![CDATA[
<xmlBlaster>
  <node id='heron'>
    <plugin id='queueCACHE' 
       className='org.xmlBlaster.util.queue.cache.CacheQueueInterceptorPlugin'>
       <attribute id='transientQueue'>queueRAM</attribute>
       <attribute id='persistentQueue'>queueJDBC</attribute>
    </plugin>

    <plugin id='queueRAM' 
            className='org.xmlBlaster.util.queue.ram.RamQueuePlugin'/>

    <plugin id='queueJDBC' 
       className='org.xmlBlaster.util.queue.jdbc.JDBCQueueCommonTablePlugin'>
       <attribute id='url'>jdbc:oracle:thin:@localhost:1521:noty</attribute>
       <attribute id='user'>joe</attribute>
       <attribute id='password'>secret</attribute>
       <attribute id='connectionBusyTimeout'>90000</attribute>
       <attribute id='maxWaitingThreads'>300</attribute>
    </plugin>

    <client id='joe'>
       <state>ALIVE</state>
       <session id='-3'>
          <uptime>10050</uptime>

          <numPublished>4</numPublished>
          <numGets>7</numGets>
          <numUpdates>614050</numUpdates>

          <dispatch id='callback' sessionId='4e56890ghdFzj0'
                pingInterval='10000' retries='-1' delay='10000'
                oneway='false' burstModeCollectTime='0' ptpAllowed='true'>
             <plugin refid='dispatchPriority'/>
             <burstMode collectTime='400' />
             <compress type='gzip' minSize='3000'/>
             <ptp>true</ptp>
             <plugin refid='queueCACHE'>
                <attribute id='numEntries'>7</attribute>
                <attribute id='numBytes'>90023</attribute>
                <attribute id='onOverflow'>DEAD_MESSAGE</attribute>
             </plugin>
             <plugin refid='XMLRPC'>
                <attribute id='hostname'>client.mycomp.com</attribute>
                <attribute id='port'>8080</attribute>
             </plugin>
          </dispatch>

          <subscriptionList>__subId:3,__subId:XPATH2</subscriptionList>
          
          <!-- The settings used on the client side -->
          <dispatch id='connection'
                    pingInterval='2000' retries='-1' delay='5000'
                    oneway='false'>
             <plugin refid='queueCACHE'>
                <attribute id='maxEntries'>200</attribute>
                <attribute id='entry'>
                   <attribute id='id'>1046976320188000000</attribute>
                   <attribute id='type'>publish'</attribute>
                      <!-- client side queued entries -->
                   <attribute id='key'>
                     <attribute id='oid'>hello</attribute>
                     <attribute id='contentMime'>text/plain</attribute>
                   </attribute>
                   <attribute id='content'>Salute</attribute>
                   <attribute id='qos'>
                     <attribute id='persistent' />
                     <attribute id='sender'>/node/heron/client/joe</attribute>
                     <attribute id='expiration'>
                        <attribute id='lifeTime'>-1</attribute>
                     </attribute>
                   </attribute>
                </attribute>
             </plugin>
             
             <plugin id='XMLRPC'
                className='org.xmlBlaster.client.protocol.xmlrpc.XmlRpcConnection'>
                <attribute id='hostname'>server.mycomp.com</attribute>
                <attribute id='port'>6901</attribute>
             </plugin>
          </dispatch>

          <plugin id='XMLRPC-callback'
             className='org.xmlBlaster.protocol.xmlrpc.CallbackXmlRpcDriver'>
             <attribute id='hostname'>client.mycomp.com</attribute>
             <attribute id='port'>8080</attribute>
          </plugin>

       </session> <!-- -3 -->

    </client> <!-- joe -->

    <!-- System properties, xmlBlaster.properties and
         command line arguments -->
    <numSysprop>117</numSysprop>
    <syspropList>java.io.tmpdir,java.vm.version,...</syspropList>
    <sysprop id='java.io.tmpdir'>/tmp</sysprop>
    <sysprop id='java.vm.version'>1.3.1</sysprop>
    <sysprop id='user.language'>es</sysprop>
    <sysprop id='Persistence.Path'>/home/mom/data</sysprop>
    <sysprop id='logFile'>/var/log/xmlBlaster-heron.log</sysprop>

  </node> <!-- heron -->
</xmlBlaster>
     ]]>
     </pre></td></tr></table>
     </center>
   </description>


   <example lang="any" type="HTML">
      <p>
      The following means to set the maximum number of entries in the callback queue to 100. To set
      the maximum number of entries for the client side queue also to 100 and to put all ping intervals
      both on client and server side since no prefix is specified) to 20 seconds.
      <pre>
    java HelloWorld2 -queue/callback/maxEntries 100   \
                     -queue/connection/maxEntries 100 \
                     -pingInterval 20000
      </pre>
      The following command line has the same effect since it sets the maximum number of entries for 
      all queues (so it automatically sets it for callback and client side queue) to 100 and sets 
      individually the ping interval for the client pinging the server to 3 seconds and the ping
      interval of the server checking the clients callback listener to 20 seconds.
      <pre>
    java HelloWorld2 -maxEntries 100                        \
                     -dispatch/callback/pingInterval 20000  \
                     -dispatch/connection/pingInterval 3000 \
                     -protocol SOCKET
      </pre>
      The <i>-dispatch/callback/pingInterval</i> property is sent to the server with the ConnectQos
      and configures the server behavior. The <i>-dispatch/connection/pingInterval</i> setting is only
      evaluated on the client side. <i>-maxEntries 100</i> is looked at on client and on server side.<br />
      We have chosen the SOCKET protocol to talk to xmlBaster.

      </p>
      <h3>Assuring a client singleton</h3>
      <p>
      If you have to assure that an important client may only connect
      exactly once you can use xmlBlaster to assure this with following options
      (try the example on the command line):
      </p>
      <pre>
java org.xmlBlaster.Main

java HelloWorld4 -protocol SOCKET
                 -session.name Jack/1
                 -session.reconnectSameClientOnly true
                 -session.maxSessions 1
                 -dispatch/callback/pingInterval 1000

java HelloWorld4 -protocol SOCKET
                 -session.name Jack/1
                 -session.reconnectSameClientOnly true
                 -session.maxSessions 1
                 -dispatch/callback/pingInterval 1000
                 -xmlBlaster_uniqueId Jacky
   </pre>
   <p>
   <code>-session.maxSessions 1</code> assures that max. one session of <code>Jack</code>
   exists and <code>-session.reconnectSameClientOnly true</code> does only allow the
   creator of the session to reconnect, the second client using the same public session ID
   <code>1</code> gets no access.<br />If the first client crashes our frequent callback ping
   (every second) assures that the session of the crashed client is destroyed latest after
   one second and the second HelloWorld2 could now connect and take over the task.
   </p>
   <p>The setting <code>-xmlBlaster_uniqueId Jacky</code> we only need if we use
   HSQLDB as persistent layer to force a different database name of the second client
   (the database name is generated from the session.name and as this is the same
   for both clients and both run on the same test machine we need to force another
   setting).
   </p>
   <p>
   Hard coded in a Java client it looks something like:
   </p>
   <pre>
...

this.con = glob.getXmlBlasterAccess();

ConnectQos qos = new ConnectQos(glob, "JOE/1", "secret");

CallbackAddress callback = new CallbackAddress(glob);
callback.setPingInterval(1000);
qos.addCallbackAddress(callback);

SessionQos sessionQos = qos.getSessionQos();
sessionQos.setMaxSessions(1);
sessionQos.setReconnectSameClientOnly(true);
this.con.connect(qos, this);

...
    </pre>

   </example>

   <configuration where="client">
      <p>
      </p>
   </configuration>

   <see type="API">org.xmlBlaster.client.I_XmlBlasterAccess</see>
   <see type="REQ">util.property.env</see>
   <see type="REQ">interface</see>
   <see type="REQ">protocol</see>
   <see type="REQ">admin.errorcodes</see>

   <author>laghi@swisscom.com</author>
   <date>2003 03 25</date>
   <revision>$Revision: 1.24 $</revision>

   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestReconnectSameClientOnly</test>
   </testcase>
</requirement>

