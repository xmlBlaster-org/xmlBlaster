<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='client.filesystem' type='NEW' prio='HIGH' status="INWORK">
   <topic>
      You can publish messages by putting files on a certain location in the file system.
   </topic>
   <description>
      <ul>
         <li>The Poller is running as a native xmlBlaster plugin</li>
	 <li>Every registered Poller is listening on exactly one directory</li>
	 <li>The polling interval is expressed in ms and is configurable</li>
	 <li>All files in a directory are published on a configurable topic.</li>
	 <li>It is possible to specify a filter for the file name, then only the files matching the filter
	     will be processed by the current plugin
	 </li>
	 <li>It is possible to have several plugins polling for the same directory provided they both have
	     a filter specified. Filters must be choosed in such a way to avoid that the same file will 
	     match more than one filter. If the user does not ensure that, unpredicted behavior will result. 
	 </li>

	 <li>After a successful publish of the content of a file, the file is removed from the file system.
	      or, if a 'sent' directory is specified, files will be moved to that destination.
	 </li>
	 <li>It is possible to configure a maximum file size. Files bigger than the specified size are not
	     published. If a 'discarded' directory is specified in the properties, then the file will be 
	     moved to that directory, otherwise it will be deleted.
	 </li>
	 <li>
	    Detection of 'file ready for publishing': There are two mechanisms:
	    <ul>
	       <li>
	          locking: If 'lockExtention' is specified in the plugin configuration, then this mechanism
		  will be activated. To be used correctly before putting a file into the directory on which
		  the poller is listening, you have to put a file with the same name but ending with what
		  has been specified in 'lockExtention'. Suppose <i>lockExtention='.lck'</i> and you want to 
		  publish the content of a file called <i>someFile.gif</i>. Then you first must put a file
		  called <i>someFile.gif.lck</i> on the directory, thereafter you can put <i>someFile.gif</i>
		  and when you want to make it publish just remove <i>someFile.gif.lck</i>. At that point the
		  poller will publish the file.
	       </li>
	       <li>
	          If 'lockExtention' is not specified, the <i>optimistic</i> approach is choosed. Note that 
		  while simple to be used, there is no guarantee that the published messages really are 
		  completed. The process is the following: 
	       </li>
	    </ul>


	     All other files are sorted and published in a chronological sequence (oldest first).
	 </li>
	 <li>File locking: only publish when a file is completed. This means:
	     <ul>
	        <li>On Windows the file is first accessible when it is finished anyway (try this). 
		    On other systems we need a 'delaySinceLastFileChange' configuration variable.
		</li>
	     </ul> 
	 </li>
	 <li>If permissions to read the directory are missing or xmlBlaster has no read rights on a 
	     specific file, an error is reported (logged) and the plugin does temporarly stop working.
	     (to ensure correct sequence). The plugin continues however to poll and when the rights are 
	     suddently fixed, it continues working again.
	 </li>
       </ul>
   </description>
   <configuration where="server">
      <p>
         The plugin is configured in the xmlBlasterPlugins.xml configuration file. Here an example where
	 all properties are used:
<pre>
<![CDATA[
  <xmlBlaster>
    ...

     <plugin id='FilePollerPlugin' className='org.xmlBlaster.client.filesystem.FilePollerPlugin'>
        <attribute id='directoryName'>/tmp/filePoller</attribute>
        <!-- has no effect if publishKey defined: <attribute id='topicName'>poller.test</attribute> -->
        <attribute id='publishKey'>&gt;![CDATA[<key oid='poller.test'><poller><test/></poller></key>]]&lt;</attribute>
        <attribute id='publishQos'>&gt;![CDATA[<qos/>]]&lt;</attribute>
        <attribute id='connectQos'></attribute>
        <attribute id='maximumFileSize'>-1L</attribute>
        <attribute id='delaySinceLastFileChange'>10000L</attribute>
        <attribute id='warnOnEmptyFileDelay'>30000L</attribute>
        <attribute id='pollInterval'>2000L</attribute>
	<attribute id='loginName'></attribute>
	<attribute id='password'></attribute>

	<attribute id='sent'></attribute>
	<attribute id='discarded'></attribute>
	<attribute id='fileFilter'></attribute>
	<attribute id='lockExtention'>.lck</attribute>




        <action do='LOAD' onStartupRunlevel='9' sequence='6' onFail='resource.configuration.pluginFailed'/>
        <action do='STOP' onShutdownRunlevel='6' sequence='5'/>
     </plugin>
   ...

 </xmlBlaster>


]]>
</pre>

      </p>


   </configuration>


   <example lang="Java">
      <![CDATA[
      ]]>
   </example>
   <see>org.xmlBlaster.client.qos.SubscribeQos</see>
   <author>xmlBlaster@marcelruff.info</author>
   <hacker>xmlBlaster@marcelruff.info</hacker>
   <date>2002 06 26</date>
   <revision>$Revision: 1.7 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestSubId</test>
   </testcase>
</requirement>

