<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='engine.qos.publish.destination.offline' type='NEW' prio='LOW' status="CLOSED">
   <topic>If the receiver of a PtP message is offline or has no callback the behavior is configurable</topic>
   <description>
      <p>
      If you send a message to a named destination, using the qos &lt;destination&gt; tag,
      and there is no callback for this receiver, or the receiver is not logged in
      and the <i>forceQueuing</i> qos attribute is not set in this message, you get an
      XmlBlasterException.
      </p>
      <p>
      Having <i>forceQueuing=true</i> the behavior is as follows.
      <br />
      Messages for a destination are stored in a queue called <i>subject queue</i>.
      The subject queue holds a reference only which points the the real message
      which is stored in the message store:
      </p>
      <table>
      <tr>
      <th>QoS Setting</th>
      <th>Destination client</th>
      <th>Behavior</th>
      </tr>

      <tr>
      <td>Destination without pubSessionId (e.g. 'client/joe')</td>
      <td>Connected (callback is ALIVE or POLLING)</td>
      <td>If the destination client is connected one or multiple times all
          connected sessions receive the message.<br />
          If the destination client disappears before the message is delivered
          (the session is destroyed) it
          is put back to the subject queue of <i>joe</i></td>
      </tr>

      <tr>
      <td>Destination without pubSessionId (e.g. 'client/joe')</td>
      <td>Not connected</td>
      <td>If the destination client is <b>not</b> connected the
          message is queued in the subject queue of <i>joe</i>.
          If <i>joe</i> connects, the queued message is delivered
          automatically to its callback address.</td>
      </tr>

      <tr>
      <td>Destination with pubSessionId (e.g. 'client/joe/2')</td>
      <td>joe/2 is online (callback is ALIVE or POLLING)</td>
      <td>The message is delivered directly (ALIVE) or queued in the callback
      queue of <i>joe</i>'s session number <i>2</i> (POLLING).<br />
      If the callback goes to DEAD or the session times out before the
      message was delivered the message will be published as DEAD MESSAGE.</td>
      </tr>

      <tr>
      <td>Destination with pubSessionId (e.g. 'client/joe/2')</td>
      <td>Not connected</td>
      <td>The publisher gets an exception, the message is not delivered.</td>
      </tr>
      </table>

      <p>
      In a future version of xmlBlaster we should provide a plugin framework
      to control the delivery behavior of PtP messages in any way. A default
      plugin should support a load balancing delivery of PtP messages to
      exactly one receiver.
      </p>
   </description>
   <example lang="Java">
      <pre>
// Construct a message and send it to 'Michelle', she is currently not logged in
String xmlKey = "&lt;key oid='' contentMime='text/plain'/>";

String qos = "&lt;qos>" +
             "   &lt;destination forceQueuing='false'>" +
             "      client/Michelle/2" +
             "   &lt;/destination>" +
             "&lt;/qos>";

content = "Hi Michelle";
MsgUnit msgUnit = new MsgUnit(glob, xmlKey, content.getBytes(), qos);
try {
   xmlBlaster.publish(msgUnit);
} catch(XmlBlasterException e) {
   System.out.println("Exception is correct, Michelle is not logged in");
}
      </pre>
   </example>
   <see type="REQ">engine.qos.publish.destination.ForceQueuing</see>
   <see type="REQ">engine.qos.publish.destination.PtP</see>
   <see type="REQ">cluster.PtP</see>
   <see type="REQ">interface.publish</see>
   <see type="API">org.xmlBlaster.client.qos.PublishQos</see>
   <see type="API">org.xmlBlaster.client.key.PublishKey</see>
   <author>xmlBlaster@marcelruff.info</author>
   <date>2000 03 17</date>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestPtDQueue</test>
   </testcase>
</requirement>

