<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='admin.commands' type='NEW' prio='MEDIUM' status="CLOSED">
   <topic>Description of the available commands for remote administration of xmlBlaster</topic>
   <description>
     <p>
     XmlBlaster has an internal command interface which allows to
     monitor and control the server. You can connect to this command
     interface with arbitrary administration protocols like SNMP,
     telnet, JMX or xmlBlaster-command-messages.
     </p>
     <h3>
     What data can we monitor and control?
     </h3>
     <p>
     To understand the command syntax imagine a simple xml representation of xmlBlaster nodes
     (an xmlBlaster node is an xmlBlaster server instance in a cluster environment, read
     the <a href="cluster.html">cluster requirement</a> for more informations):
     </p>
     <table border="1"><tr><td><pre>
     <!-- pre class="BORDER" netscape does not like this -->
     <![CDATA[
<node>
   <numNodes>5</numNodes>
   <nodeList>heron,avalon,golan,frodo,bilbo</nodeList>
   <heron>
      <uptime>34000</uptime>      <!-- sec -->
      <runlevel>9</runlevel>
      <freeMem>13000000</freeMem> <!-- bytes -->
      
      <nodeId>heron</nodeId>
      <version>0.79f</version>
      
      <hostname>server.mycomp.com</hostname> <!-- bootstrap -->
      <port>3412</port>

      <buildTimestamp>06/17/2002 01:59 PM</buildTimestamp>
      <buildJavaVendor>Sun Microsystems Inc.</buildJavaVendor>
      <buildJavaVersion>1.3.1-beta</buildJavaVersion>
      <time>Mon Jun 17 15:54:16 CEST 2002<time/> <!-- server time -->
      <gc/>   <!-- run garbage collector in xmlBlaster JVM -->
      <exit/> <!-- exit xmlBlaster server -->

      <dump>heronDump.txt</dump>  <!-- dump internal state -->

      <numClients>4</numClients>
      <maxClients>10000</maxClients>
      <clientThresholdOverflow type='event'/>

      <clientList>joe,jack,averell,william</clientList>
      <client>
         <joe>
            <uptime>10050</uptime>
            <killClient/>


            <cbQueueNumMsgs>247</cbQueueMumMsgs> <!-- PtP queue -->
            <cbQueueMaxMsgs>1000</cbQueueMaxMsgs>

            <numSessions>2</numSessions>
            <maxSessions>10</maxSessions>
            <sessionThresholdOverflow type='event'/>

            <sessionList>ses3,ses17</sessionList>
            <ses3>
               <uptime>10050</uptime>
               <killSession/>

               <numPublished>4</numPublished>
               <numGets>7</numGets>
               <numUpdates>614050</numUpdates>

               <cbQueueNumMsgs>37</cbQueueNumMsgs>
               <cbQueueMaxMsgs>1000</cbQueueMaxMsgs>
               <cbQueueThreshold>80</cbQueueThreshold>  <!-- 80% -->
               <cbQueueThresholdOverflow type='event'/> <!-- a trap -->
               <clearCbQueue>DEAD_LETTER | DISCARD</clearCbQueue>
            </ses3>

            <ses17>
               ...
            </ses17>
         </joe>

         <jack>
            ...
         </jack>

      </client>

      <!-- System properties, xmlBlaster.properties and
           command line arguments -->
      <numSysprop>117</numSysprop>
      <syspropList>java.io.tmpdir,java.vm.version,...</syspropList>
      <sysprop>
         <java.io.tmpdir>/tmp</java.io.tmpdir>
         <java.vm.version>1.3.1</java.vm.version>
         <user.language>es</user.language>
         <Persistence.Path>/home/mom/data</Persistence.Path>
         <logFile>/var/log/xmlBlaster-heron.log</logFile>
         ...
      </sysprop>

      <!-- xmlBlaster messages -->
      <numTopics>7140</numTopics>
      <topicList>hello,radar.track,myMessage,...</topicList>
      <topic>
         <hello>
            <key oid='hello' contentMime='text/plain'/>
            <content>Hi world</content>
            <qos><persistent/></qos>
         </hello>

         <radar.track>
            ...
         </radar.track>
      </topic>
   </heron>

   <avalon>
      ...
   </avalon>
</node>
     ]]>
     </pre></td></tr></table>

      <p>
         As you have probably noticed, the tree syntax is a mixture of class names
         like <i>node</i> or <i>client</i> and instance names
         like <i>heron</i> or <i>joe</i>. This is conceptually a bit strange
         but it resulted in a simple view of xmlBlaster so we have chosen it like this.
      </p>
      <p>
         Lets have a look at the xmlBlaster cluster node <i>heron</i>. This is 
         an xmlBlaster server running somewhere on the net (<i>server.mycomp.com:3412</i>).<br />
         <i>heron</i> has its own attributes like <i>uptime</i> and <i>freeMem</i>
         which are leafs in the tree. In addition <i>heron</i> has tags which
         have children themselves, more exact the tags:
      </p>
      <ol>
        <li><i>client</i> Allows you to survey the logged in clients</li>
        <li><i>sysprop</i> Inspect the system properties, xmlBlaster.properties and command line arguments</li>
        <li><i>topic</i> Examine or manipulate the messages in xmlBlaster</li>
      </ol>
      <p>
         The <i>cb</i> in for example <i>cbQueueMaxMsg</i> is the abbreviation for <i>callback</i>.
      </p>

      <h3>
         What is allowed to do with these attributes?
      </h3>
      <table border="1">
         <tr>
            <th>Command</th>
            <th>Description</th>
            <th>MOM</th>
            <th>telnet</th>
            <th>SNMP</th>
            <th>JMX</th>
            <th>Impl</th>
         </tr>
         <tr>
            <td>GET</td>
            <td>We can read all attributes</td>
            <td>get()</td>
            <td>get</td>
            <td>get</td>
            <td>getAttributes()</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>SET</td>
            <td>We can write/change selective attributes</td>
            <td>publish()</td>
            <td>set</td>
            <td>set</td>
            <td>setAttributes()</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>SUBSCRIBE</td>
            <td>We can subscribe for change events on selective attributes</td>
            <td>subscribe()</td>
            <td>subscribe</td>
            <td>trap</td>
            <td>Notification</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>
         <tr>
            <td>POLL</td>
            <td>We can ask xmlBlaster to send us the current value of an attribute
               for example every 10 seconds (every specified amount of cycle time)</td>
            <td>subscribe()</td>
            <td>poll</td>
            <td>trap</td>
            <td>Notification</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>
         <tr>
            <td>SCHEDULE</td>
            <td>We can ask xmlBlaster to send us the current value of an attribute
              on fixed times, for example always at midnight</td>
            <td>subscribe()</td>
            <td>schedule</td>
            <td>trap</td>
            <td>Notification</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>
      </table>

      <p>The column <i>Impl</i> states if the feature is implemented.</p>
      <p>For JMX the DynamicMBean and Notification interface is used.</p>

      <h3>
         How can we query these attributes?
      </h3>
      <p>
         The following table gives an overview of the query syntax, it
         is URL conforming to allow direct queries from a browser
         and it is simple to allow typing it into a telnet terminal.
      </p>
      <table border="1">
         <tr>
            <th>Command</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>
         <tr>
            <td>/node/?numNodes</td>
            <td>Query the number of xmlBlaster cluster nodes (running xmlBlaster instances)</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>/node/heron/?freeMem</td>
            <td>Query the free memory in bytes</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>/node/heron/?runlevel=3</td>
            <td>Switch run level of heron to 3 (STANDBY)</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>/node/heron/?numClients</td>
            <td>How many clients are logged in to heron</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>/node/heron/client/joe/?sessionList</td>
            <td>Retrieve the public session IDs of joe (if joe is logged in three times, there will be three entries)</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>client/joe/?sessionList</td>
            <td>Same as above but relative addressed</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>client/joe/ses17/?uptime</td>
            <td>How long is session ID 17 logged in (in seconds)</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>client/*/?uptime</td>
            <td>The uptime of all users (in seconds). Wildcards are not implemented yet.</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>
         <tr>
            <td>client/joe/ses17/?cbQueueMaxMsgs=30000</td>
            <td>Change max. callback queue size of client joe with login session ID 17 to 30 thousand messages</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>/node/heron/sysprop/?java.vm.version</td>
            <td>Access the JDK version</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>sysprop/?user.language=es</td>
            <td>Change the language to spanish (relative addressed)</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>sysprop/?info=false</td>
            <td>Switch off logging of infos</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>sysprop/?trace[corba]=true</td>
            <td>Switch on trace mode for the corba layer</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>/node/heron/?numTopics</td>
            <td>How many messages are currently in heron</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>/node/heron/topic/?Hello</td>
            <td>Return the complete message (oid=Hello)</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         <tr>
            <td>/node/heron/topic/Hello/?content</td>
            <td>Access the message content of the message with key-oid="Hello"</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>
         <tr>
            <td>/node/heron/topic/Hello/?content=How are you</td>
            <td>Change the message content of the message with key-oid="Hello" to "How are you"</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>
         <tr>
            <td>/node/heron/topic/Hello/?key</td>
            <td>Return the complete key of this message</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>
         <tr>
            <td>/node/heron/topic/Hello/?key.contentMime</td>
            <td>Return the MIME type of this message</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>
         <tr>
            <td>client/joe/1/?killSession</td>
            <td>Kills the first session of joe (force logout)</td>
            <td><img src="ok.gif" border="0" alt="no" /></td>
         </tr>
      </table>
      <p>
      You can address an attribute with global scope <i>/node/heron/client/joe/?uptime</i>
      or with relative scope <i>client/joe/?uptime</i>. The relative query assumes
      the current xmlBlaster node you are connected to.
      </p>

      <h3>
      How does the return value look like?
      </h3>
      <p>
      Responses for telnet clients are described in the requirement <i>admin.telnet</i>.
      </p>
      <p>
      Mom clients receive messages with the value in the message content, see requirement <i>admin.messages</i>.
      </p>

      <h3>
      How can we use these commands?
      </h3>
      <p>
         Here are example invocations from different clients:
      </p>
      <table border="1">
         <tr>
            <th>Protocol</th>
            <th>Example</th>
            <th>Description</th>
            <th>Impl</th>
         </tr>

         <tr>
            <td>MoM clients</td>
            <td><pre>con.get(
"&lt;key oid='__cmd:?freeMem'/>",
"&lt;qos/>")</pre></td>
            <td>The token <i>__cmd:</i> marks the oid to be used as a command.<br />
            Here we have used relative addressing, absolute <i>__cmd:/node/heron/?freeMem</i>
            would be identical.<br /><br />
            For example try (in one line)
            <pre>java org.xmlBlaster.client.reader.GetMessage
-oid __cmd:?clientList</pre>
            Here we change the logging level of the corba plugin:
            <pre>
java org.xmlBlaster.client.feeder.PublishFile
-xmlKey "&lt;key oid='__cmd:sysprop/?trace[corba]=true'/>"</pre>
            Exit xmlBlaster with exit value 9:
            <pre>
java org.xmlBlaster.client.feeder.PublishFile
-xmlKey "&lt;key oid='__cmd:?exit=9'/>"</pre>
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      
         <tr>
            <td>telnet</td>
            <td><pre>
get ?runlevel
set /node/heron/?runlevel=3
set sysprop/?trace[corba]=true
            </pre></td>
            <td>With telnet you give the command <i>get</i> or <i>set</i> followed by the query (separated with a blank)
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>SNMP</td>
            <td><pre>snmpget -v 1 -c public
  192.168.1.4 
  1.3.6.1.4.1.11662.1.2.1.3</pre></td>
            <td>-c is community password, usually 'public', the IP is where the master agent runs
            <pre>
1.3.6.1.4.1.11662   xmlBlaster
1.3.6.1.4.1.11662.1 objects
1.3.6.1.4.1.11662.2 traps
1.3.6.1.4.1.11662.1.2.1.3 
 objects momTable momEntry uptime
            </pre>
            </td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>

         <tr>
            <td>JMX</td>
            <td><pre>getAttribute(
"/node/heron/?freeMem")</pre></td>
            <td>This is a method of DynamicMBean</td>
            <td><img src="no.gif" border="0" alt="no" /></td>
         </tr>

      </table>

      <p></p>

      <h3>
         How does authentication work?
      </h3>
      <ul>
        <li>For MoM clients the usual authentication applies.</li>
        <li>For telnet clients you have to use the <pre><i>connect &lt;loginName> &lt;password></i></pre> command on startup.</li>
        <li>For SNMP access the authentication is done in SNMP</li>
        <li>For JMX we have not investigated yet</li>
      </ul>

      <p></p>
   </description>


   <example lang="any" type="HTML">
      <p>
         Here is an example of a complete and valid URI, we should try
         not to break this syntax with our query language (NOTE: this is currently not implemented):
      </p>
      <table border="1"><tr><td><pre> <!-- <pre class="BORDER" (netscape does not like it) -->
http://joe:mypasswd@www.xmlBlaster.org:3412/myPath/?key.oid=MyMsg&amp;key.mime='text/plain'#myFragment

Protocol: http
Host:     www.xmlBlaster.org
Port:     3412
File:     /myPath/?key.oid=MyMessage
Path:     /myPath/
Query:    key.oid=MyMessage
Ref:      myFragment
UserInfo: joe:mypasswd
      </pre></td></tr></table>
      <p>
      The problem is that the <i>UserInfo</i> is cut away from the browser,
      we need to pass it somewhere in the path.
      </p>
   </example>

   <configuration where="server">
      <p>
      The available commands are marked as R=readable, W=writable, S=subscribable
      T=schedulable, P=pollable
      </p>
      <p>
      If you want to change a value, you need to use a <i>publish()</i> message,
      or with telnet you would use <i>set</i>, for SNMP you use a <i>set</i>
      command as well.
      </p>
      <table border="1">
         <tr>
            <th>Command</th>
            <th>Type</th>
            <th>Read/Write</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

         <tr>
            <td>client/joe/?uptime</td>
            <td>int</td>
            <td>R</td>
            <td>Get the number of seconds the user is logged in
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      
         <tr>
            <td>sysprop/?trace[auth]</td>
            <td>boolean</td>
            <td>R/W</td>
            <td>Monitor or change the <i>trace</i> log level, but
            only for authentication issues
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>TODO</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
         </tr>

      </table>
      <p>See the API links of I_AdminNode, I_AdminSubject, I_AdminSession below of the
      available core properties to monitor or configure</p>
   </configuration>

   <todo type="HTML">
      <ul>
        <li>Read/Write access with telnet and MoM clients on system properties, internal states
            and messages is implemented.</li>
        <li>SNMP (SnmpGateway.java) support is missing.</li>
        <li>JMX (JmxGateway.java) support is missing.</li>
        <li>A swing or browser based GUI interface for administration.</li>
        <li>Wildcard queries.</li>
        <li>XPath queries with <a href="http://jakarta.apache.org/commons/jxpath/" target="others">JXPath</a></li>
      </ul>
   </todo>

   <see type="API">org.xmlBlaster.engine.admin.I_AdminNode</see>
   <see type="API">org.xmlBlaster.engine.admin.I_AdminSubject</see>
   <see type="API">org.xmlBlaster.engine.admin.I_AdminSession</see>
   <see type="API">org.xmlBlaster.engine.admin.extern.TelnetGateway</see>
   <see type="REQ">admin</see>
   <see type="REQ">admin.telnet</see>
   <see type="REQ">admin.messages</see>
   <see type="REQ">engine.runlevel</see>

   <author>Heinrich.Goetzger@exploding-systems.de</author>
   <author>Michele.Laghi@swisscom.com</author>
   <author>xmlBlaster@marcelruff.info</author>
   <date>2002 06 12</date>
   <revision>$Revision: 1.34 $</revision>
   <testcase status="OPEN">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.classtest.CommandWrapperTest</test>
   </testcase>
</requirement>

