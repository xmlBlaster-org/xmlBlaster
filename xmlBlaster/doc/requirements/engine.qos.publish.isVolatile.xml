<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='engine.qos.publish.isVolatile' type='NEW' prio='LOW' status="CLOSED">
   <topic>XmlBlaster allows to mark messages as volatile</topic>
   <description>
      <p>
      Using the QOS flag <b>&lt;isVolatile/&gt;</b> allows to mark a published message
      as volatile. A volatile published message lives only until it is processed in the
      server and is erased immediately thereafter.
      </p>
      <p>
      A message <b>not marked volatile</b> will stay in memory until xmlBlaster shuts down or
      until it is erased explicitly (this is the default case).
      <br />
      If a message with the same <i>oid</i> is published it overwrites the previous one.
      </p>
   </description>
   
   <example lang="any">
      <![CDATA[
<qos>
   <isVolatile>false</isVolatile>
   <!-- Message remains transient in memory until shutdown -->
   <!-- Default is transient -->
</qos>
      ]]>
   </example>

   <example lang="Java">
      <![CDATA[
import org.xmlBlaster.client.qos.PublishQos;

Global glob = Global.instance();
...

PublishQos publishQos = new PublishQos(glob);

publishQos.setVolatile(true);

con.publish(new MsgUnit("<key oid='HelloWorld2'/>",
                            "Hello World".getBytes(),
                            publishQos.toXml()));

      ]]>
   </example>

   <see type="API">org.xmlBlaster.client.qos.PublishQos</see>
   <see type="API">org.xmlBlaster.client.key.PublishKey</see>
   <author>pra@mint.se</author>
   <author>xmlBlaster@marcelruff.info</author>
   <date>2001 02 22</date>
   <revision>$Revision: 1.7 $</revision>
   <testcase status="CLOSED">
      <name>-</name>
      <comment>-</comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestVolatile</test>
   </testcase>
</requirement>

