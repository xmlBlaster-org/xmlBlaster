<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">

<requirement id='util.recorder' type='NEW' prio='LOW' status="CLOSED">
   <topic>XmlBlaster provides a facility to record all message transfers with the possibility to play back this flow in slow/fast motion</topic>
   <description>
      The class InvocationRecorder can be plugged into a client or the server, to follow
      all CORBA/RMI/XmlRpc method invocations with exact timestamp. Every invocation is
      stored and may be later played back.
      <p>
      The recorder is activated when a Java client uses the fail save xmlBlaster access mode
      -> see XmlBlasterConnection.initFailSave()
      </p>

      Allows to kill the db-file during execution

      <p>
      Following error handling is possible if the queue overflows:
      </p>
      <ul>
         <li>ONOVERFLOW_EXCEPTION: This is the default behaviour, the recorder framewok throws an XmlBlasterExcption</li>
         <li>ONOVERFLOW_DISCARD: In this mode messages are destroyed if the queue is full</li>
         <li>ONOVERFLOW_DISCARDOLDEST: The oldest message from the queue is destroyed to have space for a new one</li>
      </ul>

      On pullback of messages it is possible to use a motion factor to allow 'slow motion'
      or 'fast motion' reply:
      <pre>
pullback(long startDate, long endDate,
         double motionFactor) throws XmlBlasterException
      </pre>

   </description>

   <configuration where="client">
      <p>
      Example how to configure the FileRecorder plugin in your xmlBlaster.properties file:
      </p>
      <pre>
RecorderPlugin[FileRecorder][1.0]=
  org.xmlBlaster.util.recorder.file.FileRecorder
      </pre>

      <p>
      These parameters allow to configure the message recorder behavior.
      </p>
      <table border="1">
         <tr>
            <th>Property</th>
            <th>Default / Example</th>
            <th>Description</th>
            <th>Implemented</th>
         </tr>

         <tr>
            <td>queue.maxMsg</td>
            <td>1000</td>
            <td>How many messages to tail back on client side if they can't be delivered to xmlBlaster.
                -1 sets it to unlimited.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>recorder.type</td>
            <td>FileRecorder</td>
            <td>The plugin type to use for tail back messages in fail save mode</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>recorder.version</td>
            <td>1.0</td>
            <td>The plugin version to use</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
      </table>
      <p>
      These settings apply only if you use the FileRecorder plugin:         
      </p>
      <table border="1">
         <tr>
            <td>recorder.path</td>
            <td>${user.home}/tmp</td>
            <td>Where to put the persistence file. Please give the path only, without the file name.</td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>recorder.destroyOld</td>
            <td>false</td>
            <td>If a file based plugin is configured you can configure to destroy
                old messages on client restart.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>
         
         <tr>
            <td>recorder.useSync</td>
            <td>false</td>
            <td>true: Sync the harddisk on any IO. This is not recommended as it slows down
                processing from ~5000msg/sec to ~90msg/sec.
                Defaults to false, which is save for application crashes.
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

         <tr>
            <td>recorder.mode</td>
            <td>"exception"</td>
            <td>What happens if the queue is full (onOverflow):<br />
              <i>exception</i> or <i>discard</i> or <i>discardOldest</i>
            </td>
            <td><img src="ok.gif" border="0" alt="yes" /></td>
         </tr>

      </table>
   </configuration>

   <see type="REQ">util.recorder.persistence</see>
   <see type="REQ">client.failsave</see>
   <see type="API">org.xmlBlaster.engine.helper.Constants</see>
   <see type="API">org.xmlBlaster.util.recorder.I_InvocationRecorder</see>
   <see type="API">org.xmlBlaster.util.recorder.ram.RamRecorder</see>
   <see type="API">org.xmlBlaster.util.recorder.file.FileRecorder</see>
   <see type="API">org.xmlBlaster.util.recorder.file.FileIO</see>
   <see type="API">org.xmlBlaster.client.protocol.XmlBlasterConnection</see>
   <author>ruff@swand.lake.de</author>
   <date>2000 02 24</date>
   <revision>$Revision: 1.17 $</revision>
   <testcase status="CLOSED">
      <name>ruff@swand.lake.de</name>
      <comment>
         The current approach has the following drawback:
          see util.recorder.returnvalues.xml
      </comment>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestFailSave</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestInvocationRecorder</test>
      <test tool="SUITE">org.xmlBlaster.test.qos.TestFailSaveAsync</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.FileIOTest</test>
      <test tool="SUITE">org.xmlBlaster.test.classtest.InvocationRecorderTest</test>
   </testcase>
</requirement>

