<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE requirement SYSTEM "requirement.dtd">


<requirement id='client.activex' type='NEW' prio='MEDIUM' status='CLOSED'>
   <topic>
      XmlBlaster provides access from C# and VisualBasic with ActiveX.
   </topic>
   <description>
   <h2>Overview</h2>
     <p>
     With the free ActiveX bridge from SUN (JDK 1..4.2 and 1.5) we can export
     the Java client library into an ActiveX control (Windows only). With this
     control easy access to xmlBlaster is possible from C# or Visual Basic .net
     </p>
     <p>
      With this control you can access xmlBlaster from C#
      or VisualBasic which calls a client side java bean
      which again connects to the xmlBlaster server.
      All invocations are done with Micheles xml scripting
      client, see
      <a href="http://www.xmlblaster.org/xmlBlaster/doc/requirements/client.script.html" target="others">client.script requirement</a>
      and
      <a href="http://java.sun.com/j2se/1.4.2/docs/guide/beans/axbridge/developerguide/index.html" target="others">ActiveX bridge howto</a>
      by calling <code>sendRequest()</code>.
     </p>
     <p>
     Alternatively you can use the methods like <code>connect()</code> or <code>subscribe()</code>
     directly.
     These methods have the advantage to return a ready parsed object to the ActiveX component,
     for example Visual Basic can directly call all methods of <code>SubscribeReturnQos</code>
     which is returned by <code>subscribe()</code>.
     You can lookup all supported methods in the Javadoc API of <code>XmlScriptAccess</code> bean.
     </p>

     <h2>Limitations</h2>
     <p>
      It seems to work only with the ActiveX bridge from JDK 1.5 or higher.
      JDK 1.4.2 failed on my Windows XP.
      Probably we need to create a ActiveX VisualBasic 6.0 proxy control
      which delegates the calls from VisualBasic .net for JDK 1.4.2
     </p>
     <p>
      If you compile the dll bridge with xmlBlaster/build.xml
      you need a MS Visual C++ installed otherwise the IDL compiler
      <code>midl.exe</code> is missing.
      In the runtime environment you don't need VC++.
     </p>
     
     <h2>Installation</h2>
     <p>
      First you need to create a dll and register it, theses steps are described
      in the above mentioned howto. We have added these steps into a new <code>ant</code> task
      called <code>activex</code>, the call below will generate everything and register
      the ActiveX bridge on the fly:
     </p>
<pre>
   build  -DJRE_HOME=C:\PROGRA~1\Java\j2re1.5.0  activex
</pre>
     <p>Please adjust the JRE_HOME setting to point to your Java runtime installation.
     </p>
     <p>
      Now you find all generated files under
     </p>
<pre>
   C:\PROGRA~1\Java\j2re1.5.0\activex
</pre>
     <p>
      and the control is registered in the registry under
     </p>
<pre>
   regedit -> HKEY_CLASSES_ROOT
           -> CLSID
           -> D824B185-AE3C-11D6-ABF5-00B0D07B8581
           -> XmlScriptAccess Bean Control
</pre>

     <h2>Demonstration clients</h2>

  <p>
  A functional C# demo client and a VisualBasic .net client you find
  in directory
  </p>
<pre>
xmlBlaster\demo\activex 
</pre>

  <p>Here are the steps to use the demonstration clients from Visual Studio:</p> 

<pre>
  Visual Studio:
    -> Solution Explorer
    -> References
    -> (right mouse): Add Reference
    -> COM -> XmlScriptAccess

  Task bar: Java Icon:
    -> Open Console
</pre>

  <p>Don't forget to start the server first:
  </p>
<pre>
    java -jar lib\xmlBlaster.jar
</pre>

   <h2>API usage</h2>
   <p>
   The Java bean <a href="http://www.xmlblaster.org/xmlBlaster/doc/api/org/xmlBlaster/client/activex/XmlScriptAccess.html" target="others">XmlScriptAccess</a> exports
   all needed functionality to activeX aware languages.
   All native data types are directly available from C#/VisualBasic, 
   xmlBlaster specific java objects returned by XmlScriptAccess methods
   are automatically available in C#/VisualBasic, so you simply use
   the returned objects as you would in java. Here is an example
   of the subscribe method declaration in Java (XmlSriptAccess bean)
   </p>
   <pre>
public SubscribeReturnQos subscribe(String xmlKey, String xmlQos)
                                    throws XmlBlasterException
   </pre>
   <p>In Visual Basic you use the returned java object like
   </p>
   <pre><![CDATA[
Try
   ...

   Dim subscribeReturnQos As Object

   subscribeReturnQos = xmlBlaster.subscribe("<key oid='HelloWorld3'/>", "<qos/>")
   
   ' Access examples:
   ' subscribeReturnQos.getSubcriptionId()
   ' subscribeReturnQos.getStateInfo()
   ' ...

   ...
Catch e As SystemException
   Console.WriteLine("Exception:" & e.ToString())
   ]]></pre>
   <p>You just lookup all methods of the returned
   java object in the Javadoc API and call the
   methods as you would do in Java
   </p>

   <h2>Callback usage</h2>
   <p>As events into ActiveX can't have a return value and can't throw
     an exception back to us we handle it here as a callback, for example
     Visual Basic needs to call <code>sendUpdateReturn()</code> or <code>sendUpdateException()</code> after
     processing a message received by <code>update()</code>.
     Our update thread blocks until one of those two methods is called, however
     the blocking times out after 10 minutes which is adjustable with
     the property <code>client/activex/responseWaitTime</code> given in milli seconds.
 </p>
 <p>
 The 'msg' received in the callback method is of type <code>UpdateEvent</code>, the usage
 is described in the 
 <a href="http://www.xmlblaster.org/xmlBlaster/doc/client-api/org/xmlBlaster/client/activex/UpdateEvent.html" target="API">
 UpdateEvent Javadoc</a>.
 </p>

   <h2>Workaround for ActiveX bridge bug for byte[]</h2>
   <p>
   The ActiveX bridge has problems to convert Java byte[] as described in
   <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4887461" target="others">bug_id=4887461</a>.
   </p>
   <p>
   Therefor we offer in the callback a method <tt>msg.getContentBase64()</tt> if you need
   to transfer binary data. If your content contains only strings (for example a xml string)
   you can use the convenience method <tt>msg.getContentStr()</tt>.
   </p>
   <p>
   Here is an example for the callback method <tt>update()</tt>,
   <tt>str</tt> and <tt>decoded</tt> contain the same result:
   </p>
   <pre><![CDATA[
Private Sub XmlScriptAccess_update(ByVal msg As Object) _
               Handles xmlBlaster.XmlScriptAccessSource_Event_update
   Try
      Dim str As String
      Dim len As Int32
      Dim encoded As String
      Dim decoded As Byte()

      str = msg.getContentStr()
      len = msg.getContentLength()
      encoded = msg.getContentBase64()
      decoded = Convert.FromBase64String(encoded)

      ...
   ]]></pre>

   </description>

   <example lang="Csharp" type="HTML">
      <h3><a NAME="example"></a>C# example</h3>
   <pre><style type="text/css">
<!--
              .LINE_NO {color: #000000; background: #ffffff}
              .Unknown {color: #ffffff; background: #ffffff}
              .NOTHING {color: #000000; background: #ffffff}
               .STRING {color: red; background: #ffffff}
              .COMMENT {color: #000000; background: #b1b1b1}
              .SYMBOL1 {color: #000000; background: #ffffff}
              .SYMBOL2 {color: #000000; background: #ffffff}
              .SYMBOL3 {color: #000000; background: #ffffff}
              .SYMBOL4 {color: #000000; background: #ffffff}
              .SYMBOL5 {color: #000000; background: #ffffff}
              .SYMBOL6 {color: #000000; background: #ffffff}
              .SYMBOL7 {color: #000000; background: #ffffff}
              .SYMBOL8 {color: #000000; background: #ffffff}
              .SYMBOL9 {color: #000000; background: #ffffff}
              .KEYWORD {color: green; background: #ffffff}
             .OPERATOR {color: #000000; background: #ffffff}
                .LABEL {color: #000000; background: #ffffff}
               .NUMBER {color: #ff005a; background: #ffffff}
        .CHAR_CONSTANT {color: #000000; background: #ffffff}
            .DIRECTIVE {color: #ff00ff; background: #ffffff}
              .NUMBER2 {color: #ff005a; background: #ffffff}
                 .TYPE {color: #4e4eff; background: #ffffff}
             .FUNCTION {color: #4e4eff; background: #ffffff}
              .COMMAND {color: #4e4eff; background: #ffffff}
               .OBJECT {color: #4e4eff; background: #ffffff}
             .CONSTANT {color: #4e4eff; background: #ffffff}
                .CLASS {color: #4e4eff; background: #ffffff}
             .INSTANCE {color: #4e4eff; background: #ffffff}
               .METHOD {color: #4e4eff; background: #ffffff}
            .ATTRIBUTE {color: #000000; background: #ffffff}
                .VALUE {color: #4e4eff; background: #ffffff}
-->
</style><font face="Terminal,10,Regular,1,Lucida Console,Fixed"/>
<span class="COMMENT">// HelloWorld.cs</span>
<span class="KEYWORD">using</span><span class="NOTHING"> System;</span>
<span class="KEYWORD">namespace</span><span class="NOTHING"> demo</span>
<span class="NOTHING">{</span>
<span class="NOTHING">   </span><span class="KEYWORD">class</span><span class="NOTHING"> XmlBlasterCSharp</span>
<span class="NOTHING">   {</span>
<span class="NOTHING">      </span><span class="OPERATOR">[</span><span class="NOTHING">STAThread</span><span class="OPERATOR">]</span>
<span class="NOTHING">      </span><span class="KEYWORD">static</span><span class="NOTHING"> </span><span class="KEYWORD">void</span><span class="NOTHING"> Main</span><span class="OPERATOR">(</span><span class="NOTHING">string</span><span class="OPERATOR">[]</span><span class="NOTHING"> args</span><span class="OPERATOR">)</span>
<span class="NOTHING">      {</span>
<span class="NOTHING">         </span><span class="COMMENT">// See registry: </span>
<span class="NOTHING">         </span><span class="COMMENT">//   regedit -&gt; HKEY_CLASSES_ROOT</span>
<span class="NOTHING">         </span><span class="COMMENT">//           -&gt; CLSID</span>
<span class="NOTHING">         </span><span class="COMMENT">//           -&gt; D824B185-AE3C-11D6-ABF5-00B0D07B8581</span>
<span class="NOTHING">         </span><span class="COMMENT">//           -&gt; XmlScriptAccess Bean Control</span>
<span class="NOTHING">         </span><span class="COMMENT">// org.xmlBlaster.client.activex.XmlScriptAccess</span>

<span class="NOTHING">         XmlScriptAccess.XmlScriptAccessClass xmlBlaster;</span>
<span class="NOTHING">         xmlBlaster </span><span class="OPERATOR">=</span><span class="NOTHING"> </span><span class="KEYWORD">new</span><span class="NOTHING"> XmlScriptAccess.XmlScriptAccessClass</span><span class="OPERATOR">()</span><span class="NOTHING">;</span>

<span class="NOTHING">         string</span><span class="OPERATOR">[]</span><span class="NOTHING"> argArr </span><span class="OPERATOR">=</span><span class="NOTHING"> { </span><span class="STRING">"-protocol"</span><span class="NOTHING">, </span><span class="STRING">"SOCKET"</span><span class="NOTHING"> };</span>
<span class="NOTHING">         xmlBlaster.initArgs</span><span class="OPERATOR">(</span><span class="NOTHING">argArr</span><span class="OPERATOR">)</span><span class="NOTHING">;</span>

<span class="NOTHING">         string request </span><span class="OPERATOR">=</span><span class="NOTHING"> </span><span class="STRING">"&lt;xmlBlaster&gt;"</span><span class="NOTHING"> </span><span class="OPERATOR">+</span>
<span class="NOTHING">                          </span><span class="STRING">"   &lt;connect/&gt;"</span><span class="NOTHING"> </span><span class="OPERATOR">+</span>
<span class="NOTHING">                          </span><span class="STRING">"   &lt;wait delay='1000' /&gt;"</span><span class="NOTHING"> </span><span class="OPERATOR">+</span>
<span class="NOTHING">                          </span><span class="STRING">"   &lt;publish&gt;"</span><span class="NOTHING"> </span><span class="OPERATOR">+</span>
<span class="NOTHING">                          </span><span class="STRING">"      &lt;key oid='test'&gt;&lt;airport name='london' /&gt;&lt;/key&gt;"</span><span class="NOTHING"> </span><span class="OPERATOR">+</span>
<span class="NOTHING">                          </span><span class="STRING">"      &lt;content&gt;This is a simple script test&lt;/content&gt;"</span><span class="NOTHING"> </span><span class="OPERATOR">+</span>
<span class="NOTHING">                          </span><span class="STRING">"      &lt;qos/&gt;"</span><span class="NOTHING"> </span><span class="OPERATOR">+</span>
<span class="NOTHING">                          </span><span class="STRING">"   &lt;/publish&gt;"</span><span class="NOTHING"> </span><span class="OPERATOR">+</span>
<span class="NOTHING">                          </span><span class="STRING">"&lt;/xmlBlaster&gt;"</span><span class="NOTHING">;</span>
<span class="NOTHING">         string response </span><span class="OPERATOR">=</span><span class="NOTHING"> xmlBlaster.sendRequest</span><span class="OPERATOR">(</span><span class="NOTHING">request</span><span class="OPERATOR">)</span><span class="NOTHING">;</span>
<span class="NOTHING">         Console.WriteLine</span><span class="OPERATOR">(</span><span class="STRING">"Got response from xmlBlaster: "</span><span class="NOTHING"> </span><span class="OPERATOR">+</span><span class="NOTHING"> response</span><span class="OPERATOR">)</span><span class="NOTHING">;</span>
<span class="NOTHING">      }</span>
<span class="NOTHING">   }</span>
<span class="NOTHING">}</span>
   </pre>
   </example>

   <example lang="VisualBasic" type="HTML">
      <h3><a NAME="example"></a>VisualBasic.net example</h3>
   <pre><style type="text/css">
<!--
              .LINE_NO {color: #000000; background: #ffffff}
              .Unknown {color: #ffffff; background: #ffffff}
              .NOTHING {color: #000000; background: #ffffff}
               .STRING {color: red; background: #ffffff}
              .COMMENT {color: #000000; background: #b1b1b1}
              .SYMBOL1 {color: #000000; background: #ffffff}
              .SYMBOL2 {color: #000000; background: #ffffff}
              .SYMBOL3 {color: #000000; background: #ffffff}
              .SYMBOL4 {color: #000000; background: #ffffff}
              .SYMBOL5 {color: #000000; background: #ffffff}
              .SYMBOL6 {color: #000000; background: #ffffff}
              .SYMBOL7 {color: #000000; background: #ffffff}
              .SYMBOL8 {color: #000000; background: #ffffff}
              .SYMBOL9 {color: #000000; background: #ffffff}
              .KEYWORD {color: green; background: #ffffff}
             .OPERATOR {color: #000000; background: #ffffff}
                .LABEL {color: #000000; background: #ffffff}
               .NUMBER {color: #ff005a; background: #ffffff}
        .CHAR_CONSTANT {color: #000000; background: #ffffff}
            .DIRECTIVE {color: #ff00ff; background: #ffffff}
              .NUMBER2 {color: #ff005a; background: #ffffff}
                 .TYPE {color: #4e4eff; background: #ffffff}
             .FUNCTION {color: #4e4eff; background: #ffffff}
              .COMMAND {color: #4e4eff; background: #ffffff}
               .OBJECT {color: #4e4eff; background: #ffffff}
             .CONSTANT {color: #4e4eff; background: #ffffff}
                .CLASS {color: #4e4eff; background: #ffffff}
             .INSTANCE {color: #4e4eff; background: #ffffff}
               .METHOD {color: #4e4eff; background: #ffffff}
            .ATTRIBUTE {color: #000000; background: #ffffff}
                .VALUE {color: #4e4eff; background: #ffffff}
-->
</style><font face="Terminal,10,Regular,1,Lucida Console,Fixed"/>
<span class="COMMENT">' Simple HelloWorld example how to access xmlBlaster</span>
<span class="COMMENT">' We connect to xmlBlaster and query the free memory of the server</span>
<span class="COMMENT">' @author Marcel Ruff</span>
<span class="NOTHING">Module HelloWorld</span>
<span class="NOTHING">    </span><span class="KEYWORD">Sub</span><span class="NOTHING"> Main()</span>
<span class="NOTHING">        </span><span class="KEYWORD">Dim</span><span class="NOTHING"> request, response </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">String</span>
<span class="NOTHING">        </span><span class="KEYWORD">Dim</span><span class="NOTHING"> xmlBlaster </span><span class="KEYWORD">As</span><span class="NOTHING"> XmlScriptAccess.XmlScriptAccessClass</span>

<span class="NOTHING">        xmlBlaster = </span><span class="KEYWORD">New</span><span class="NOTHING"> XmlScriptAccess.XmlScriptAccessClass</span>

<span class="NOTHING">        </span><span class="COMMENT">' Configure using the SOCKET protocol</span>
<span class="NOTHING">        </span><span class="KEYWORD">Dim</span><span class="NOTHING"> argArr(</span><span class="NUMBER">1</span><span class="NOTHING">) </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">String</span>
<span class="NOTHING">        argArr(</span><span class="NUMBER">0</span><span class="NOTHING">) = </span><span class="STRING">"-protocol"</span>
<span class="NOTHING">        argArr(</span><span class="NUMBER">1</span><span class="NOTHING">) = </span><span class="STRING">"SOCKET"</span>
<span class="NOTHING">        xmlBlaster.initArgs(argArr)</span>

<span class="NOTHING">        </span><span class="COMMENT">' Connect to the server</span>
<span class="NOTHING">        response = xmlBlaster.sendRequest(</span><span class="STRING">"&lt;xmlBlaster&gt;&lt;connect/&gt;&lt;/xmlBlaster&gt;"</span><span class="NOTHING">)</span>

<span class="NOTHING">        </span><span class="COMMENT">' Query the free memory</span>
<span class="NOTHING">        request = </span><span class="STRING">"&lt;xmlBlaster&gt;&lt;get&gt;&lt;key oid='__cmd:?freeMem'/&gt;&lt;/get&gt;&lt;/xmlBlaster&gt;"</span>
<span class="NOTHING">        response = xmlBlaster.sendRequest(request)</span>
<span class="NOTHING">        Console.WriteLine(</span><span class="STRING">"Got response:"</span><span class="NOTHING"> &amp; response)</span>

<span class="NOTHING">        </span><span class="COMMENT">' Leave the server</span>
<span class="NOTHING">        response = xmlBlaster.sendRequest(</span><span class="STRING">"&lt;xmlBlaster&gt;&lt;disconnect/&gt;&lt;/xmlBlaster&gt;"</span><span class="NOTHING">)</span>
<span class="NOTHING">    </span><span class="KEYWORD">End</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>
<span class="KEYWORD">End</span><span class="NOTHING"> Module</span>
   </pre>
   </example>

   <example lang="VisualBasic" type="HTML">
      <h3><a NAME="example"></a>VisualBasic.net example with asynchronous callbacks</h3>
   <pre><style type="text/css">
<!--
              .LINE_NO {color: #000000; background: #ffffff}
              .Unknown {color: #ffffff; background: #ffffff}
              .NOTHING {color: #000000; background: #ffffff}
               .STRING {color: red; background: #ffffff}
              .COMMENT {color: #000000; background: #b1b1b1}
              .SYMBOL1 {color: #000000; background: #ffffff}
              .SYMBOL2 {color: #000000; background: #ffffff}
              .SYMBOL3 {color: #000000; background: #ffffff}
              .SYMBOL4 {color: #000000; background: #ffffff}
              .SYMBOL5 {color: #000000; background: #ffffff}
              .SYMBOL6 {color: #000000; background: #ffffff}
              .SYMBOL7 {color: #000000; background: #ffffff}
              .SYMBOL8 {color: #000000; background: #ffffff}
              .SYMBOL9 {color: #000000; background: #ffffff}
              .KEYWORD {color: green; background: #ffffff}
             .OPERATOR {color: #000000; background: #ffffff}
                .LABEL {color: #000000; background: #ffffff}
               .NUMBER {color: #ff005a; background: #ffffff}
        .CHAR_CONSTANT {color: #000000; background: #ffffff}
            .DIRECTIVE {color: #ff00ff; background: #ffffff}
              .NUMBER2 {color: #ff005a; background: #ffffff}
                 .TYPE {color: #4e4eff; background: #ffffff}
             .FUNCTION {color: #4e4eff; background: #ffffff}
              .COMMAND {color: #4e4eff; background: #ffffff}
               .OBJECT {color: #4e4eff; background: #ffffff}
             .CONSTANT {color: #4e4eff; background: #ffffff}
                .CLASS {color: #4e4eff; background: #ffffff}
             .INSTANCE {color: #4e4eff; background: #ffffff}
               .METHOD {color: #4e4eff; background: #ffffff}
            .ATTRIBUTE {color: #000000; background: #ffffff}
                .VALUE {color: #4e4eff; background: #ffffff}
--></style><font face="Terminal,10,Regular,1,Lucida Console,Fixed" />
<span class="COMMENT">'------------------------------------------------------------------------------</span>
<span class="COMMENT">' XmlBlaster access with asynchronous callbacks from Visual Basic .net</span>
<span class="COMMENT">' Calls are routed over ActiveX encapsulating a Java client bean which</span>
<span class="COMMENT">' connects to xmlBlaster</span>
<span class="COMMENT">' @file xmlBlaster/demo/activex/VisualBasic3.vb</span>
<span class="COMMENT">' @author Marcel Ruff, xmlBlaster@marcelruff.info (2004-03-17)</span>
<span class="COMMENT">' @see http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.activex.html</span>
<span class="COMMENT">' @see org.xmlBlaster.client.activex.XmlScriptAccess</span>
<span class="COMMENT">'------------------------------------------------------------------------------</span>
<span class="NOTHING">Imports </span><span class="KEYWORD">System</span>

<span class="NOTHING">Module HelloWorld3</span>
<span class="NOTHING">   </span><span class="KEYWORD">Private</span><span class="NOTHING"> WithEvents xmlBlaster </span><span class="KEYWORD">As</span><span class="NOTHING"> XmlScriptAccess.XmlScriptAccessClass</span>
<span class="NOTHING">   </span><span class="KEYWORD">Dim</span><span class="NOTHING"> ascii </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">System</span><span class="NOTHING">.</span><span class="KEYWORD">Text</span><span class="NOTHING">.ASCIIEncoding = </span><span class="KEYWORD">New</span><span class="NOTHING"> </span><span class="KEYWORD">System</span><span class="NOTHING">.</span><span class="KEYWORD">Text</span><span class="NOTHING">.ASCIIEncoding</span>

<span class="NOTHING">   </span><span class="KEYWORD">Sub</span><span class="NOTHING"> Main()</span>
<span class="NOTHING">      </span><span class="KEYWORD">Call</span><span class="NOTHING"> HelloWorld3()</span>
<span class="NOTHING">   </span><span class="KEYWORD">End</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>

<span class="NOTHING">   </span><span class="COMMENT">'---------------------------------------------------------------------------</span>
<span class="NOTHING">   </span><span class="COMMENT">' This method is called asynchronously from java delivering a message. </span>
<span class="NOTHING">   </span><span class="COMMENT">' As events from java into ActiveX can't deliver a return value</span>
<span class="NOTHING">   </span><span class="COMMENT">' or an exception back we need to call either</span>
<span class="NOTHING">   </span><span class="COMMENT">'    setUpdateReturn()        -&gt; passes a return value to the server</span>
<span class="NOTHING">   </span><span class="COMMENT">' or</span>
<span class="NOTHING">   </span><span class="COMMENT">'    setUpdateException()     -&gt; throws an XmlBlasterException</span>
<span class="NOTHING">   </span><span class="COMMENT">' If you forget this the update thread of the java bean will block forever</span>
<span class="NOTHING">   </span><span class="COMMENT">' @param msg See</span>
<span class="NOTHING">   </span><span class="COMMENT">' http://www.xmlblaster.org/xmlBlaster/doc/client-api/org/xmlBlaster/client/activex/UpdateEvent.html</span>
<span class="NOTHING">   </span><span class="COMMENT">'---------------------------------------------------------------------------</span>
<span class="NOTHING">   </span><span class="KEYWORD">Private</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span><span class="NOTHING"> XmlScriptAccess_update(</span><span class="KEYWORD">ByVal</span><span class="NOTHING"> msg </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">Object</span><span class="NOTHING">) _</span>
<span class="NOTHING">               Handles xmlBlaster.XmlScriptAccessSource_Event_update</span>
<span class="NOTHING">      Try</span>
<span class="NOTHING">         </span><span class="KEYWORD">Dim</span><span class="NOTHING"> age </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">String</span>
<span class="NOTHING">         age = msg.getQos().getClientProperty(</span><span class="STRING">"myAge"</span><span class="NOTHING">).getStringValue()</span>
<span class="NOTHING">         Console.WriteLine(</span><span class="STRING">"SUCCESS: Update arrived: "</span><span class="NOTHING"> &amp; msg.getCbSessionId() &amp; _</span>
<span class="NOTHING">                 </span><span class="STRING">", oid="</span><span class="NOTHING"> &amp; msg.getKey().getOid() &amp; _</span>
<span class="NOTHING">                 </span><span class="STRING">", content="</span><span class="NOTHING"> &amp; msg.getContentStr() &amp; _</span>
<span class="NOTHING">                 </span><span class="STRING">", myAge="</span><span class="NOTHING"> &amp; age)</span>
<span class="NOTHING">         xmlBlaster.setUpdateReturn(</span><span class="STRING">"&lt;qos&gt;&lt;state id='OK'/&gt;&lt;/qos&gt;"</span><span class="NOTHING">)</span>
<span class="NOTHING">      Catch e </span><span class="KEYWORD">As</span><span class="NOTHING"> SystemException</span>
<span class="NOTHING">         Console.WriteLine(</span><span class="STRING">"Exception in update:"</span><span class="NOTHING"> &amp; e.ToString())</span>
<span class="NOTHING">         xmlBlaster.setUpdateException(</span><span class="STRING">"user.update.internalError"</span><span class="NOTHING">, e.ToString())</span>
<span class="NOTHING">      </span><span class="KEYWORD">End</span><span class="NOTHING"> Try</span>
<span class="NOTHING">   </span><span class="KEYWORD">End</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>

<span class="NOTHING">   </span><span class="COMMENT">'---------------------------------------------------------------------------</span>
<span class="NOTHING">   </span><span class="COMMENT">' Connect to xmlBlaster and try all possible methods</span>
<span class="NOTHING">   </span><span class="COMMENT">'---------------------------------------------------------------------------</span>
<span class="NOTHING">   </span><span class="KEYWORD">Sub</span><span class="NOTHING"> HelloWorld3()</span>
<span class="NOTHING">      </span><span class="KEYWORD">Dim</span><span class="NOTHING"> key, qos </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">String</span>

<span class="NOTHING">      xmlBlaster = </span><span class="KEYWORD">New</span><span class="NOTHING"> XmlScriptAccess.XmlScriptAccessClass</span>

<span class="NOTHING">      </span><span class="KEYWORD">Dim</span><span class="NOTHING"> prop </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">Object</span><span class="NOTHING"> = xmlBlaster.createPropertiesInstance()</span>
<span class="NOTHING">      prop.setProperty(</span><span class="STRING">"protocol"</span><span class="NOTHING">, </span><span class="STRING">"SOCKET"</span><span class="NOTHING">)</span>
<span class="NOTHING">      prop.setProperty(</span><span class="STRING">"trace"</span><span class="NOTHING">, </span><span class="STRING">"false"</span><span class="NOTHING">)</span>
<span class="NOTHING">      xmlBlaster.initialize(prop)</span>

<span class="NOTHING">      Try</span>
<span class="NOTHING">         </span><span class="COMMENT">' Connect to the server</span>
<span class="NOTHING">         qos = </span><span class="STRING">"&lt;qos&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">               </span><span class="STRING">"  &lt;securityService type='htpasswd' version='1.0'&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">               </span><span class="STRING">"   &lt;![CDATA["</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">               </span><span class="STRING">"   &lt;user&gt;HelloWorld3&lt;/user&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">               </span><span class="STRING">"   &lt;passwd&gt;secret&lt;/passwd&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">               </span><span class="STRING">"   ]]&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">               </span><span class="STRING">"  &lt;/securityService&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">               </span><span class="STRING">"&lt;/qos&gt;"</span>
<span class="NOTHING">         </span><span class="KEYWORD">Dim</span><span class="NOTHING"> connectReturnQos </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">Object</span>
<span class="NOTHING">         connectReturnQos = xmlBlaster.connect(qos)</span>
<span class="NOTHING">         Console.WriteLine(</span><span class="STRING">"Connected to xmlBlaster, sessionId="</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">                           connectReturnQos.getSecretSessionId())</span>

<span class="NOTHING">         </span><span class="COMMENT">' Publish a message</span>
<span class="NOTHING">         key = </span><span class="STRING">"&lt;key oid='HelloWorld3' contentMime='text/xml'&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">               </span><span class="STRING">"  &lt;org.xmlBlaster&gt;&lt;demo/&gt;&lt;/org.xmlBlaster&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">               </span><span class="STRING">"&lt;/key&gt;"</span>
<span class="NOTHING">         </span><span class="KEYWORD">Dim</span><span class="NOTHING"> content </span><span class="KEYWORD">As</span><span class="NOTHING"> Byte() = ascii.GetBytes(</span><span class="STRING">"Hi"</span><span class="NOTHING">)</span>
<span class="NOTHING">         qos = </span><span class="STRING">"&lt;qos&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">               </span><span class="STRING">"&lt;clientProperty name='myAge' type='int'&gt;18&lt;/clientProperty&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">               </span><span class="STRING">"&lt;/qos&gt;"</span>
<span class="NOTHING">         </span><span class="KEYWORD">Dim</span><span class="NOTHING"> publishReturnQos </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">Object</span>
<span class="NOTHING">         publishReturnQos = xmlBlaster.publishBlob(key, content, qos)</span>
<span class="NOTHING">         Console.WriteLine(</span><span class="STRING">"Published message id="</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">                       publishReturnQos.getRcvTimestamp().toXml(</span><span class="STRING">""</span><span class="NOTHING">, </span><span class="KEYWORD">True</span><span class="NOTHING">))</span>

<span class="NOTHING">         </span><span class="COMMENT">' Get synchronous the above message</span>
<span class="NOTHING">         </span><span class="KEYWORD">Dim</span><span class="NOTHING"> getMsgArr </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">Object</span><span class="NOTHING">()</span>
<span class="NOTHING">         getMsgArr = xmlBlaster.</span><span class="KEYWORD">get</span><span class="NOTHING">(</span><span class="STRING">"&lt;key oid='HelloWorld3'/&gt;"</span><span class="NOTHING">, </span><span class="STRING">"&lt;qos/&gt;"</span><span class="NOTHING">)</span>
<span class="NOTHING">         </span><span class="KEYWORD">Dim</span><span class="NOTHING"> msg </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">Object</span>
<span class="NOTHING">         </span><span class="KEYWORD">For</span><span class="NOTHING"> Each msg In getMsgArr</span>
<span class="NOTHING">            Console.WriteLine(</span><span class="STRING">"Get returned:"</span><span class="NOTHING"> &amp; msg.toXml())</span>
<span class="NOTHING">         </span><span class="KEYWORD">Next</span>

<span class="NOTHING">         </span><span class="COMMENT">' Subscribe</span>
<span class="NOTHING">         </span><span class="KEYWORD">Dim</span><span class="NOTHING"> subscribeReturnQos </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">Object</span>
<span class="NOTHING">         subscribeReturnQos = xmlBlaster.subscribe(</span><span class="STRING">"&lt;key oid='HelloWorld3'/&gt;"</span><span class="NOTHING">, </span><span class="STRING">"&lt;qos/&gt;"</span><span class="NOTHING">)</span>
<span class="NOTHING">         Console.WriteLine(</span><span class="STRING">"Got subscribe response:"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">                           subscribeReturnQos.getSubscriptionId())</span>

<span class="NOTHING">         </span><span class="COMMENT">' Give control to the main loop to receive the update event</span>
<span class="NOTHING">         </span><span class="KEYWORD">System</span><span class="NOTHING">.Windows.</span><span class="KEYWORD">Forms</span><span class="NOTHING">.Application.</span><span class="KEYWORD">DoEvents</span><span class="NOTHING">()</span>

<span class="NOTHING">         </span><span class="COMMENT">' Publish again, message arrives asynchronously in</span>
<span class="NOTHING">         </span><span class="COMMENT">' Sub XmlScriptAccess_update() (see above)</span>
<span class="NOTHING">         publishReturnQos = xmlBlaster.publishStr(key, </span><span class="STRING">"Ho"</span><span class="NOTHING">, qos)</span>
<span class="NOTHING">         Console.WriteLine(</span><span class="STRING">"Got publish response:"</span><span class="NOTHING"> &amp; publishReturnQos.toXml())</span>

<span class="NOTHING">         </span><span class="COMMENT">' Give control to the main loop to receive the update event</span>
<span class="NOTHING">         </span><span class="KEYWORD">System</span><span class="NOTHING">.Windows.</span><span class="KEYWORD">Forms</span><span class="NOTHING">.Application.</span><span class="KEYWORD">DoEvents</span><span class="NOTHING">()</span>

<span class="NOTHING">         </span><span class="COMMENT">' UnSubscribe</span>
<span class="NOTHING">         </span><span class="KEYWORD">Dim</span><span class="NOTHING"> k </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">String</span><span class="NOTHING"> = </span><span class="STRING">"&lt;key oid='"</span><span class="NOTHING"> &amp; subscribeReturnQos.getSubscriptionId() &amp; </span><span class="STRING">"'/&gt;"</span>
<span class="NOTHING">         xmlBlaster.unSubscribe(k, </span><span class="STRING">"&lt;qos/&gt;"</span><span class="NOTHING">)</span>

<span class="NOTHING">         </span><span class="COMMENT">' Destroy the topic "HelloWorld3"</span>
<span class="NOTHING">         xmlBlaster.</span><span class="KEYWORD">erase</span><span class="NOTHING">(</span><span class="STRING">"&lt;key oid='HelloWorld3'/&gt;"</span><span class="NOTHING">, </span><span class="STRING">"&lt;qos/&gt;"</span><span class="NOTHING">)</span>

<span class="NOTHING">         </span><span class="COMMENT">' Leave the server, cleanup resources</span>
<span class="NOTHING">         xmlBlaster.disconnect(</span><span class="STRING">"&lt;qos/&gt;"</span><span class="NOTHING">)</span>

<span class="NOTHING">         </span><span class="COMMENT">' Pass control to eventLoop ...</span>
<span class="NOTHING">         </span><span class="KEYWORD">MsgBox</span><span class="NOTHING">(</span><span class="STRING">"Click me to finish ..."</span><span class="NOTHING">)</span>

<span class="NOTHING">      Catch e </span><span class="KEYWORD">As</span><span class="NOTHING"> SystemException</span>
<span class="NOTHING">         Console.WriteLine(</span><span class="STRING">"Exception:"</span><span class="NOTHING"> &amp; e.ToString())</span>
<span class="NOTHING">      </span><span class="KEYWORD">End</span><span class="NOTHING"> Try</span>
<span class="NOTHING">   </span><span class="KEYWORD">End</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>
<span class="KEYWORD">End</span><span class="NOTHING"> Module</span>

   </pre>
   </example>

   <example lang="VisualBasic" type="HTML">
      <h3><a NAME="example"></a>VisualBasic 6 example</h3>
      <p>Note: The synchronous invocations like <code>connect</code> or
      <code>publish</code> work fine. The asynchronous callbacks
      into the function <code>XmlScriptAccess_update</code> don't arrive,
      the reason is not tracked down. We can see that the Activex Java bean
      pushes the message into the ActiveX layer, probably the VB function
      name used (<code>XmlScriptAccess_update()</code>) is not correct?
      Note that the VisualBasic.net example works fine with exactly the same
      ActiveX component
      </p>
   <pre><style type="text/css"><!--
              .LINE_NO {color: #000000; background: #ffffff}
              .Unknown {color: #ffffff; background: #ffffff}
              .NOTHING {color: #000000; background: #ffffff}
               .STRING {color: red; background: #ffffff}
              .COMMENT {color: #000000; background: #b1b1b1}
              .SYMBOL1 {color: #000000; background: #ffffff}
              .SYMBOL2 {color: #000000; background: #ffffff}
              .SYMBOL3 {color: #000000; background: #ffffff}
              .SYMBOL4 {color: #000000; background: #ffffff}
              .SYMBOL5 {color: #000000; background: #ffffff}
              .SYMBOL6 {color: #000000; background: #ffffff}
              .SYMBOL7 {color: #000000; background: #ffffff}
              .SYMBOL8 {color: #000000; background: #ffffff}
              .SYMBOL9 {color: #000000; background: #ffffff}
              .KEYWORD {color: green; background: #ffffff}
             .OPERATOR {color: #000000; background: #ffffff}
                .LABEL {color: #000000; background: #ffffff}
               .NUMBER {color: #ff005a; background: #ffffff}
        .CHAR_CONSTANT {color: #000000; background: #ffffff}
            .DIRECTIVE {color: #ff00ff; background: #ffffff}
              .NUMBER2 {color: #ff005a; background: #ffffff}
                 .TYPE {color: #4e4eff; background: #ffffff}
             .FUNCTION {color: #4e4eff; background: #ffffff}
              .COMMAND {color: #4e4eff; background: #ffffff}
               .OBJECT {color: #4e4eff; background: #ffffff}
             .CONSTANT {color: #4e4eff; background: #ffffff}
                .CLASS {color: #4e4eff; background: #ffffff}
             .INSTANCE {color: #4e4eff; background: #ffffff}
               .METHOD {color: #4e4eff; background: #ffffff}
            .ATTRIBUTE {color: #000000; background: #ffffff}
                .VALUE {color: #4e4eff; background: #ffffff}
-->
</style>
<font face="Terminal,10,Regular,1,Lucida Console,Fixed"/>
<span class="COMMENT">'---------------------------------------------------------------------------</span>
<span class="COMMENT">' This method is called asynchronously from java delivering a message.</span>
<span class="COMMENT">' As events from java into ActiveX can't deliver a return value</span>
<span class="COMMENT">' or an exception back we need to call either</span>
<span class="COMMENT">'    setUpdateReturn()        -&gt; passes a return value to the server</span>
<span class="COMMENT">' or</span>
<span class="COMMENT">'    setUpdateException()     -&gt; throws an XmlBlasterException</span>
<span class="COMMENT">' If you forget this the update thread of the java bean will block forever</span>
<span class="COMMENT">'---------------------------------------------------------------------------</span>
<span class="KEYWORD">Public</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span><span class="NOTHING"> XmlScriptAccess_update(</span><span class="KEYWORD">ByVal</span><span class="NOTHING"> msg </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">Object</span><span class="NOTHING">)</span>
<span class="NOTHING">   </span><span class="KEYWORD">On</span><span class="NOTHING"> </span><span class="KEYWORD">Error</span><span class="NOTHING"> </span><span class="KEYWORD">GoTo</span><span class="NOTHING"> UpdateErrorHandler</span>
<span class="NOTHING">      </span><span class="KEYWORD">Dim</span><span class="NOTHING"> age </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">String</span>
<span class="NOTHING">      age = msg.getQos().getClientProperty(</span><span class="STRING">"myAge"</span><span class="NOTHING">).getStringValue()</span>
<span class="NOTHING">      </span><span class="KEYWORD">log</span><span class="NOTHING"> (</span><span class="STRING">"SUCCESS: Update arrived: "</span><span class="NOTHING"> &amp; msg.getCbSessionId() &amp; _</span>
<span class="NOTHING">              </span><span class="STRING">", oid="</span><span class="NOTHING"> &amp; msg.getKey().getOid() &amp; _</span>
<span class="NOTHING">              </span><span class="STRING">", content="</span><span class="NOTHING"> &amp; msg.getContentStr() &amp; _</span>
<span class="NOTHING">              </span><span class="STRING">", myAge="</span><span class="NOTHING"> &amp; age)</span>
<span class="NOTHING">      </span><span class="KEYWORD">MsgBox</span><span class="NOTHING"> (</span><span class="STRING">"Success, message arrived:"</span><span class="NOTHING"> &amp; </span><span class="KEYWORD">Str</span><span class="NOTHING">)</span>
<span class="NOTHING">      xmlBlaster.setUpdateReturn (</span><span class="STRING">"&lt;qos&gt;&lt;state id='OK'/&gt;&lt;/qos&gt;"</span><span class="NOTHING">)</span>
<span class="NOTHING">   </span><span class="KEYWORD">Exit</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>

<span class="NOTHING">UpdateErrorHandler:</span>
<span class="NOTHING">   </span><span class="KEYWORD">log</span><span class="NOTHING"> (</span><span class="KEYWORD">Err</span><span class="NOTHING">.Number &amp; </span><span class="STRING">": "</span><span class="NOTHING"> &amp; </span><span class="KEYWORD">Err</span><span class="NOTHING">.Description)</span>
<span class="NOTHING">   xmlBlaster.setUpdateException </span><span class="STRING">"user.update.internalError"</span><span class="NOTHING">, </span><span class="KEYWORD">Err</span><span class="NOTHING">.Description</span>
<span class="NOTHING">   </span><span class="KEYWORD">Exit</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>
<span class="KEYWORD">End</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>

<span class="COMMENT">'---------------------------------------------------------------------------</span>
<span class="COMMENT">' Connect to xmlBlaster and try all possible methods</span>
<span class="COMMENT">'---------------------------------------------------------------------------</span>
<span class="KEYWORD">Private</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span><span class="NOTHING"> xmlBlasterDemo()</span>
<span class="NOTHING">   </span><span class="KEYWORD">On</span><span class="NOTHING"> </span><span class="KEYWORD">Error</span><span class="NOTHING"> </span><span class="KEYWORD">GoTo</span><span class="NOTHING"> ErrorHandler</span>
<span class="NOTHING">      </span><span class="KEYWORD">Set</span><span class="NOTHING"> xmlBlaster = CreateObject(</span><span class="STRING">"XmlScriptAccess.Bean"</span><span class="NOTHING">)</span>
<span class="NOTHING">      </span>
<span class="NOTHING">      </span><span class="KEYWORD">Set</span><span class="NOTHING"> prop = xmlBlaster.createPropertiesInstance()</span>
<span class="NOTHING">      </span><span class="KEYWORD">Rem</span><span class="NOTHING"> CallByName(prop, </span><span class="STRING">"setProperty"</span><span class="NOTHING">, vbLet, </span><span class="STRING">"protocol"</span><span class="NOTHING">,</span><span class="STRING">"SOCKET"</span><span class="NOTHING">)</span>
<span class="NOTHING">      </span><span class="KEYWORD">Rem</span><span class="NOTHING"> prop.setProperty(</span><span class="STRING">"protocol"</span><span class="NOTHING">, </span><span class="STRING">"SOCKET"</span><span class="NOTHING">)</span>
<span class="NOTHING">      </span><span class="KEYWORD">Rem</span><span class="NOTHING"> prop.setProperty(</span><span class="STRING">"trace"</span><span class="NOTHING">, </span><span class="STRING">"false"</span><span class="NOTHING">)</span>
<span class="NOTHING">      xmlBlaster.Initialize (prop)</span>
<span class="NOTHING">      </span>
<span class="NOTHING">      </span><span class="KEYWORD">Dim</span><span class="NOTHING"> argArr(</span><span class="NUMBER">3</span><span class="NOTHING">) </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">String</span>
<span class="NOTHING">      argArr(</span><span class="NUMBER">0</span><span class="NOTHING">) = </span><span class="STRING">"-protocol"</span>
<span class="NOTHING">      argArr(</span><span class="NUMBER">1</span><span class="NOTHING">) = </span><span class="STRING">"SOCKET"</span>
<span class="NOTHING">      argArr(</span><span class="NUMBER">2</span><span class="NOTHING">) = </span><span class="STRING">"-trace"</span>
<span class="NOTHING">      argArr(</span><span class="NUMBER">3</span><span class="NOTHING">) = </span><span class="STRING">"false"</span>
<span class="NOTHING">      xmlBlaster.initArgs (argArr)</span>
<span class="NOTHING">      </span>
<span class="NOTHING">      </span><span class="COMMENT">' Connect to the server</span>
<span class="NOTHING">      qos = </span><span class="STRING">"&lt;qos&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">            </span><span class="STRING">"  &lt;securityService type='htpasswd' version='1.0'&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">            </span><span class="STRING">"   &lt;user&gt;HelloWorld3&lt;/user&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">            </span><span class="STRING">"   &lt;passwd&gt;secret&lt;/passwd&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">            </span><span class="STRING">"  &lt;/securityService&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">            </span><span class="STRING">"&lt;/qos&gt;"</span>
<span class="NOTHING">      </span><span class="KEYWORD">Dim</span><span class="NOTHING"> connectReturnQos </span><span class="KEYWORD">As</span><span class="NOTHING"> </span><span class="KEYWORD">Object</span>
<span class="NOTHING">      </span>
<span class="NOTHING">      </span><span class="KEYWORD">Set</span><span class="NOTHING"> connectReturnQos = xmlBlaster.Connect(qos)</span>
<span class="NOTHING">            </span>
<span class="NOTHING">      sessionId = connectReturnQos.getSecretSessionId()</span>
<span class="NOTHING">      </span><span class="KEYWORD">log</span><span class="NOTHING"> (</span><span class="STRING">"Connected to xmlBlaster, sessionId="</span><span class="NOTHING"> &amp; sessionId)</span>
<span class="NOTHING">      </span>
<span class="NOTHING">      </span><span class="COMMENT">' Publish a message</span>
<span class="NOTHING">      Key = </span><span class="STRING">"&lt;key oid='HelloWorld3' contentMime='text/xml'&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">            </span><span class="STRING">"  &lt;org.xmlBlaster&gt;&lt;demo/&gt;&lt;/org.xmlBlaster&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">            </span><span class="STRING">"&lt;/key&gt;"</span>
<span class="NOTHING">      contentStr = </span><span class="STRING">"Hi"</span>
<span class="NOTHING">      qos = </span><span class="STRING">"&lt;qos&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">            </span><span class="STRING">"&lt;clientProperty name='myAge' type='int'&gt;18&lt;/clientProperty&gt;"</span><span class="NOTHING"> &amp; _</span>
<span class="NOTHING">            </span><span class="STRING">"&lt;/qos&gt;"</span>
<span class="NOTHING">      </span><span class="KEYWORD">Set</span><span class="NOTHING"> publishReturnQos = xmlBlaster.publishStr(Key, contentStr, qos)</span>
<span class="NOTHING">      </span><span class="KEYWORD">log</span><span class="NOTHING"> (</span><span class="STRING">"Published message id="</span><span class="NOTHING"> &amp; publishReturnQos.getRcvTimestamp().toXml(</span><span class="STRING">""</span><span class="NOTHING">, </span><span class="KEYWORD">True</span><span class="NOTHING">))</span>
<span class="NOTHING">   </span>
<span class="NOTHING">      </span><span class="COMMENT">' Get synchronous the above message</span>
<span class="NOTHING">      getMsgArr = xmlBlaster.</span><span class="KEYWORD">get</span><span class="NOTHING">(</span><span class="STRING">"&lt;key oid='HelloWorld3'/&gt;"</span><span class="NOTHING">, </span><span class="STRING">"&lt;qos/&gt;"</span><span class="NOTHING">)</span>
<span class="NOTHING">      </span><span class="KEYWORD">For</span><span class="NOTHING"> Each msg In getMsgArr</span>
<span class="NOTHING">         </span><span class="KEYWORD">log</span><span class="NOTHING"> (</span><span class="STRING">"Get returned:"</span><span class="NOTHING"> &amp; msg.toXml())</span>
<span class="NOTHING">      </span><span class="KEYWORD">Next</span>
<span class="NOTHING">   </span>
<span class="NOTHING">      </span><span class="COMMENT">' Subscribe</span>
<span class="NOTHING">      </span><span class="KEYWORD">Set</span><span class="NOTHING"> subscribeReturnQos = xmlBlaster.subscribe(</span><span class="STRING">"&lt;key oid='HelloWorld3'/&gt;"</span><span class="NOTHING">, </span><span class="STRING">"&lt;qos/&gt;"</span><span class="NOTHING">)</span>
<span class="NOTHING">      </span><span class="KEYWORD">log</span><span class="NOTHING"> (</span><span class="STRING">"Got subscribe response:"</span><span class="NOTHING"> &amp; subscribeReturnQos.getSubscriptionId())</span>
<span class="NOTHING">   </span>
<span class="NOTHING">      </span><span class="KEYWORD">Call</span><span class="NOTHING"> loopEvents</span>
<span class="NOTHING">      </span>
<span class="NOTHING">      </span><span class="COMMENT">' Publish again, message arrives asynchronously in</span>
<span class="NOTHING">      </span><span class="COMMENT">' Sub XmlScriptAccess_update() (see above)</span>
<span class="NOTHING">      </span><span class="KEYWORD">Set</span><span class="NOTHING"> publishReturnQos = xmlBlaster.publishStr(Key, </span><span class="STRING">"Ho"</span><span class="NOTHING">, qos)</span>
<span class="NOTHING">      </span><span class="KEYWORD">log</span><span class="NOTHING"> (</span><span class="STRING">"Got publish response:"</span><span class="NOTHING"> &amp; publishReturnQos.toXml())</span>
<span class="NOTHING">      </span>
<span class="NOTHING">      </span><span class="KEYWORD">Call</span><span class="NOTHING"> loopEvents</span>
<span class="NOTHING">            </span>
<span class="NOTHING">      </span><span class="COMMENT">' UnSubscribe</span>
<span class="NOTHING">      k = </span><span class="STRING">"&lt;key oid='"</span><span class="NOTHING"> &amp; subscribeReturnQos.getSubscriptionId() &amp; </span><span class="STRING">"'/&gt;"</span>
<span class="NOTHING">      unSubscribeReturnQos = xmlBlaster.unSubscribe(k, </span><span class="STRING">"&lt;qos/&gt;"</span><span class="NOTHING">)</span>
<span class="NOTHING">   </span>
<span class="NOTHING">      </span><span class="COMMENT">' Destroy the topic "HelloWorld3"</span>
<span class="NOTHING">      eraseReturnQos = xmlBlaster.</span><span class="KEYWORD">erase</span><span class="NOTHING">(</span><span class="STRING">"&lt;key oid='HelloWorld3'/&gt;"</span><span class="NOTHING">, </span><span class="STRING">"&lt;qos/&gt;"</span><span class="NOTHING">)</span>
<span class="NOTHING">   </span>
<span class="NOTHING">      </span>
<span class="NOTHING">      </span><span class="KEYWORD">Call</span><span class="NOTHING"> loopEvents</span>
<span class="NOTHING">      </span>
<span class="NOTHING">      xmlBlaster.disconnect (</span><span class="STRING">"&lt;qos/&gt;"</span><span class="NOTHING">)</span>
<span class="NOTHING">      </span><span class="KEYWORD">Set</span><span class="NOTHING"> xmlBlaster = </span><span class="KEYWORD">Nothing</span>
<span class="NOTHING">      </span><span class="KEYWORD">Rem</span><span class="NOTHING"> </span><span class="KEYWORD">MsgBox</span><span class="NOTHING"> (</span><span class="STRING">"Hit a key to continue ..."</span><span class="NOTHING">)</span>
<span class="NOTHING">   </span><span class="KEYWORD">Exit</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>
<span class="NOTHING">   </span>
<span class="NOTHING">ErrorHandler:</span>
<span class="NOTHING">   </span><span class="KEYWORD">log</span><span class="NOTHING"> (</span><span class="KEYWORD">Err</span><span class="NOTHING">.Number &amp; </span><span class="STRING">": "</span><span class="NOTHING"> &amp; </span><span class="KEYWORD">Err</span><span class="NOTHING">.Description)</span>
<span class="NOTHING">   </span><span class="KEYWORD">MsgBox</span><span class="NOTHING"> (</span><span class="STRING">"Error, giving up: "</span><span class="NOTHING"> &amp; </span><span class="KEYWORD">Err</span><span class="NOTHING">.Description)</span>
<span class="NOTHING">   </span><span class="KEYWORD">Exit</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>
<span class="KEYWORD">End</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>

<span class="KEYWORD">Private</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span><span class="NOTHING"> loopEvents()</span>
<span class="NOTHING">   </span><span class="COMMENT">' Give control to the main loop to receive the update event</span>
<span class="NOTHING">   </span><span class="COMMENT">'System.Windows.Forms.Application.DoEvents()</span>
<span class="NOTHING">   </span><span class="KEYWORD">MsgBox</span><span class="NOTHING"> (</span><span class="STRING">"Hit a key to continue ..."</span><span class="NOTHING">)</span>
<span class="KEYWORD">End</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>

<span class="COMMENT">' Log into the GUI text area</span>
<span class="KEYWORD">Private</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span><span class="NOTHING"> </span><span class="KEYWORD">log</span><span class="NOTHING">(</span><span class="KEYWORD">text</span><span class="NOTHING">)</span>
<span class="NOTHING">   Logger.</span><span class="KEYWORD">text</span><span class="NOTHING"> = Logger.</span><span class="KEYWORD">text</span><span class="NOTHING"> &amp; vbCrLf &amp; </span><span class="KEYWORD">text</span>
<span class="KEYWORD">End</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>

<span class="COMMENT">' GUI button to start the demo</span>
<span class="KEYWORD">Private</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span><span class="NOTHING"> Start_Click()</span>
<span class="NOTHING">    </span><span class="KEYWORD">Call</span><span class="NOTHING"> xmlBlasterDemo</span>
<span class="KEYWORD">End</span><span class="NOTHING"> </span><span class="KEYWORD">Sub</span>
   </pre>
   </example>


   <configuration where="client">
   <p>
   Set JRE_HOME to point to your java runtime environment, for example<br />
   <code>set JRE_HOME=C:\PROGRA~1\Java\j2re1.5.0</code>
   </p>
   </configuration>

   <todo where="client" type="HTML">
      <ol>
        <li>For VisualBasic.net we provide a complete example with asynchronous callbacks.
          For C# and VisualBasic6 the callback example is missing.</li>

        <li>Fix HSQLDB (JDBC database) driver loading problem.
          There seems to be a CLASSLOADER problem which we need to solve.<br/>
          A work around is to copy <code>xmlBlaster\lib\hsqldb.jar</code> to <code>%JRE_HOME%\lib\ext</code>.
          Do the same with any other JDBC driver you want to use.</li>

        <li>Fix CORBA driver loading problem.
          There seems to be a CLASSLOADER problem which we need to solve.<br/>
          Copying <code>xmlBlaster\lib\jacorb\*.jar</code> to <code>%JRE_HOME%\lib\ext</code>
          doe not seem to solve the problem entirely, so please stick to the SOCKET
          protocol until this issue is resolved.</li>

        <li>How to handle java 'byte[]' in Visual Basic?
        </li>

        <li>
         The ActiveX control has all features of an ordinary xmlBlaster Java client.
         As we have not found a way yet to send <i>arbitrary</i> events back to
         C#/VB the <code>subscribe()</code> variant with a specific callback implementation
         is not supported. Any idea concerning this problem is welcome, please mail it
         to xmlBlaster@marcelruff.info
        </li>
     </ol>
   </todo>

   <see type="REQ">interface</see>
   <see type="REQ">client.script</see>
   <see type="API">org.xmlBlaster.client.activex.XmlScriptAccess</see>
   <see type="INTERNET" label="Sun ActiveX bridge guide">http://java.sun.com/j2se/1.4.2/docs/guide/beans/axbridge/developerguide/index.html</see>
   <see type="INTERNET">http://forum.java.sun.com/forum.jsp?forum=40</see>
   <see type="INTERNET" label="VisualBasic 6 hints">http://www-106.ibm.com/developerworks/websphere/WASInfoCenter/infocenter/wasee_content/xjb/concepts/cxjmdinv.htm</see>
   <see type="INTERNET" label="Bean implementation">http://www.xmlblaster.org/xmlBlaster/src/java/org/xmlBlaster/client/activex</see>
   <see type="INTERNET">http://www.xmlblaster.org/xmlBlaster/demo/activex</see>

   <author><a href="mailto:xmlblaster@marcelruff.info">Marcel Ruff</a></author>
   <date>2004 03 12</date>
   <revision>$Revision: 1.18 $</revision>
</requirement>

