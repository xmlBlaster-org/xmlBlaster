#This file was created by <ruff> Thu Jan 20 11:12:52 2000
#LyX 0.12 (C) 1995-1998 Matthias Ettrich and the LyX Team
\lyxformat 2.15
\textclass book
\language default
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize 12
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle headings

\layout Title

The xmlBlaster 1.0 Programming Guide
\layout Author

by Marcel Ruff and Manuel Kron
\begin_float footnote 
\layout Standard

ruff@swand.lake.de, manuel.kron@gmx.net
\end_float 
\layout Standard


\begin_inset LatexCommand \tableofcontents

\end_inset 


\layout Chapter

Introduction
\layout Section

Status of this document
\layout Standard

This document gives a introduction to programming distributed applications
 with xmlBlaster, a LGPL message orientate middleware.
 
\layout Section

Application area of xmlBlaster
\layout Standard

XmlBlaster is a pure Java message orientated middleware (MOM) to support
 instantaneous delivery of message objects via IIOP, TCP, SSL or HTTP.
 XmlBlaster offers a very generic solution for wide range of applications,
 such e-commerce, Client/Server applications, enterprise applications integratio
n, groupware applications, and information distribution among embedded systems.
\layout Chapter

Installing xmlBlaster
\layout Standard

In this chapter we explain how to obtain and install the xmlBlaster and
 give an overview of the package content.
\layout Section

Obtaining xmlBlaster
\layout Standard

The xmlBlaster can be obtained as agzipped tar-achive or as a zp-archive
 from the xmlBlaster home page at 
\family typewriter 
http://www.xmlBlaster.org 
\newline 

\family default 
 
\layout Section

Installation
\layout Standard

To install xmlBlaster, just gunzip/bunzip2/unzip it and untar the archive
 somewhere (we usually do it in our home directory).
 This would be the result directory 
\family typewriter 
$HOME/xmlBlaster
\family default 
.
 
\layout Standard

Read the 
\family typewriter 
$HOME/xmlBlaster/INSTALL
\family default 
 file how to set up your CLASSPATH variable.
\layout Subsection

Make and Makefiles
\layout Standard

Only GNU make is supported.
\layout Subsection

Configuration
\layout Standard

There are two configuration files which you should know.
\layout Standard

1.
 The xmlBlaster configuration file is called xmlBlaster.properties.
 Copy manually the 
\family typewriter 
$HOME/xmlBlaster/xmlBlaster.properties.template 
\family default 
file to 
\family typewriter 
$HOME/xmlBlaster.properties.

\family default 
 If you use the delivered 
\family typewriter 
.bashrc
\family default 
 file you don't need to copy it, it is done automatically.
\layout Standard

These are the settings you should be aware of.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 3 0 0 -1 -1 -1 -1
1 1 0 0
1 1 0 0
0 1 0 0
0 1 0 0
8 1 0 "" ""
8 1 1 "" ""
8 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""

Konfiguration Parameter
\newline 
Default
\newline 
Description
\newline 
Persistence.Driver
\newline 
org.xmlBlaster.engine.persistence.FileDriver
\newline 
The driver which handles the persistency of the messages.
\newline 
Persistence.Path
\newline 
$user.home/tmp
\newline 
The directory into which the messages are stored
\newline 
Persistence.LazyRecovery
\newline 
false
\newline 
Only false is supported in the moment
\layout Standard

The variables 
\layout Standard


\protected_separator 

\protected_separator 
 $user.dir
\layout Standard


\protected_separator 

\protected_separator 
 $user.home
\layout Standard

may be used and will be replaced to the current directory and the users
 home directory respectively.
\layout Standard


\protected_separator 

\layout Standard

You may set $XMLBLASTER_HOME in your JVM environment 
\layout Standard


\protected_separator 

\protected_separator 
 java -DXMLBLASTER_HOME=/home/joe/xmlBlaster ...
\layout Standard

or int this file
\layout Standard


\protected_separator 

\protected_separator 
 $XMLBLASTER_HOME=$user.home/xmlBlaster
\layout Standard

and then use it as a variable in this file.
\layout Standard

2.
 The configuration file delivered for the CORBA library JacORB is called
 
\family typewriter 
.jacorb_properties
\family default 
.
 Copy manually the 
\family typewriter 
$HOME/xmlBlaster/jacorb_properties.templateINSTALL 
\family default 
file to 
\family typewriter 
$HOME/.jacorb_properties.

\family default 
 If you use the delivered 
\family typewriter 
.bashrc
\family default 
 file you don't need to copy it, it is done automatically.
 Edit 
\family typewriter 
.jacorb_properties
\family default 
 if necessary.
 If you need help about this, check the JacORB documentation.
\layout Chapter

Architecture
\layout Section

xmlBlaster development overview
\layout Section

IDL specifications
\layout LyX-Code

module serverIdl 
\layout LyX-Code

{ 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
typedef string XmlType; 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
typedef sequence<XmlType> XmlTypeArr;
\layout LyX-Code


\protected_separator 
 
\protected_separator 
typedef sequence<octet> ContentType; 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
typedef sequence<string> StringArr; 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
typedef string ExceptionIdType;
\newline 

\layout LyX-Code


\protected_separator 
 
\protected_separator 
struct MessageUnit 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
{ 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 XmlType xmlKey; 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 ContentType content; 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
}; 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
typedef sequence<MessageUnit> MessageUnitArr;
\layout LyX-Code

}; 
\family roman 
\emph on 
// org::xmlBlaster::serverIdl
\emph default 

\newline 

\newline 

\layout LyX-Code

module clientIdl 
\layout LyX-Code

{ 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
interface BlasterCallback 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
{ 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 oneway void update(in serverIdl::MessageUnitArr messageUnitArr, 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 

\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 in serverIdl::XmlTypeArr qosArr)
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
raises(serverIdl::XmlBlasterException); 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
};
\layout LyX-Code

}; 
\family roman 
\emph on 
// org::xmlBlaster::clientIdl
\emph default 

\newline 
k
\layout LyX-Code

module serverIdl 
\layout LyX-Code

{ 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
exception XmlBlasterException 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
{ 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 ExceptionIdType id; 
\family roman 
\emph on 
// unique error code: "Modulname.ReasonID"
\emph default 
 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 string reason; 
\protected_separator 
 
\protected_separator 
 
\protected_separator 

\family roman 
\emph on 
// in english
\family default 
\emph default 
 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
};
\layout LyX-Code


\protected_separator 
 
\protected_separator 
void subscribe(in XmlType xmlKey, in XmlType qos) 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 raises(XmlBlasterException);
\layout LyX-Code


\protected_separator 
 
\protected_separator 
MessageUnitArr get(in XmlType xmlKey, in XmlType qos) 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 raises(XmlBlasterException);
\layout LyX-Code


\protected_separator 
 
\protected_separator 
void unSubscribe(in XmlType xmlKey, in XmlType qos) 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 raises(XmlBlasterException);
\layout LyX-Code


\protected_separator 
 
\protected_separator 
StringArr publish(in MessageUnitArr messageUnitArr, 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
in XmlTypeArr qosArr) 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 raises(XmlBlasterException);
\layout LyX-Code


\protected_separator 
 
\protected_separator 
long erase(in XmlType xmlKey, in XmlType qos) 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 raises(XmlBlasterException); 
\layout LyX-Code


\protected_separator 
};
\layout LyX-Code

}; 
\family roman 
\emph on 
// org::xmlBlaster::serverIdl
\newline 

\newline 

\layout LyX-Code

module authenticateIdl 
\layout LyX-Code

{ 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
interface AuthServer 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
{ 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 serverIdl::Server login(in string loginName, in string passwd, 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 in clientIdl::BlasterCallback cb, 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 in serverIdl::XmlType qosClient) 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 

\protected_separator 
raises (serverIdl::XmlBlasterException);
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 void logout(in serverIdl::Server xmlBlaster) 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 
\protected_separator 
 raises (serverIdl::XmlBlasterException); 
\layout LyX-Code


\protected_separator 
 
\protected_separator 
};
\layout LyX-Code

}; 
\family roman 
// org::xmlBlaster::AuthenticateIdl
\layout Subsection

xmlBlaster Exceptions
\layout Section

DTD specifications
\layout Subsection

DTD for xmlBlaster server
\layout Subsection

DTD for xmlBlaster client
\layout Section

Message protocol
\layout Subsection

Message content
\layout Subsection

Message key
\layout Subsubsection

What is a message key?
\layout Standard

The message key, is used for two purposes: 
\layout Standard

- It holds the unique message identifyier, called 'oid' = object idenitfyier
\layout Standard

- It contains user supplied meta data about the message
\layout Standard

To allow this, the syntax of the message key is XML based, so we will call
 it XmlKey form now on.
\layout Subsubsection

How to query the internal state of xmlBlaster
\layout Standard

There are 3 internal state variable which you may query: 
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 2 0 0 -1 -1 -1 -1
1 1 0 0
1 1 0 0
0 1 0 0
0 1 0 0
2 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""

Variable name
\newline 
Comment
\newline 
__sys__TotalMem
\newline 
The current allocated amount of RAM in the virtual machine [byte]
\newline 
__sys__FreeMem
\newline 
The currently not used amount of memory [byte]
\newline 
__sys__UsedMem
\newline 
Effective used memory [byte]
\layout Standard

But how do you access these values?
\layout Standard

Believe it or not, you access them as a MessageUnit, using the get() method.
 Use the variable name as the identifier for your XmlKey.
\layout Standard

If you are an experienced RDBMS user (like Orcale), you will notice the
 similarity.
 The internal state of Oracle is stored in 'sys' database tables as well.
\layout Standard

The following example shows you how to query the currently used memory:
\layout LyX-Code

<key oid='__sys__UsedMem' queryType='EXACT'>
\layout LyX-Code

</key>
\layout Standard

Sending this XmlKey with the get() method to the xmlBlaster, returns a message
 with the currently used memory of the xmlBlaster server.
 In the message content you find the number of bytes consumed.
\layout Standard

Please note that subscribing to these internal state variables is not supported,
 you will only receive the actual value but no following updates.
 This is for performance reasons, the internal state values are calculated
 on demand.
\layout Standard

If you want to study some real code which queries the internal state of
 xmlBlaster, please have a look into 
\layout LyX-Code

xmlBlaster/testsuite/org/xmlBlaster/RamTest.java
\layout Subsection

Message QoS
\layout Section

QoS (Quality of Service)
\layout Standard

A distinctive feature of xmlBlaster is its Quality-of-Service (QoS).
 A business-application provides the server any objects, that server with
 a QoS administrated.
\layout Subsection

Authentication
\layout Subsection

MIME-Type
\layout Subsection

Time to Live
\layout Subsection

Priority
\layout Subsection

Timestamp
\layout Subsection

Expiration
\layout Section

Publish/Subscribe Model
\layout Section

XmlBlaster Application Server Facilities
\layout Subsection

The Persitence Layer
\layout Standard

To store messages from xmlBlaster torestore them again after a new startup
 of the server there is a lightweight interface, called I_PersitenceDriver,
 available.
\layout Standard

You may supply your own persistence layer, which for example stores the
 messages in a database like Oracle or PostgreSQL, or where ever you like.
 
\layout Standard

Currently we only provide very simple file based store, called FileDriver,
 which may be used as a reference implementation to your own persitency.
\layout Standard

Writing an own persitence layer is very easy:
\layout Standard

1.
 Implement the I_PersitenceDriver interface (look into FileDriver how you
 could do it).
\layout Standard

2.
 Register the driver with xmlBlaster through the xmlBlaster.properties file
 with the Persistence.* variables.
\layout Standard

Note that this interface is very likely to change in one of the next xmlBlaster
 releases, since it is to simple to support caching.
\layout Chapter

Writing a client application for xmlBlaster
\layout Section

Message
\layout Subsection

Subscribe
\layout Subsection

Publish
\layout Section

Java-Client
\layout Standard

One of the first steps is to login to xmlBlaster.
\layout Standard

The following code snippet does it:
\layout LyX-Code

public class HelloWorld extends implements I_Callback {
\layout LyX-Code


\protected_separator 
 ...
\layout LyX-Code


\protected_separator 
 try {
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 CorbaConnection connection = new CorbaConnection(); // Find orb
\layout LyX-Code


\protected_separator 

\protected_separator 
 
\protected_separator 
String loginName = "Tim";
\layout LyX-Code


\protected_separator 
 
\protected_separator 
 String passwd = "secret";
\layout LyX-Code


\protected_separator 

\protected_separator 

\protected_separator 
 String qos = "<qos></qos>";
\layout LyX-Code


\protected_separator 

\protected_separator 

\protected_separator 
 Server xmlBlaster = senderConnection.login(loginName, passwd, qos, this);
\layout LyX-Code


\protected_separator 
 }
\layout LyX-Code


\protected_separator 
 catch (Exception e) {
\layout LyX-Code


\protected_separator 

\protected_separator 

\protected_separator 
 e.printStackTrace();
\layout LyX-Code


\protected_separator 
 }
\layout LyX-Code


\protected_separator 
 xmlBlaster.publish(...); // Do your work
\layout Standard

There is nothing exciting about this, you supply a login name, a password,
 and some empty quality of service (qos).
\layout Standard

The 'this' argument in the login method is for the asynchronous Callback
 method.
 We will discuss this soon.
\layout Standard

If you do a second login without a logout, xmlBlaster will do a auto-logout
 before the login proceeds.
 So all subscriptions etc.
 from the previous logins are destroyed.
\layout Section

Perl-Client
\layout Chapter

XmlBlaster service
\layout Section

Running JacOrb
\layout Section

Running xmlBlaster
\layout Section

Running a Client application
\layout Chapter

Writing a server plugin for xmlBlaster
\layout Chapter

XmlBlaster utilities
\layout Chapter

Feedback, LGPL, Standards, Web links
\layout Section

Feedback
\layout Section

LGPL and Limitations
\layout Section

Standards
\layout Section

Web links
\layout Bibliography
\bibitem {1}

[Orf98] Robert Orfali, Client/Server Programming with JAVA and CORBA .
 Second Edition.
 Wiley, 1998
\the_end
