- Performance: 
  * Implementing of  XtOmQuery for oid access (minimal data in DOM tree)
    This is nonsense, the minimal DOM tree couldn't be parsed by XPath
  * Normalizing the DOM tree

- Integrate with Java API for XML Parsing 1.0 
  http://developer.java.sun.com/developer/earlyAccess/xml/   

- Testing implementation of unsubscribe() XPath oid

- Testing implementation of erase() with XPath

- Automatic disconnect detection of a client e.g. [ Closing connection to 192.168.1.1:1424 ]
  this is important if the client didn't logout

- dtd support 
  Necessary to use XPATH DTD-ID:
  An element node may have a unique identifier (ID).
  This is the value of the attribute that is declared in the DTD as type ID

- Add an AuthenticateException type

- QoS support is still missing

- xmlBlaster.idl
  * rename AuthServer to AuthenticationService
  * rename Server to xmlBlaster

- Authentication (login etc)
  Plugin possibility for existing user management systems
  * JNDI with XML based LDAP access http://www.dsml.org/about.html

- Authorization (ACL access control lists)
  Our ACL should be XML based, so its possible to
  query who may do what through XPath on Client meta informations which
  are XML based, simple approach:
  
  [User]  [Action]  [Data]
  Martin  read      marketing-paper
  Joe     write     homepage-layout

  User:   may be any user based information like role, group, property etc. (XPath query)
  Action: read, write, erase, change
  Data:   Any data in xmlBlaster (XPath query)

- Reliability of update() callback
  The update() method is declared oneway, so the xmlBlaster
  can't guarantee if the update is delivered.

  Perhaps there should be 2 update variants,
  one blocking (no keyword oneway) and one none-blocking (with keyword oneway).
  
  In the blocking mode, xmlBlaster would need a timeout
  or an extra thread per update client, so that not
  one client can block the whole update sequence.

- Transaction support, based on:
  Java(tm) Transaction Service (JTS) 1.0 Specification.    
  JTS specifies the implementation of a Transaction Manager which 
  supports the Java(tm) Transaction API (JTA) 1.0 Specification.
  http://java.sun.com/products/jts/


Clients
-------
- Perl (ORB for Perl www.lunatech.com/research/corba/cope)
  Multihtreaded support still missing

- C++ (mico)
  OK runs fine

- Tcl/Tk

- Java

- Phyton
  Python language: http://www.python.org
  Python CORBA:    http://www.dstc.edu.au/Fnorb
  Python XML:      http://www.python.org/sigs/xml-sig/
  Python XSL:      http://fourthought.com/4Suite/4XSLT  ftp://FourThought.com/pub/4Suite/4XSLT/

(all free CORBA implementation .......)

proprietary Protocol plugins (not CORBA)
----------------------------------------
- Protocol plugins (www.webdav.com)
- state less protocols (email, http, webDav)

