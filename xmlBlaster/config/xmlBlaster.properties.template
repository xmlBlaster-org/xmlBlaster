#------------------------------------------------------------------------------
# Name:      xmlBlaster.properties
# Project:   xmlBlaster.org
# Copyright: xmlBlaster.org, see xmlBlaster-LICENSE file
# Comment:   Properties for xmlBlaster MOM server, copy into you home directory
#
#All JVM system variables are supported, e.g.
#   ${user.dir}
#   ${user.home}
#could be used and would be replaced to the current directory and
#the users home directory respectively.
#
#Further you can reference all variables in this file or from command line
#with ${...}
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Authentication and Authorization
Security.Server.Plugin[simple][1.0]=org.xmlBlaster.authentication.plugins.simple.Manager
Security.Server.Plugin[gui][1.0]=org.xmlBlaster.authentication.plugins.demo.Manager
Security.Server.Plugin[a2Blaster][1.0]=org.xmlBlaster.authentication.plugins.a2Blaster.Manager
Security.Server.Plugin[ldap][1.0]=org.xmlBlaster.authentication.plugins.ldap.Manager
Security.Server.Plugin[htpasswd][1.0]=org.xmlBlaster.authentication.plugins.htpasswd.Manager

# NONE switches off security checks in passwd file:
Security.Server.Plugin.htpasswd.secretfile=NONE
#Security.Server.Plugin.htpasswd.secretfile=${user.home}${file.separator}xmlBlaster.htpasswd

# Force on client side a specified plugin (as default)
# Only if you access xmlBlaster with java clients and
# use our helper class XmlBlasterConnection.java
# With "gui,1.0" will the server popup a GUI panel
#Security.Client.DefaultPlugin=htpasswd,1.0
Security.Client.Plugin[gui][1.0]=org.xmlBlaster.authentication.plugins.demo.ClientPlugin
Security.Client.Plugin[simple][1.0]=org.xmlBlaster.authentication.plugins.simple.ClientPlugin
Security.Client.Plugin[a2Blaster][1.0]=org.xmlBlaster.authentication.plugins.a2Blaster.ClientPlugin
Security.Client.Plugin[ldap][1.0]=org.xmlBlaster.authentication.plugins.ldap.ClientPlugin
Security.Client.Plugin[htpasswd][1.0]=org.xmlBlaster.authentication.plugins.htpasswd.ClientPlugin
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# List of all xmlBlaster access protocol drivers (I_Driver and I_Callback implementations)
# <protocol-type>:<driverClass>,<protocol-type>:<driverClass>,...
# For supported protocol types see xmlBlaster/src/java/org/xmlBlaster/protocol directory

# Switch on the CORBA, RMI and XML-RPC driver the EMAIL callback and the JDBC service:
Protocol.Drivers=IOR:org.xmlBlaster.protocol.corba.CorbaDriver,\
                 SOCKET:org.xmlBlaster.protocol.socket.SocketDriver,\
                 RMI:org.xmlBlaster.protocol.rmi.RmiDriver,\
                 XML-RPC:org.xmlBlaster.protocol.xmlrpc.XmlRpcDriver,\
                 JDBC:org.xmlBlaster.protocol.jdbc.JdbcDriver
Protocol.CallbackDrivers=IOR:org.xmlBlaster.protocol.corba.CallbackCorbaDriver,\
                         SOCKET:org.xmlBlaster.protocol.socket.CallbackSocketDriver,\
                         RMI:org.xmlBlaster.protocol.rmi.CallbackRmiDriver,\
                         XML-RPC:org.xmlBlaster.protocol.xmlrpc.CallbackXmlRpcDriver,\
                         JDBC:org.xmlBlaster.protocol.jdbc.CallbackJdbcDriver,\
                         EMAIL:org.xmlBlaster.protocol.email.CallbackEmailDriver

# Example to switch on CORBA driver only:
#Protocol.Drivers=IOR:org.xmlBlaster.protocol.corba.CorbaDriver
#Protocol.CallbackDrivers=IOR:org.xmlBlaster.protocol.corba.CallbackCorbaDriver

# Enable the email callback driver (demo hack only):
#Protocol.CallbackDrivers=IOR:org.xmlBlaster.protocol.corba.CallbackCorbaDriver,\
#                         EMAIL:org.xmlBlaster.protocol.email.CallbackEmailDriver

# Switch on the demo native, CORBA, RMI and XML-RPC driver and the JDBC service:
#Protocol.Drivers=IOR:org.xmlBlaster.protocol.corba.CorbaDriver,\
#                 RMI:org.xmlBlaster.protocol.rmi.RmiDriver,\
#                 XML-RPC:org.xmlBlaster.protocol.xmlrpc.XmlRpcDriver,\
#                 JDBC:org.xmlBlaster.protocol.jdbc.JdbcDriver, \
#                 NativeDemo:org.xmlBlaster.protocol.nativ.NativeDriver
#Protocol.CallbackDrivers=IOR:org.xmlBlaster.protocol.corba.CallbackCorbaDriver,\
#                         RMI:org.xmlBlaster.protocol.rmi.CallbackRmiDriver,\
#                         XML-RPC:org.xmlBlaster.protocol.xmlrpc.CallbackXmlRpcDriver,\
#                         JDBC:org.xmlBlaster.protocol.jdbc.CallbackJdbcDriver, \
#                         NativeDemo:org.xmlBlaster.protocol.nativ.CallbackNativeDriver
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Adjust if you want to use the EMAIL plugin.
# See xmlBlaster/demo/javaclients/email/README
EmailDriver.smtpHost=localhost
EmailDriver.from=xmlblast@localhost
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# List of all jdbc drivers to initalize for the XmlDBAdapter
# Don't forget to add the corresponding jdbc jar file to your CLASSPATH as well.
JdbcDriver.drivers=sun.jdbc.odbc.JdbcOdbcDriver
#JdbcDriver.drivers=oracle.jdbc.driver.OracleDriver
#JdbcDriver.drivers=oracle.jdbc.driver.OracleDriver,org.gjt.mm.mysql.Driver,org.postgresql.Driver,de.sag.jdbc.adabasd.ADriver,sun.jdbc.odbc.JdbcOdbcDriver,com.sybase.jdbc2.jdbc.SybDriver
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Add here your MIME based plugins which allow to filter update messages
# you subscribed with your own supplied rules.
# SEE: http://www.xmlblaster.org/xmlBlaster/doc/requirements/mime.plugin.accessfilter.html
MimeAccessPlugin[ContentLenFilter][1.0]=org.xmlBlaster.engine.mime.demo.ContentLenFilter
MimeAccessPlugin[GnuRegexFilter][1.0]=org.xmlBlaster.engine.mime.regex.GnuRegexFilter
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Add here your MIME based plugins which allow to filter published messages.
# SEE: http://www.xmlblaster.org/xmlBlaster/doc/requirements/mime.plugin.publishfilter.html
# MimePublishPlugin[PublishLenChecker][1.0]=org.xmlBlaster.engine.mime.demo.PublishLenChecker,DEFAULT_MAX_LEN=200
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Customize clustering
# SEE: http://www.xmlBlaster.org/xmlBlaster/doc/requirements/cluster.html
LoadBalancerPlugin[RoundRobin][1.0]=org.xmlBlaster.engine.cluster.simpledomain.RoundRobin
MapMsgToMasterPlugin[DomainToMaster][1.0]=org.xmlBlaster.engine.cluster.simpledomain.DomainToMaster,DEFAULT_DOMAIN=dummy
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Customize invocation recorder to queue tail back messages
# SEE: http://www.xmlBlaster.org/xmlBlaster/doc/requirements/util.recorder.html
# SEE: http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.failsave.html
RecorderPlugin[FileRecorder][1.0]=org.xmlBlaster.util.recorder.file.FileRecorder
RecorderPlugin[RamRecorder][1.0]=org.xmlBlaster.util.recorder.ram.RamRecorder
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# When an XmlBlasterException is thrown, log it to console
Log.exception=false

# Control logging output format (examples are provided below)
# <timestamp>:<levelStr>:<instance>:<text>
#
# Apr 29, 2000 4:43:35 PM:INFO :Main:Published AuthServer IOR on port 3412
LogFormat=[{0} {1} {2}] {3}
#LogFormat={0}:{1}:{2}:{3}
#
# Apr 29, 2000 5:36:21 PM INFO  Published AuthServer IOR on port 3412
#LogFormat={0} {1} {3}
#
# INFO :Published AuthServer IOR on port 3412
#LogFormat={1}:{3}
#
# Published AuthServer IOR on port 3412
#LogFormat={3}
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# How to format Date and Time in logging output
#
# Choose one of SHORT, MEDIUM, LONG, FULL
#   SHORT is completely numeric, such as 12.13.52 or 3:30pm 
#   MEDIUM is longer, such as Jan 12, 1952 
#   LONG is longer, such as January 12, 1952 or 3:30:32pm 
#   FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST. 
LogFormat.Date=MEDIUM
LogFormat.Time=MEDIUM

# Choose language - lowercase two-letter ISO-639 code.
# Choose country - uppercase two-letter ISO-3166 code
# Defaults to local computer setting
#LogFormat.Language=en
#LogFormat.Country=US

#LogFormat.Language=fr
#LogFormat.Country=FR

#LogFormat.Language=de
#LogFormat.Country=DE
#------------------------------------------------------------------------------


#------------------- Global setting for the persistence -----------------------
#
# supported and implemented tpyes and versions of persistence plugins:
#
#         || Type                |
#         || filestore | xmldb   |
# ========++===========+=========+
# Version || 1.0       | xindice |
#         ||           |         |
#         ||           |         |
#

# Lazy recover (not at server startup but on demand) is not yet supported.
Persistence.LazyRecovery=true

Persistence.Driver.Type=filestore
Persistence.Driver.Version=1.0
Persistence.Path=${user.home}${file.separator}tmp

# Persistence.Driver.Type=xmldb
# Persistence.Driver.Version=xindice
# Persistence.Driver.Version=eXist
# Persistence.Path=xmldb:xindice:///db
# Persistence.Collection=xmlBlaster

#-------------------  Xindice database ------------------------------------------
# see $XMLBLASTER_HOME/README or list-archive on http://www.xmlBlaster.org for
# more details
# This persistence Layer needs Xindice from http://www.dbXML.org installed and running
#
# developed with release 'Xindice 1.0rc1 (DarkHorse)'
#
# Collection needs to be created manually by:
# xindiceadmin ac -c /db -n xmlBlaster
# see http://www.dbXML.org for more details
# see http://xml.apache.org/xindice for more details ???
#
#	Setting up your desired CollectionPath
#	default is xmldb:xindice:///db
#Persistence.Path=xmldb:xindice:///db
#	Setting up your desired CollectionName
#	default is xmlBlaster
#Persistence.Collection=xmlBlaster
#
#	Sets the Driver of the Xindice Database Implementation
#       default is org.apache.xindice.client.xmldb.DatabaseImpl
#	!! Leave it, as long as you don't know what you're doing !!
#Persistence.xindiceDriver=org.apache.xindice.client.xmldb.DatabaseImpl
#	Sets the xindiceFilterClasss of the Xindice Database Implementation
#       default is org.apache.xindice.core.filer.BTreeFiler
#	!! Leave it, as long as you don't know what you're doing !!
#Persistence.xindiceFilterClass=org.apache.xindice.core.filer.BTreeFiler
#
#-------------------  Filestore database --------------------------------------
# at the moment 'nothing'.
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Any other custom properties can be added here. 
# These are available through the API e.g.
# String str = Global.instance().getProperty().get("MyApp.mykey", "defaultValue");
#------------------------------------------------------------------------------

