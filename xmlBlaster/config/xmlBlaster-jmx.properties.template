#------------------------------------------------------------------------------
# Name:      xmlBlaster.properties
# Project:   xmlBlaster.org
# Copyright: xmlBlaster.org, see xmlBlaster-LICENSE file
# Comment:   Properties for JMX XmlBlaster server in JBoss, see xmlBlaster.properties.template for a more full property file.
#
#
# Run RAM based only. The hsql used by XmlBlaster does not work on JBoss 3.0
#
persistence/msgUnitStore/defaultPlugin=RAM,1.0
persistence/session/defaultPlugin=RAM,1.0
persistence/subscribe/defaultPlugin=RAM,1.0
queue/subject/defaultPlugin=RAM,1.0
queue/history/defaultPlugin=RAM,1.0
queue/callback/defaultPlugin=RAM,1.0
useTopicStore=false

# Client side
queue/connection/defaultPlugin=RAM,1.0

#------------------------------------------------------------------------------
# Authentication and Authorization
Security.Server.Plugin[htpasswd][1.0]=org.xmlBlaster.authentication.plugins.htpasswd.Manager

# NONE switches off security checks in passwd file:
Security.Server.Plugin.htpasswd.secretfile=NONE
#Security.Server.Plugin.htpasswd.secretfile=${user.home}${file.separator}xmlBlaster.htpasswd

Security.Client.Plugin[htpasswd][1.0]=org.xmlBlaster.authentication.plugins.htpasswd.ClientPlugin
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# List of all xmlBlaster access protocol drivers (I_Driver and I_Callback implementations)
# For supported protocol types see xmlBlaster/src/java/org/xmlBlaster/protocol directory
# SEE: http://www.xmlblaster.org/xmlBlaster/doc/requirements/protocol.html
# NOTE: Please use xmlBlasterPlugins.xml to configure which protocols to offer

CbProtocolPlugin[IOR][1.0]=org.xmlBlaster.protocol.corba.CallbackCorbaDriver
CbProtocolPlugin[LOCAL][1.0]=org.xmlBlaster.protocol.local.CallbackLocalDriver
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# On client side only

# Register the client side protocol plugin to connect to server
ClientProtocolPlugin[IOR][1.0]=org.xmlBlaster.client.protocol.corba.CorbaConnection


# Register the client side callback server plugins:
ClientCbServerProtocolPlugin[IOR][1.0]=org.xmlBlaster.client.protocol.corba.CorbaCallbackServer
#------------------------------------------------------------------------------

#
# Portnumbers and other stuf for the drivers. Needed because defaults don't go
# well with JBoss
#

#plugin/rmi/registryPort=1298
#plugin/rmi/hostname
#soap.port=1280
#plugin/socket/port=7607
#plugin/xmlrpc/port=1281
#-DOAPort=7609
#-Djacorb.log.default.verbosity=5
#
# Set logging
#
trace=false
trace[dispatch]=false

#------------------------------------------------------------------------------
# Customize dispatcher plugin
# SEE: http://www.xmlBlaster.org/xmlBlaster/doc/requirements/dispatch.plugin.html
DispatchPlugin[Priority][1.0]=org.xmlBlaster.util.dispatch.plugins.prio.PriorizedDispatchPlugin
#DispatchPlugin/defaultPlugin=Priority,1.0
# Up to the client to set
dispatch/connection/DispatchPlugin/defaultPlugin=undef
dispatch/callback/DispatchPlugin/defaultPlugin=undef
#dispatch/callback/DispatchPlugin/defaultPlugin=Priority,1.0

# SEE: http://www.xmlBlaster.org/xmlBlaster/doc/requirements/dispatch.plugin.priorizedDispatch.html
PriorizedDispatchPlugin/config=<msgDispatch defaultStatus='64k' defaultAction='send'> \
   <onStatus oid='_bandwidth.status' content='64k' defaultAction='destroy'> \
     <action do='send'  ifPriority='7-9'/> \
     <action do='queue'  ifPriority='2-6'/> \
  </onStatus> \
   <onStatus oid='_bandwidth.status' content='2M'> \
     <action do='send'  ifPriority='0-9'/> \
   </onStatus> \
 </msgDispatch>

#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Server side plugins to store single messages persistently 'msgUnitStore'
# Server side setup to recover topics after a server crash 'topicStore'
# CACHE is only meaningfull if you really have a persistent store setup

StoragePlugin[RAM][1.0]=org.xmlBlaster.engine.msgstore.ram.MapPlugin
StoragePlugin[CACHE][1.0]=org.xmlBlaster.engine.msgstore.cache.PersistenceCachePlugin,persistentQueue=JDBC,transientQueue=RAM

# Choose the plugins
#persistence/topicStore/defaultPlugin=JDBC,1.0
#persistence/msgUnitStore/defaultPlugin=CACHE,1.0
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Declare existing queue implementation plugins
# SEE: http://www.xmlBlaster.org/xmlBlaster/doc/requirements/engine.queue.html
QueuePlugin[RAM][1.0]=org.xmlBlaster.util.queue.ram.RamQueuePlugin
QueuePlugin[CACHE][1.0]=org.xmlBlaster.util.queue.cache.CacheQueueInterceptorPlugin,persistentQueue=JDBC,transientQueue=RAM

# Choose the plugin (each client can overwrite this in its connect/publish QoS)
# Uncomment to the persistence
#queue/subject/defaultPlugin=CACHE,1.0
#queue/history/defaultPlugin=CACHE,1.0
#queue/callback/defaultPlugin=CACHE,1.0
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Customize queue and persistence properties
# SEE: http://www.xmlBlaster.org/xmlBlaster/doc/requirements/engine.message.lifecycle.html

# The property with appended 'Cache' is in RAM, the second property is swap space on harddisk

# How many history messages of same key oid (topic) to hold in xmlBlaster (holds references only)
queue/history/maxEntriesCache = 1000
queue/history/maxEntries = ${queue/history/maxEntriesCache}

# How big is a callback queue for each client (holds references only)
queue/callback/maxEntriesCache = 1000
queue/callback/maxEntries = ${queue/callback/maxEntriesCache}

# How big is the topic cache for messages of same oid (here your message content occupies the memory)
persistence/msgUnitStore/maxEntriesCache = 10000
persistence/msgUnitStore/maxEntries = 100000000


# Tail back queue on client side (contains the real data of all message types)
queue/connection/maxEntriesCache = 1000
queue/connection/maxEntries = 10000000
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Add here your MIME based plugins which allow to filter update messages
# you subscribed with your own supplied rules.
# SEE: http://www.xmlblaster.org/xmlBlaster/doc/requirements/mime.plugin.accessfilter.html
MimeAccessPlugin[ContentLenFilter][1.0]=org.xmlBlaster.engine.mime.demo.ContentLenFilter
MimeAccessPlugin[GnuRegexFilter][1.0]=org.xmlBlaster.engine.mime.regex.GnuRegexFilter
MimeAccessPlugin[XPathFilter][1.0]=org.xmlBlaster.engine.mime.xpath.XPathFilter
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# Customize clustering
# SEE: http://www.xmlBlaster.org/xmlBlaster/doc/requirements/cluster.html
LoadBalancerPlugin[RoundRobin][1.0]=org.xmlBlaster.engine.cluster.simpledomain.RoundRobin
MapMsgToMasterPlugin[DomainToMaster][1.0]=org.xmlBlaster.engine.cluster.simpledomain.DomainToMaster,DEFAULT_DOMAIN=dummy
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Customize invocation recorder to queue tail back messages
# SEE: http://www.xmlBlaster.org/xmlBlaster/doc/requirements/util.recorder.html
# SEE: http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.failsafe.html
RecorderPlugin[FileRecorder][1.0]=org.xmlBlaster.util.recorder.file.FileRecorder
RecorderPlugin[RamRecorder][1.0]=org.xmlBlaster.util.recorder.ram.RamRecorder
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Switch off internal messages, events sent on client login and logout
# SEE: http://www.xmlBlaster.org/xmlBlaster/doc/requirements/engine.LoginLogoutEvent.html
loginEvent=false
logoutEvent=false
userListEvent=false
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Pluggable Loggers
LoggableDevicePlugin[console][1.0]=org.xmlBlaster.util.log.ConsoleLogDeviceFactory
LoggableDevicePlugin[file][1.0]=org.xmlBlaster.util.log.FileLogDeviceFactory,logFile=mylogfile
# Control wich logger to use globaly, comma separated list
logDevice=console
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# When an XmlBlasterException is thrown, how to format the getMessage() string, see:
# http://www.xmlblaster.org/xmlBlaster/doc/requirements/admin.errorcodes.html
XmlBlasterException.logFormat=XmlBlasterException errorCode=[{0}] serverSideException={3} node=[{1}] location=[{2}] message=[{4} : {8}]



#------------------------------------------------------------------------------
# How to format Date and Time in logging output
#
# Choose one of SHORT, MEDIUM, LONG, FULL
#   SHORT is completely numeric, such as 12.13.52 or 3:30pm
#   MEDIUM is longer, such as Jan 12, 1952
#   LONG is longer, such as January 12, 1952 or 3:30:32pm
#   FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST.
LogFormat.Date=MEDIUM
LogFormat.Time=MEDIUM


#------------------------------------------------------------------------------
#
# JAXP parsers. Currently only crimson is actually possible to use.
#
javax.xml.parsers.SAXParserFactory=org.apache.crimson.jaxp.SAXParserFactoryImpl
javax.xml.parsers.DocumentBuilderFactory=org.apache.crimson.jaxp.DocumentBuilderFactoryImpl
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Any other custom properties can be added here.
# These are available through the API e.g.
# String str = Global.instance().getProperty().get("MyApp.mykey", "defaultValue");
#------------------------------------------------------------------------------

