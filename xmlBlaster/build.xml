<?xml version="1.0"?>

<!-- ===========================================================================

 xmlBlaster build file

Authors:
 James Birchfield "jmbirchfield@proteustechnologies.com"
 Marcel Ruff "xmlBlaster@marcelruff.info"
 Martin Johnson  mjhn@bigpond.net.au"  (Windows C++ TAO support)

Installing the build tools
==========================

The xmlBlaster build system is based on Jakarta Ant, which is a Java building
tool originally developed for the Jakarta Tomcat project but now used in many
other Apache projects and extended by many developers.

Ant is a little but very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://jakarta.apache.org/ant/".

To make things easier for you, the xmlBlaster distribution contains a
precompiled version of Ant and the build scripts take care of all the
classpath issues.

The only thing that you have to make sure, is the "JAVA_HOME" environment
property should be set to match the JVM you want to use. That's it.


Building instructions
=====================

Ok, let's build the baby. First, make sure your current working directory is
where this very file is located. Then type

  ./build.sh all (unix)    (-debug -verbose -buildfile <file>)
  .\build.bat all (win32)

if everything is right and all the required packages are visible, this action
will generate a file called "xmlBlaster.jar" in the "./lib" directory.
Note, that if you do further development, compilation time is reduced
since Ant is able to detect which files have changed an to recompile
them at need.

If you use 'xmlBlaster/.bashrc', login again to include xmlBlaster.jar into
your CLASSPATH.
Else add it manually.

TODO
  Probably we should split the build file and integrate with a master
  file, see:
   ftp://www6.software.ibm.com/software/developer/library/j-tools4xp.pdf

============================================================================ -->

<project default="usage" basedir=".">

   <taskdef resource="cpptasks.tasks"/> <!-- cc defineset compiler linker -->
   <typedef resource="cpptasks.types"/>

   <!-- taskdef name="cc" classname="net.sf.antcontrib.cpptasks.CCTask" />
   <typedef name="defineset" classname="net.sf.antcontrib.cpptasks.types.DefineSet" />
   <typedef name="libset" classname="net.sf.antcontrib.cpptasks.types.LibrarySet" />
   <typedef name="compiler" classname="net.sf.antcontrib.cpptasks.CompilerDef" />
   <typedef name="linker" classname="net.sf.antcontrib.cpptasks.LinkerDef" / -->

   <taskdef resource="net/sf/antcontrib/antcontrib.properties" />  <!-- if foreach osfamily switch if -->

   <!-- Allow any user specific values to override the defaults -->
   <property file="${user.home}/build.properties" />

   <!-- Set default values for the build -->
   <property file="build.properties" />

   <property name="name" value="xmlBlaster"/>
   <property name="version" value="0.841"/>
   <property name="year" value="1999-2003"/>

   <!-- property name="build.compiler" value="classic"/ -->
   <property name="debug" value="on"/>
   <property name="JVM.target" value="1.1" />
   <property name="optimize" value="off" />
   <property name="deprecation" value="off" />

   <property name="xmlBlaster.home" value="${basedir}"/>
   <property name="src.java.dir" value="./src/java"/>
   <property name="dtd.dir" value="./src/dtd"/>
   <property name="doc.dir" value="./doc"/>
   <property name="classes.dir" value="./classes"/>
   <property name="javadoc.dir" value="./doc/api"/>
   <property name="testsuite.dir" value="./testsuite"/>
   <property name="testsuite.java.dir" value="./testsuite/src/java"/>
   <property name="demo.dir" value="./demo"/>
   <property name="demo.java.dir" value="./demo/javaclients"/>
   <property name="bin.dir" value="./bin"/>
   <property name="lib.dir" value="./lib"/>
   <property name="lib.dir.absolute" location="./lib"/>
   <property name="req.dir" value="./doc/requirements"/>
   <property name="packages" value="org.xmlBlaster.*"/>

   <property name="demo.http.dir"        value="${demo.dir}/http"/>
   <property name="WEB-INF"              value="${demo.http.dir}/WEB-INF"/>
   <!-- The document root of the servlet engine (deploy dir for war files): -->
   <property name="TOMCAT_HOME"          value="${user.home}/jakarta-tomcat"/>
   <property name="WWW_ROOT"             value="${TOMCAT_HOME}/webapps"/>

   <property name="idl" value="org.xmlBlaster.protocol.corba"/>
   <property name="idl.class" value="org.jacorb.idl.parser"/>
   <property name="idl.dir" value="./src/java/org/xmlBlaster/protocol/corba"/>
   <property name="idl.file" value="${idl.dir}/xmlBlaster.idl" />

   <property name="build.dir" value="./build"/>
   <property name="build.src" value="${build.dir}/src"/>
   <property name="build.dest" value="${build.dir}/classes"/>
   <property name="build.war" value="${build.dir}/war"/>

   <property name="dist.dir" value="./dist/xmlBlaster"/>
   <property name="dist-classes.dir" value="./dist-classes"/>
   <property name="dist-client.dir" value="./dist-client"/>

   <property name="test.class" value="org.xmlBlaster.test.AllTests"/>
   <property name="report.dir" value="./doc/test/report"/> <!-- junit HTML report -->

   <property name="xmlblaster_home" value="."/>

   <property name="cp.j2ee" value="lib/connector.jar:lib/jaas.jar:lib/jta-spec1_0_1.jar:lib/jms.jar:lib/ejb2.0.jar:lib/jndi-jdk1_3_1.jar"/>
   <property name="cp.xml" value="lib/parser.jar:lib/jaxp.jar:lib/omquery.jar:lib/xtdash.jar"/>
   <property name="cp.orb" value="lib/idl.jar:lib/jacorb.jar"/>
   <property name="cp.core" value="lib/concurrent.jar:lib/remotecons.jar:lib/servlet.jar:lib/junit.jar:${JAVA_HOME}/lib/tools.jar:lib/xmlrpc.jar:lib/a2Blaster.jar:lib/jutils.jar:lib/gnu-regexp.jar"/>
   <property name="cp.other" value="lib/mail.jar:lib/activation.jar:lib/batik/batik.jar:lib/batik/js.jar:lib/jax.jar"/>
   <property name="cp.db" value="lib/Xindice/xalan-2.0.1.jar:lib/Xindice/xindice.jar:lib/Xindice/xmldb.jar:lib/jdbc7.2dev-1.2.jar"/>
   <property name="cp.xpath" value="lib/xpath/jaxen-core.jar:lib/xpath/jaxen-dom.jar:lib/xpath/saxpath.jar"/>
   <property name="cp.test" value="${testsuite.java.dir}:lib/testsuite.jar"/>
   <property name="cp.wrapper" value="lib/wrapper.jar"/>

   <property name="soap.dir" value="./src/java/org/xmlBlaster/protocol/soap"/>
   <property name="soapdeploy.dir" value="./demo/soap"/>
   <property name="soaplib.dir" value="lib/soap"/>
   <property name="cp.soap" value="${soaplib.dir}/jdom.jar:${soaplib.dir}/log4j-core.jar:${soaplib.dir}/log4j.jar:${soaplib.dir}/saw.jar:${soaplib.dir}/soap.jar:${soaplib.dir}/xerces.jar"/>
   <property name="cp" value="${cp.j2ee}:${cp.xml}:${cp.orb}:${cp.core}:${cp.other}:${cp.db}:${cp.xpath}:${cp.test}:${cp.soap}:${cp.wrapper}"/>


   <!-- =================================================================== -->
   <!-- General C++ compiling setup for VisualC++, Borland and GCC          -->
   <!-- Force from outside compiler: build.bat -Duse-msvc=1 ...             -->
   <!-- =================================================================== -->
   <property name="compiler" value="msvc"/> <!-- "gcc" "VC6" "bcc" "msvc" -->
   <property name="cpp.debug" value="true" />
   <property name="chmod.fail" value="true" />

   <property name="src.cpp.dir" value="./src/c++"/>
   <property name="CORBACPP_VER" value="2.3.7"/>
   <property name="CORBACPP_HOME" value="/opt/local/mico"/>
   <property name="XMLCPP_VER" value="2"/>  <!-- 1_7_0 -->
   <property name="THREAD_SRC" value="src/c++/libs/thread/src"/> <!-- use the internal boost library -->
   <property name="THREAD_INC" value="src/c++"/> <!-- use the internal boost library -->
   <property name="XMLCPP_HOME" value="/opt/local/xerces-c-src${XMLCPP_VER}"/>

   <compiler id="base-msvc" name="msvc" if="use-msvc">
      <defineset><define name="_WINDOWS" value="1" /></defineset>
      <!-- <compilerarg value="/GX" /> -->
      <compilerarg value="/Gm" if="is-debug"/>      
      <compilerarg value="/Zi" if="is-debug"/>      
      <!-- compilerarg value="/G6"/ -->                  <!-- target Pentium Pro -->
      <!-- <compilerarg value="/MDd" />  -->        <!-- multi threading with debug -->      
      <compilerarg value="/W3"/>                    <!-- display many warnings -->
      <!-- <compilerarg value="/Od" unless="is-debug"/> --> <!-- maximize speed --> 
      <!-- compilerarg value="/Ob2" unless="is-debug"/ --> <!-- auto-inlining -->      

      <!-- 
      This flag makes good sense though currently ace complains for some reason
      I think it is to do with the way I have built ace (Martin Johnson)
      <defineset>      
         <define name="_CRTDBG_MAP_ALLOC" if="is-debug"/>         
      </defineset>
      -->
      
   </compiler>   

   <compiler id="msvc" name="msvc" extends="base-msvc">
      <!--  disable Microsoft Extensions   -->
      <!-- <compilerarg value="/Za"/> -->
   </compiler>       

   <compiler id="msvc-with-extensions" extends="base-msvc">
      <!--  enable Microsoft Extensions   -->
      <compilerarg value="/Ze"/>
   </compiler>

   <compiler id="bcc" name="bcc" if="use-bcc">
      <!--  target Pentium Pro   -->
      <compilerarg value="-6"/>
      <!--  zero length empty class member functions -->
      <compilerarg value="-Vx"/>
      <compilerarg value="-Ve"/>
      <!--   align on quad word boundaries   -->
      <compilerarg value="-a8"/>
      <!--   byte size enums   -->
      <compilerarg value="-b-"/>
      <compilerarg value="-k"/>
      <compilerarg value="-y" if="is-debug"/>
      <compilerarg value="-vi"/>
      <compilerarg value="-r-" if="is-debug"/>
      <!--  maximize speed     -->
      <compilerarg value="-O2" unless="is-debug"/>
   </compiler>

   <compiler id="gcc" name="g++" if="use-gcc">
      <compilerarg value="-Wall" />
      <!-- compilerarg value="-pedantic" /-->  <!-- warning: ISO C++ does not support `long long' -->
      <compilerarg value="-Wstrict-prototypes" />
      <compilerarg value="-Wimplicit-int" />
      <compilerarg value="-Werror-implicit-function-declaration" />
      <compilerarg value="-D_REENTRANT" />
      <compilerarg value="-rdynamic" /> <!-- To show symbols of a backtrace (see XmlBlasterException.cpp -->
      <compilerarg value="-D${thread.impl}" />
   </compiler>



   <!-- =================================================================== -->
   <!-- Help on usage                                                       -->
   <!-- =================================================================== -->
   <target name="usage" depends="prepare" description="show help">
      <switch value="${os.family}" caseinsensitive="false">
         <case value="unix">
            <property name="script" value="build.sh" />
         </case>
         <default>
            <property name="script" value="build.bat" />
         </default>
      </switch>
      <echo message=""/>
      <echo message=""/>
      <echo message="xmlBlaster Build file"/>
      <echo message="-------------------------------------------------------------"/>
      <echo message=""/>
      <echo message=" available targets are:"/>
      <echo message=""/>
      <echo message="   xmlBlaster  --> generates the xmlBlaster.jar file (default)"/>
      <echo message="   demo        --> generates the demo.jar file"/>
      <echo message="   testsuite   --> generates the testsuite.jar file"/>
      <echo message="   all         --> generates xmlBlaster.jar (including demo and testsuite classes)"/>
      <echo message="   dist        --> generates the xmlBlaster distribution to run as a server"/>
      <echo message="         -DADD_CORBA=false     does not add jacorb.jar, no CORBA support [true]"/>
      <echo message="         -DADD_XMLRPC=false    does not add xmlrpc.jar, no XML-RPC support [true]"/>
      <echo message="         -DADD_SNMP=false      does not add jax.jar, no SNMP support [false]"/>
      <echo message="         -DADD_EMAIL=false     no EMAIL support [true]"/>
      <echo message="         -DADD_TINYSQL=true    add tinySQL JDBC dBase driver support [false]"/>
      <echo message="         -DADD_PROP=[property file] Adds your customized xmlBlaster.properties file"/>
      <echo message="         -DADD_MANIFEST=[manifest file] Adds your customized manifest.xmlBlaster file"/>
      <echo message="         -DADD_DIRECTORY=[directory] Adds all class files in the specified directory"/>
      <echo message="   clean       --> cleans up the class directory"/>
      <echo message="   delete      --> cleans up the class directory and all created distribution jar files"/>
      <echo message="   deploy_war  --> create and deploys a web archive (e.g. for tomcat) to show persistent http callbacks"/>
      <echo message="                   demonstrates persistent http callbacks"/>
      <echo message="   jboss-sar   --> create embedded XmlBlaster for JBoss"/>
      <echo message="   k2          --> create the J2EE connector"/>
      <echo message="   jms-adapter --> create the J2EE connector example bean"/>
      <echo message=""/>
      <echo message="   dist-client --> create for a typical client the necessary xmlBlasterClient.jar file"/>
      <echo message="         -DADD_COLLECTION=true add java.util.collection classes for JDK 1.1 clients [false]"/>
      <echo message="         -DADD_CORBA=false     does not add jacorb.jar, no CORBA support for clients [true]"/>
      <echo message="         -DADD_XMLRPC=false    does not add xmlrpc.jar, no XML-RPC support for clients [true]"/>
      <echo message="         -DADD_SNMP=false      does not add jax.jar, no SNMP support for clients [false]"/>
      <echo message="         -DADD_XML_PARSER=true add XML parser, usually you should use your own [false]"/>
      <echo message="         -DADD_PROP=[property file] Adds your customized xmlBlaster.properties file"/>
      <echo message="         -DADD_MANIFEST=[manifest file] Adds your customized manifest.xmlBlaster file"/>
      <echo message="         -DADD_DIRECTORY=[directory] Adds all class files in the specified directory"/>
      <echo message=""/>
      <echo message="   cpp-lib     --> generates C++ libxmlBlasterClient.sl (shared library .so .sl .dll)"/>
      <echo message="                   Check build.properties settings for C++ CORBA and C++ XML libraries"/>
      <echo message="   cpp-test    --> generates C++ test clients"/>
      <echo message="   cpp-demo    --> generates C++ demo clients"/>
      <echo message="   cpp         --> builds cpp-lib, cpp-test and cpp-demo"/>
      <echo message="   cpp-clean   --> cleans up C++ generated files (object files, corba files etc)"/>
      <echo message="   cpp-delete  --> like 'cpp-clean', but delete shared library and C++ test clients as well"/>
      <echo message=""/>
      <echo message="   runTests    --> starts xmlBlaster and runs all JUNIT tests"/>
      <echo message="                   you need to compile xmlBlaster before with target 'all'"/>
      <echo message="   report      --> after 'runTests' you can generate a HTML report"/>
      <echo message="                   into xmlBlaster/doc/test/report/html/junit-noframes.html"/>
      <echo message="   runTestsAndReport --> does both of above"/>
      <echo message="   -Dtest.class=nameOfTestClass  runJunit --> run junit on the specifyed testclass"/>
      <echo message=""/>
      <echo message="   javadocs    --> generates the javadoc documentation"/>
      <echo message="   javadocs-delete --> remove the above"/>
      <echo message="   html        --> generates the html file of each java/cpp/python ... file in same directory"/>
      <echo message="   html-delete --> remove the above"/>
      <echo message="   requirements--> generates html files for all xml requirements"/>
      <echo message="   requirements-delete --> remove the above"/>
      <echo message="   whitepaper  --> generates html and pdf files for our xml whitepaper"/>
      <echo message="   whitepaper-delete --> remove the above"/>
      <echo message="   docs        --> does javadoc, source-html, requirements and whitepaper"/>
      <echo message="   docs-delete --> remove the above"/>
      <echo message=""/>
      <echo message=" See the comments inside the build.xml file for more details."/>
      <echo message="-------------------------------------------------------------"/>
      <echo message=""/>
      <echo message="Examples:"/>
      <echo message="   ${script} clean"/>
      <echo message="   ${script} all"/>
      <echo message="   ${script} -Ddebug=off -DJVM.target=1.1 all"/>
      <echo message="   ${script} -Ddeprecation=on -Doptimize=on all"/>
      <echo message="   ${script} -DADD_CORBA=false -DADD_COLLECTION=true -DADD_PROP=mystuff/xmlBlaster.properties  dist-client"/>
      <echo message="   ${script} -verbose cpp-lib"/>
      <echo message=""/>
      <echo message=""/>
   </target>

   <!-- =================================================================== -->
   <!-- Prepares the build directory                                        -->
   <!-- =================================================================== -->
   <target name="prepare" description="For internal use only">
      <mkdir dir="${build.dir}"/>
      <osfamily property="os.family" />
      <echo message=" OS_FAMILY     = ${os.family}"/>  <!-- "unix", "dos", "mac" "windows" -->
      <property name="${os.family}" value="true" />    <!-- set e.g unix=true to be used in if="unix" conditions -->
      <!--
      <switch value="${os.family}" caseinsensitive="false">
         <case value="unix">
            <property name="BUILD_UNIX" value="true" />
            <property name="unix" value="true" />
         </case>
         <case value="mac">
            <property name="BUILD_MAC" value="true" />
            <property name="mac" value="true" />
         </case>
         <case value="dos">
            <property name="BUILD_DOS" value="true" />
            <property name="dos" value="true" />
         </case>
         <default>
            <property name="BUILD_WINDOWS" value="true" />
            <property name="windows" value="true" />
         </default>
      </switch>
      -->
      <condition property="linux">
         <equals arg1="${os.name}" arg2="Linux"/>
      </condition>

      <!--
        These filters replace in your code @version@, @build.timestamp@ etc with
        the current values if the copy task contains a filtering="true" attribute.
      -->
      <tstamp>
         <format property="build.timestamp" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
      </tstamp>
      <filter token="version" value="${version}"/>
      <filter token="build.timestamp" value="${build.timestamp}"/>
      <filter token="build.java.version" value="${java.version}"/>
      <filter token="build.java.vendor" value="${java.vendor}"/>
      <echo message="Build timestamp = ${build.timestamp} version = ${version}"/>

      <echo message="xmlBlaster.home=${xmlBlaster.home}"/>

   </target>

   <!-- =================================================================== -->
   <!-- Compiles the source code                                            -->
   <!-- =================================================================== -->
   <target name="prepare-src" depends="prepare" description="For internal use only">
      <!-- create directories -->
      <mkdir dir="${build.src}"/>
      <mkdir dir="${build.dest}"/>
   </target>

   <!-- =================================================================== -->
   <!-- Compile the xmlBlaster.idl file for the CORBA plugin                -->
   <!-- =================================================================== -->
   <target name="java-corba-idl" depends="prepare" description="Compile xmlBlaster.idl to generate Java stubs and skeletons">
      <echo message="Converting idl..."/>
      <echo message="Comparing ${idl.dir}/xmlBlaster.idl to ${idl.dir}/serverIdl/Server.java"/>
      <uptodate property="idlBuild.required" targetfile="${idl.dir}/serverIdl/Server.java" value="false">
         <srcfiles dir= "${idl.dir}" includes="xmlBlaster.idl"/>
      </uptodate>
      <if><equals arg1="${idlBuild.required}" arg2="false" />
         <then>
            <echo message="CORBA stubs and skeletons are up to date" />
         </then>
         <else>
            <echo message="Generating CORBA stubs and skeletons from ${idl.dir}/xmlBlaster.idl" />
            <java classname="${idl.class}" classpath="${cp}" fork="false">
               <arg line="-p ${idl} -d ${src.java.dir} ${idl.dir}/xmlBlaster.idl"/>
            </java>
         </else>
      </if>
   </target>

   <!-- =================================================================== -->
   <!-- Compiles the xmlBlaster core source directory                       -->
   <!-- =================================================================== -->
   <target name="xmlBlaster" depends="java-corba-idl,prepare-src" description="Compile xmlBlaster server and create a xmlBlaster.jar">

      <copy todir="${build.src}/xmlBlaster" filtering="true">
         <fileset dir="${src.java.dir}">
            <exclude name="org/jutils"/>
            <exclude name="README,Makefile,**/ReqBaseServlet.java,**/ReqListServlet.java,**/ReqItemServlet.java,**/OracleSqlFactory.java"/>
            <exclude name="Makefile,**/ReqBaseServlet.java,**/ReqListServlet.java,**/ReqItemServlet.java,**/OracleSqlFactory.java"/>
            <exclude name="**/ReqBaseServlet.java,**/ReqListServlet.java,**/ReqItemServlet.java,**/OracleSqlFactory.java"/>
            <exclude name="**/ReqListServlet.java,**/ReqItemServlet.java,**/OracleSqlFactory.java"/>
            <exclude name="**/ReqItemServlet.java,**/OracleSqlFactory.java"/>
            <exclude name="**/OracleSqlFactory.java"/>
            <exclude name="**/soap/**"/>   <!-- Comment out to activate SOAP driver -->
         </fileset>
      </copy>

      <copy file="./config/manifest.xmlBlaster" tofile="${build.dest}/manifest.xmlBlaster"/>
      <copy file="./config/xmlBlaster.policy" tofile="${build.dest}/xmlBlaster.policy" filtering="true"/>
      <copy file="${src.java.dir}/org/xmlBlaster/AppIcon.gif" tofile="${build.dest}/org/xmlBlaster/AppIcon.gif"/>
      <copy file="./config/jacorb.properties.template" tofile="${build.dest}/jacorb.properties" filtering="true"/>
      <copy file="./config/xmlBlaster.properties.template" tofile="${build.dest}/xmlBlaster.properties" filtering="true"/>
      <copy verbose="true" file="${soap.dir}/service.xml" tofile="${build.dest}/service.xml"/>

      <javac srcdir="${build.src}/xmlBlaster"
            destdir="${build.dest}"
            classpath="${cp}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}"
            target="${JVM.target}" />

      <!-- javac srcdir="${req.dir}" destdir="${build.dest}" classpath="${cp}" / -->

      <rmic classname="org.xmlBlaster.client.protocol.rmi.RmiCallbackServer" base="${build.dest}" />
      <rmic classname="org.xmlBlaster.protocol.rmi.AuthServerImpl" base="${build.dest}" />
      <rmic classname="org.xmlBlaster.protocol.rmi.XmlBlasterImpl" base="${build.dest}" />

      <!-- include content of jutils.jar in xmlBlaster.jar -->
      <unjar src="${lib.dir}/jutils.jar" dest="${build.dest}"/>

      <jar destfile="${build.dir}/${name}.jar" manifest="${build.dest}/manifest.xmlBlaster" basedir="${build.dest}"
           includes="org/**,xmlBlaster.policy,*.gif,doc/requirements/*,*.properties,manifest.xmlBlaster,*.xml"/>

      <copy file="${build.dir}/${name}.jar" tofile="${lib.dir}/${name}.jar"/>

      <echo message="Creating ${soapdeploy.dir}/webservices/${name}.sar"/>
      <mkdir dir="${soapdeploy.dir}/webservices"/>
      <jar destfile="${soapdeploy.dir}/webservices/${name}.sar" manifest="${build.dest}/manifest.xmlBlaster"
           basedir="${build.dest}"
           includes="org/**/soap/*,service.xml"/>
   </target>

   <!-- =================================================================== -->
   <!-- Compiles the xmlBlaster demo source directory                       -->
   <!-- =================================================================== -->
   <target name="demo" depends="xmlBlaster" description="Compile the xmlBlaster demo clients">   <!-- XmlRpcHttpClient.java !!! away again when it compiles -->
      <copy todir="${build.src}/demo">
         <fileset dir="${demo.dir}">
            <exclude name="**/README*"/>
            <exclude name="**/Makefile"/>
            <exclude name="c/**"/>
            <exclude name="c++/**"/>
            <exclude name="perl/**"/>
            <exclude name="php/**"/>
            <exclude name="python/**"/>
            <exclude name="**/*.html"/>
            <exclude name="**/*.php"/>
            <exclude name="**/*.inc"/>
            <exclude name="**/*.ldif"/>
            <exclude name="**/*.pl"/>
            <exclude name="**/*.py"/>
            <exclude name="**/XmlRpcHttpClient.java"/>
            <exclude name="javaclients/HelloWorld.java"/>
            <exclude name="javaclients/HelloWorld2.java"/>
            <exclude name="javaclients/HelloWorld3.java"/>
            <exclude name="javaclients/HelloWorld4.java"/>
            <exclude name="javaclients/HelloWorld5.java"/>
            <exclude name="javaclients/HelloWorld6.java"/>
            <exclude name="javaclients/HelloWorldMime.java"/>
            <exclude name="javaclients/HelloWorldVolatile.java"/>
            <exclude name="javaclients/HelloWorldVolatile2.java"/>
            <exclude name="javaclients/Latency.java"/>
            <exclude name="javaclients/PtpReceive.java"/>
            <exclude name="javaclients/PtpSend.java"/>
            <exclude name="queryXML/**"/>
         </fileset>
      </copy>

      <!-- This is because of the files do not have any package declaration in it. -->
      <!-- See the exclude in the copy statement above. -->
      <!-- Ant compiles all classes, even if they are up to date, if they are not -->
      <!-- residing in the path where they belong to regarding to their packet instruction. -->
      <copy todir="${build.src}/demo">
         <fileset dir="${demo.java.dir}">
            <include name="HelloWorld.java"/>
            <include name="HelloWorld2.java"/>
            <include name="HelloWorld3.java"/>
            <include name="HelloWorld4.java"/>
            <include name="HelloWorld5.java"/>
            <include name="HelloWorld6.java"/>
            <include name="HelloWorldMime.java"/>
            <include name="HelloWorldVolatile.java"/>
            <include name="HelloWorldVolatile2.java"/>
            <include name="Latency.java"/>
            <include name="PtpReceive.java"/>
            <include name="PtpSend.java"/>
         </fileset>
      </copy>

      <copy todir="${build.src}/demo">
         <fileset dir="${demo.dir}/queryXML">
            <include name="DomQueryTest.java"/>
            <include name="XtOmQueryTest.java"/>
            <include name="Agent.xml"/>
            <include name="AgentBig.xml"/>
         </fileset>
      </copy>



      <copy file="${src.java.dir}/org/xmlBlaster/AppIcon.gif" todir="${build.dest}/javaclients/simplereader"/>
      <copy file="${demo.java.dir}/simplereader/blue.gif" todir="${build.dest}/javaclients/simplereader"/>
      <copy file="${demo.java.dir}/simplereader/red.gif" todir="${build.dest}/javaclients/simplereader"/>

      <javac srcdir="${build.src}/demo"
            destdir="${build.dest}"
            classpath="${cp}:${lib.dir}/${name}.jar"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}"
            target="${JVM.target}" />
      <jar destfile="${build.dir}/demo.jar" basedir="${build.dest}" includes="javaclients/**/*.class,http/**/*.class,Hello*,Ptp*,Latency*,DomQuery*,javaclients/**/*.gif"/>
      <copy file="${build.dir}/demo.jar" tofile="${lib.dir}/demo.jar"/>
   </target>

   <!-- =================================================================== -->
   <!-- Compiles the xmlBlaster, demo, and  testsuite source directories    -->
   <!-- =================================================================== -->
   <target name="all" depends="xmlBlaster,demo,testsuite" description="Compile xmlBlaster server, demo clients and testsuite clients">
   <!--target name="all" depends="prepare-src"-->
      <delete file="${lib.dir}/demo.jar"/>
      <delete file="${lib.dir}/testsuite.jar"/>
      <delete file="${build.dir}/${name}.jar"/>
      <jar destfile="${build.dir}/${name}.jar" manifest="${build.dest}/manifest.xmlBlaster" basedir="${build.dest}"
           includes="org/**/*.*,javaclients/**/*.class,javaclients/**/*.gif,http/**/*.class,html/systemInfo/*.class,xmlBlaster.policy,*.gif,*.properties,Hello*,Ptp*,Latency*,DomQuery*,doc/requirements/*"/>
      <copy file="${build.dir}/${name}.jar" tofile="${lib.dir}/${name}.jar"/>
   </target>

   <!-- =================================================================== -->
   <!-- Compiles the xmlBlaster testsuite source directory                  -->
   <!-- =================================================================== -->
   <target name="testsuite" depends="xmlBlaster,testsuite-only" description="Compile Java testsuite into testsuite.jar (based on junit) and xmlBlaster before">
   </target>
   <target name="testsuite-only" description="Compile Java testsuite only into testsuite.jar (based on junit)">
      <copy todir="${build.src}/testsuite/src/java/org" filtering="true">
         <fileset dir="${testsuite.dir}/src/java/org">
            <exclude name="README, Makefile"/>
            <exclude name="Makefile"/>
         </fileset>
      </copy>
      <javac srcdir="${build.src}/testsuite/src/java"
            destdir="${build.dest}"
            classpath="${cp}:${lib.dir}/${name}.jar"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}"
            target="${JVM.target}" />
      <jar destfile="${build.dir}/testsuite.jar" basedir="${build.dest}" includes="org/xmlBlaster/test/**"/>
      <copy file="${build.dir}/testsuite.jar" tofile="${lib.dir}/testsuite.jar"/>
   </target>
   <!-- =================================================================== -->
   <!-- Builds the JBoss embeddable XmlBlaster MBean                        -->
   <!-- =================================================================== -->
   <target name="jboss-sar" depends="xmlBlaster">
      <mkdir dir="${build.dir}/sar"/>
      <copy file="./config/xmlBlaster-jmx.properties.template" tofile="${build.dir}/sar/xmlBlaster.properties" filtering="true"/>
     <jar destfile="${build.dir}/xmlBlaster.sar">
       <zipfileset dir="${src.java.dir}/org/xmlBlaster/j2ee/jmx/"
                   includes="jboss-service.xml"
                   prefix="META-INF"/>
       <fileset dir="${build.dir}"
                includes="xmlBlaster.jar"
        />
        <fileset dir="${lib.dir}"
                includes="activation.jar,idl.jar,jacorb.jar,omquery.jar,xtdash.jar,remotecons.jar,jax.jar,concurrent.jar,jaxp.jar,parser.jar, xmlrpc.jar,gnu-regexp.jar,tinySQL.jar"
        />
       <fileset dir="${build.dir}/sar"
                includes="xmlBlaster.properties"
        />
     </jar>

     <ear destfile="${build.dir}/xmlBlaster-sar.ear" appxml="${src.java.dir}/org/xmlBlaster/j2ee/jmx/application.xml">
         <zipfileset dir="${src.java.dir}/org/xmlBlaster/j2ee/jmx/"
                   includes="jboss-app.xml"
                   prefix="META-INF"/>
         <fileset dir="${build.dir}/"
                includes="xmlBlaster.sar"
        />
     </ear>
     <copy file="${build.dir}/xmlBlaster-sar.ear" tofile="${lib.dir}/xmlBlaster-sar.ear"/>
     <delete dir="${build.dir}/sar"/>
   </target>
   <!-- =================================================================== -->
   <!-- Builds the J2EE XmlBlaster resource adapter, with example bean      -->
   <!-- =================================================================== -->
   <target name="k2" depends="xmlBlaster">
      <!-- Pack rar archive -->
      <!-- create tmp dir to build it up -->
      <mkdir dir="${build.dir}/ra"/>
      <mkdir dir="${build.dir}/ra/META-INF"/>
      <copy file="${build.dir}/xmlBlaster.jar"  toFile="${build.dir}/ra/xmlBlaster.jar"/>
      <copy file="${lib.dir}/jacorb.jar"  toFile="${build.dir}/ra/jacorb.jar"/>
      <copy file="${src.java.dir}/org/xmlBlaster/j2ee/k2/ra.xml" toFile="${build.dir}/ra/META-INF/ra.xml"/>
<!-- Ad propertyfile to build by uncommenting this
       <copy file="${src.java.dir}/org/xmlBlaster/j2ee/k2/blasterk2.properties" toFile="${build.dir}/ra/blasterk2.properties"/>
-->
      <jar destfile="${build.dir}/xmlBlasterK2.rar" basedir="${build.dir}/ra" includes="**"/>
      <copy file="${build.dir}/xmlBlasterK2.rar" tofile="${lib.dir}/xmlBlasterK2.rar"/>
      <delete dir="${build.dir}/ra"/>
   </target>
   <!-- =================================================================== -->
   <!-- Builds the J2EE XmlBlaster resource adapter example bean      -->
   <!-- =================================================================== -->
   <target name="jms-adapter" depends="k2" description="Builds the J2EE XmlBlaster resource adapter example bean">
      <!-- Pack rar archive -->
      <!-- create tmp dir to build it up -->
      <mkdir dir="${build.dir}/jms"/>
      <mkdir dir="${build.dir}/jms/META-INF"/>
      <mkdir dir="${build.dir}/jms/javaclients/j2ee/k2/"/>
      <copy file="${demo.java.dir}/j2ee/k2/JmsAdapter.java" toFile="${build.src}/javaclients/j2ee/k2/JmsAdapter.java"/>
      <copy file="${demo.java.dir}/j2ee/k2/JmsAdapter-ejb-jar.xml" toFile="${build.dir}/jms/META-INF/ejb-jar.xml"/>
      <copy file="${demo.java.dir}/j2ee/k2/JmsAdapter-jboss-ejb-jar.xml" toFile="${build.dir}/jms/META-INF/jboss.xml"/>


      <javac srcdir="${build.src}/javaclients/j2ee/k2/"
            destdir="${build.dest}"
            classpath="${cp}:${lib.dir}/${name}.jar"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}"
            target="${JVM.target}" />

      <jar destfile="${build.dir}/JmsAdapter.jar">
         <fileset dir="${build.dest}" includes="**/JmsAdapter.class"/>
         <fileset dir="${build.dir}/jms"/>
      </jar>

      <copy overwrite="yes" file="${build.dir}/JmsAdapter.jar" tofile="${lib.dir}/JmsAdapter.jar"/>
      <delete dir="${build.dir}/jms"/>
   </target>

   <!-- =================================================================== -->
   <!-- Creates a web archive (.war) to deploy to a modern servlet engine   -->
   <!-- =================================================================== -->
   <target name="deploy_war" depends="prepare" description="Creates a web archive (.war) to deploy to a modern servlet engine">
      <echo message="Please run 'build.sh all' before if you have changed some code"/>
      <mkdir dir="${build.war}"/>
      <copy file="${doc.dir}/howto/xmlBlaster.css" tofile="${build.war}/xmlBlaster.css"/>
      <copy file="${WEB-INF}/web.xml" tofile="${build.war}/WEB-INF/web.xml"/>
      <copy todir="${build.war}/WEB-INF/classes/org/xmlBlaster/protocol/http">
        <fileset dir="${build.dest}/org/xmlBlaster/protocol/http"/>
      </copy>
      <copy todir="${build.war}/WEB-INF/classes/http">
         <fileset dir="${build.dest}/http"/>
      </copy>
      <copy file="${lib.dir}/jacorb.jar" tofile="${build.war}/WEB-INF/lib/jacorb.jar"/>
      <copy file="${lib.dir}/xmlBlaster.jar" tofile="${build.war}/WEB-INF/lib/xmlBlaster.jar"/>
      <copy file="${lib.dir}/parser.jar" tofile="${build.war}/WEB-INF/lib/parser.jar"/>

      <!-- unjar src="${lib.dir}/jacorb.jar" dest="${build.war}/WEB-INF/classes" />
      <unjar src="${lib.dir}/xmlBlaster.jar" dest="${build.war}/WEB-INF/classes" />
      <unjar src="${lib.dir}/parser.jar" dest="${build.war}/WEB-INF/classes" / -->

      <copy todir="${build.war}/javascript">
         <fileset dir="${src.java.dir}/org/xmlBlaster/protocol/http/javascript"/>
      </copy>
      <copy todir="${build.war}/persistentWindow">
         <fileset dir="${src.java.dir}/org/xmlBlaster/protocol/http/persistentWindow"/>
      </copy>
      <copy file="${demo.http.dir}/index.html" tofile="${build.war}/index.html"/>
      <copy file="${demo.http.dir}/README" tofile="${build.war}/README"/>
      <copy todir="${build.war}/images">
         <fileset dir="${demo.http.dir}/images"/>
      </copy>
      <copy todir="${build.war}/dhtml">
         <fileset dir="${demo.http.dir}/dhtml"/>
      </copy>
      <copy todir="${build.war}/svg">
         <fileset dir="${demo.http.dir}/svg"/>
      </copy>

      <jar destfile="${build.dir}/xmlBlaster.war"
           basedir="${build.war}/"
           includes="**"/>

      <copy file="${lib.dir}/${name}.jar" tofile="${WWW_ROOT}/../lib/xmlBlaster.jar"/>
      <delete dir="${WWW_ROOT}/xmlBlaster"/>
      <delete file="${WWW_ROOT}/xmlBlaster.war"/>
      <copy file="${build.dir}/xmlBlaster.war" tofile="${WWW_ROOT}/xmlBlaster.war"/>
      <!-- unjar src="${WWW_ROOT}/xmlBlaster.war" dest="${WWW_ROOT}" /-->

      <echo message=""/>
      <echo message="   Start xmlBlaster and a demo data publisher:"/>
      <echo message="      java org.xmlBlaster.Main -xmlrpc.port 8089    (we switch port to allow tomcat on 8080)"/>
      <echo message="      java http.dhtml.systemInfo.SystemInfoPublisher"/>
      <echo message=""/>
      <echo message="   Start tomcat and invoke the demo with:"/>
      <echo message="      tomcat.sh start"/>
      <echo message="      http://HOSTNAME:8080/xmlBlaster/dhtml/systemInfo/systemInfo.html?ActionType=login&amp;xmlBlaster.loginName=karl&amp;xmlBlaster.passwd=secret"/>
   </target>

   <!-- =================================================================== -->
   <!-- starts xmlBlaster and blocks                                        -->
   <!-- =================================================================== -->
   <target name="startXmlBlasterServer" description="Start xmlBlaster">
      <java classname="org.xmlBlaster.Main" classpath="lib/xmlBlaster.jar" dir="." failonerror="true" fork="true">
         <sysproperty key="java.compiler" value="NONE"/>
         <arg line="-info true"/>
         <arg line="-useKeyboard false"/>
      </java>
   </target>

   <!-- =================================================================== -->
   <!-- run junit test testcases                                            -->
   <!-- =================================================================== -->
   <target name="runJunit" description="Run all JUnit tests">
      <delete dir="${report.dir}"/>
      <delete dir="${report.dir}/html"/>
      <mkdir dir="${report.dir}"/>
      <mkdir dir="${report.dir}/html"/>
      <echo message="Executing the testsuite"/>
      <echo message="  hint: if the script halts here you've most probably not added junit.jar to your ant/lib"/>
      <junit dir="testsuite/src/java/org/xmlBlaster/test"
             printsummary="on" haltonfailure="off"
             haltonerror="off" showoutput="on" fork="yes">
         <formatter type="xml"/>
         <jvmarg value="-Djava.compiler=NONE"/>
         <jvmarg value="-Xmx256m"/>
         <classpath>
            <pathelement path="lib/xmlBlaster.jar:${cp}"/>
         </classpath>
         <!-- test name="org.xmlBlaster.test.classtest.AllTests" fork="yes" todir="${report.dir}"/
         <test name="org.xmlBlaster.test.AllTests" fork="yes" todir="${report.dir}"/>
 -->
          <test name="${test.class}" fork="yes" todir="${report.dir}"/>
      </junit>
      <echo message="See ${report.dir} for results"/>
      <echo message="Invoke target 'report' for HTML report generation"/>
   </target>

   <!-- =================================================================== -->
   <!-- starts xmlBlaster and the junit tests                               -->
   <!-- =================================================================== -->
   <target name="runTests" description="Start xmlBlaster (in blocking mode) and run Junit">
      <parallel>
         <antcall target="startXmlBlasterServer"/>  <!-- blocks -->
         <sequential>
            <sleep seconds="5"/>                    <!-- wait 5 sec for xmlBlaster startup -->
            <antcall target="runJunit"/>            <!-- run Junit tests -->
         </sequential>
      </parallel>
   </target>

   <!-- =================================================================== -->
   <!-- Creates a test report with junit                                    -->
   <!-- =================================================================== -->
   <target name="report" description="Creates a HTML test report with junit">
      <property name="report.dir" value="./doc/test/report"/>
      <echo message="Creating report to ${report.dir} ..."/>
      <echo message="NOTE: If the report generation halts here you've probably not added xalan.jar to your classpath"/>
      <junitreport todir="${report.dir}">
         <fileset dir="${report.dir}">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="noframes" todir="${report.dir}/html"/>
      </junitreport>
      <!-- echo message="Viewing the report ..."/>
      <exec dir="${report.dir}/html" executable="junit-noframes.html" os="Windows XP" vmlauncher="false"/>
      <exec dir="${report.dir}/html" executable="junit-noframes.html" os="Windows 2000" vmlauncher="false"/>
      <exec dir="${report.dir}/html" executable="mozilla" os="Linux" vmlauncher="false">
         <arg line="${report.dir}/html/junit-noframes.html"/>
      </exec -->
   </target>

   <!-- =================================================================== -->
   <!-- Note that sometimes xmlBlaster does not stop completely             -->
   <!-- because of xmlrpc does not stop listener thread proper              -->
   <!-- Than you need to start the report manually                          -->
   <!-- =================================================================== -->
   <target name="runTestsAndReport" depends="runTests,report" description="Does runTests and report in one step"/>

   <!-- =================================================================== -->
   <!-- Creates complete documentation                                      -->
   <!-- =================================================================== -->
   <target name="docs" depends="xmlBlaster,javadocs,html,requirements,whitepaper" description="Creates the complete documentation (javadoc, source-html, requirements>">
   </target>
   <target name="docs-delete" depends="javadocs-delete,html-delete,requirements-delete,whitepaper-delete" description="Remoces all documentation (javadoc, source-html, requirements>">
   </target>

   <!-- =================================================================== -->
   <!-- Creates the javadoc documentation                                   -->
   <!-- =================================================================== -->
   <target name="javadocs" description="Creates the complete javadoc documentation">
      <echo message="Creating javadoc documentation"/>
      <mkdir dir="${javadoc.dir}"/>
      <javadoc packagenames="org.xmlBlaster.*,javaclients"
               sourcepath="${src.java.dir}:${testsuite.java.dir}:${demo.java.dir}"
               excludepackagenames="org.xmlBlaster.protocol.soap,org.xmlBlaster.client.protocol.soap"
               classpath="${cp}"
               destdir="${javadoc.dir}"
               author="true"
               version="true"
               use="true"
               windowtitle="xmlBlaster ${version} API"
               doctitle="&lt;h1&gt;xmlBlaster API&lt;/h1&gt;"
               bottom="Copyright &#169; ${year} The xmlBlaster.org contributers." />
      <!-- javadoc does not like missing package names in demo.dir:  sourcepath="${src.java.dir}:${testsuite.java.dir}:${demo.dir}:${demo.java.dir}" -->
   </target>
   <target name="javadocs-delete" description="Removes the javadoc documentation">
      <delete dir="${javadoc.dir}" failonerror="false"/>
   </target>

   <!-- =================================================================== -->
   <!-- Creates a html view from each source file                           -->
   <!-- code2html by Peter Palfrader http://www.palfrader.org/code2html     -->
   <!-- =================================================================== -->
   <target name="html" description="Creates a html view from each source file in the same directory">
      <echo message="Creating html files from each found source file in any programming language"/>
      <apply dir="." executable="bin/code2html" failonerror="false" parallel="false" dest=".">
         <arg value="--linknumbers"/>
         <arg value="--replace-tabs=3"/>
         <arg value="--fallback=cpp"/> <!-- xmlBlaster.idl as c++, java is recognized automatically -->
         <srcfile/>
         <targetfile/>
         <fileset dir=".">
            <patternset>
               <include name="**/*.idl"/>
               <include name="**/*.java"/>
               <include name="**/*.cpp"/>
               <include name="**/*.c"/>
               <include name="**/*.h"/>
               <include name="**/*.hpp"/>
               <include name="**/*.pl"/>
               <include name="**/*.pm"/>
               <include name="**/*.perl"/>
               <include name="**/*.py"/>
               <include name="**/*.python"/>
               <include name="**/*.php"/>
               <include name="**/*.inc"/>
               <include name="**/*.js"/>
               <include name="**/*.tcl"/>
               <exclude name="build/**"/>
               <exclude name="classes/**"/>
            </patternset>
         </fileset>
         <mapper type="glob" from="*" to="*.html"/>
      </apply>
   </target>
   <target name="html-delete" description="Removes html files generated from each source file">
      <echo message="Deleting html files from each found source"/>
      <delete>
         <fileset dir=".">
            <patternset>
               <include name="**/*.idl.html"/>
               <include name="**/*.java.html"/>
               <include name="**/*.cpp.html"/>
               <include name="**/*.c.html"/>
               <include name="**/*.hpp.html"/>
               <include name="**/*.pl.html"/>
               <include name="**/*.pm.html"/>
               <include name="**/*.perl.html"/>
               <include name="**/*.py.html"/>
               <include name="**/*.python.html"/>
               <include name="**/*.php.html"/>
               <include name="**/*.inc.html"/>
               <include name="**/*.js.html"/>
               <include name="**/*.tcl.html"/>
            </patternset>
         </fileset>
      </delete>
   </target>

   <!-- =================================================================== -->
   <!-- Creates html requirements from doc/requirements/ XML files          -->
   <!-- =================================================================== -->
    <target name="requirements" description="Creates html requirements from doc/requirements/ XML files">
      <!-- create the all.xml file for overview -->
      <fileset id="req.files"
        dir="${req.dir}"
        excludes="all.xml"
        includes="*.xml"/>
      <property name="url.start" value=" &lt;url>"/>
      <property name="url.end " value=""/>
      <pathconvert  targetos="windows" dirsep="/" pathsep="&lt;/url>&lt;url>" property="files" refid="req.files">
        <map from="${base.dir}/doc/requirements/" to="&lt;url>"/>
      </pathconvert>
      <echo file="${req.dir}/all.xml"><![CDATA[<files><url>${files}</url></files>]]></echo>
      <!-- Create the overview -->
      <style processor="trax" basedir="${req.dir}"
             in="${req.dir}/all.xml"
             out="${req.dir}/requirement.html"
             extension=".html" style="${req.dir}/overview.xsl"
             force="true">
       </style>
      <!-- generate each req -->
      <style processor="trax" basedir="${req.dir}"
             destdir="${req.dir}"
             extension=".html" style="${req.dir}/detail.xsl"
             includes="*.xml"
             excludes= "all.xml"
             force="true">
       </style>
   </target>
   <target name="requirements-delete" description="Removes html requirements">
      <echo message="Deleting all requirement html pages"/>
      <delete>
         <fileset dir="doc/requirements">
            <patternset>
               <include name="**/*.html"/>
               <exclude name="**/package.html"/>
            </patternset>
            <patternset>
               <include name="all.xml"/>
            </patternset>
         </fileset>
      </delete>
   </target>


   <!-- =================================================================== -->
   <!-- Creates html whitepaper with docbook                                -->
   <!-- =================================================================== -->
   <target name="whitepaper" description="Creates html whitepaper doc/whitepaper XML file">
      <property name="docbook.dir" value="/opt/docbook"/>
      <!-- html -->
      <echo message="Creating whitepaper html variant (excepting docbook under ${docbook.dir})"/>
      <java classname="com.jclark.xsl.sax.Driver" classpath="${cp}" dir="${doc.dir}/whitepaper" failonerror="false" fork="true">
         <sysproperty key="com.jclark.xsl.sax.parser" value="com.jclark.xsl.dom.SunXMLProcessorImpl"/>
         <arg line="whitepaper.xml ${docbook.dir}/html/docbook.xsl whitepaper.html"/>
      </java>
      <!-- pdf -->
      <echo message="Creating whitepaper pdf variant (excepting docbook formatting objects under ${docbook.dir}/fo and apache fop in CLASSPATH)"/>
      <java classname="com.jclark.xsl.sax.Driver" classpath="${cp}" dir="${doc.dir}/whitepaper" failonerror="false" fork="true">
         <sysproperty key="com.jclark.xsl.sax.parser" value="com.jclark.xsl.dom.SunXMLProcessorImpl"/>
         <arg line="whitepaper.xml ${docbook.dir}/fo/docbook.xsl whitepaper.fo"/>
      </java>
      <java classname="org.apache.fop.apps.CommandLine" classpath="${cp}" dir="${doc.dir}/whitepaper" failonerror="false" fork="true">
         <sysproperty key="org.xml.sax.parser" value="com.sun.xml.parser.Parser"/>
         <arg line="whitepaper.fo whitepaper.pdf"/>
      </java>
   </target>
   <target name="whitepaper-delete" description="Removes html whitepaper">
      <echo message="Deleting whitepaper"/>
      <delete>
         <fileset dir="doc/whitepaper">
            <patternset>
               <include name="**/*.html,**/*.fo,**/*.pdf"/>
            </patternset>
         </fileset>
      </delete>
   </target>

   <!-- =================================================================== -->
   <!-- Creates the distribution                                            -->
   <!-- =================================================================== -->
   <target name="dist" depends="delete,all,dist-only" description="Creates a server distribution for deployment (see usage)"/>
   <target name="dist-only" depends="" description="">
      <delete dir="${dist.dir}"/>
      <delete dir="${dist-classes.dir}"/>

      <mkdir dir="${dist.dir}"/>
      <mkdir dir="${dist.dir}/bin"/>
      <mkdir dir="${dist.dir}/lib"/>

      <mkdir dir="${dist-classes.dir}"/>

      <property name="DIST_PATH" value="."/>
      <property name="ADD_EMAIL" value="true"/>
      <property name="ADD_CORBA" value="true"/>
      <property name="ADD_XMLRPC" value="true"/>
      <property name="ADD_J2EE" value="false"/>
      <property name="ADD_SNMP" value="false"/>
      <property name="ADD_TINYSQL" value="false"/>
      <property name="ADD_XML_PARSER" value="true"/>
      <property name="ADD_PROP" value="default"/> <!-- e.g. -DADD_PROP=myclient/xmlBlaster.properties (to configure MoM) -->
      <property name="ADD_POLICY" value="default"/> <!-- e.g. -DADD_POLICY=myclient/xmlBlaster.policy (for RMI security) -->
      <property name="ADD_DIRECTORY" value="false"/>  <!-- e.g. -DADD_DIRECTORY=myclient/classes -->

      <mkdir dir="${DIST_PATH}/lib"/>

      <unjar src="${lib.dir}/${name}.jar" dest="${dist-classes.dir}" />
      <unjar src="${lib.dir}/concurrent.jar" dest="${dist-classes.dir}" />
      <unjar src="${lib.dir}/gnu-regexp.jar" dest="${dist-classes.dir}" />
      <unjar src="${lib.dir}/jutils.jar" dest="${dist-classes.dir}" />
      <unjar src="${lib.dir}/miniJacorb.jar" dest="${dist-classes.dir}" />
      <unjar src="${lib.dir}/omquery.jar" dest="${dist-classes.dir}" />
      <unjar src="${lib.dir}/xtdash.jar" dest="${dist-classes.dir}" />
      <unjar src="${lib.dir}/remotecons.jar" dest="${dist-classes.dir}" />

      <switch value="${ADD_EMAIL}">
         <case value="true">
            <echo message="Adding activation.jar/mail.jar for EMAIL support" />
            <unjar src="${lib.dir}/activation.jar" dest="${dist-classes.dir}" />
            <unjar src="${lib.dir}/mail.jar" dest="${dist-classes.dir}" />
         </case>
         <default>
            <echo message="ADD_EMAIL=${ADD_EMAIL}: No EMAIL support added." />
         </default>
      </switch>
      <switch value="${ADD_CORBA}">
         <case value="true">
            <echo message="Adding ${lib.dir}/jacorb.jar for CORBA support" />
            <unjar src="${lib.dir}/jacorb.jar" dest="${dist-classes.dir}" />
            <unjar src="${lib.dir}/miniJacorb.jar" dest="${dist-classes.dir}" />
         </case>
         <default>
            <echo message="ADD_CORBA=${ADD_CORBA}: No CORBA support added." />
         </default>
      </switch>
      <switch value="${ADD_XMLRPC}">
         <case value="true">
            <echo message="Adding ${lib.dir}/xmlrpc.jar for XML-RPC support" />
            <unjar src="${lib.dir}/xmlrpc.jar" dest="${dist-classes.dir}" />
         </case>
         <default>
            <echo message="ADD_XMLRPC=${ADD_XMLRPC}: No XML-RPC support added." />
         </default>
      </switch>
      <switch value="${ADD_J2EE}">
         <case value="true">
            <echo message="Adding ${lib.dir}/jaas.jar for JMS support" />
            <unjar src="${lib.dir}/connector.jar" dest="${dist-classes.dir}" />
            <unjar src="${lib.dir}/ejb2.0.jar" dest="${dist-classes.dir}" />
            <unjar src="${lib.dir}/jaas.jar" dest="${dist-classes.dir}" />
            <unjar src="${lib.dir}/jaxp.jar" dest="${dist-classes.dir}" />
            <unjar src="${lib.dir}/jms.jar" dest="${dist-classes.dir}" />
            <unjar src="${lib.dir}/jndi-jdk1_3_1.jar" dest="${dist-classes.dir}" />
            <unjar src="${lib.dir}/jta-spec1_0_1.jar" dest="${dist-classes.dir}" />
         </case>
         <default>
         </default>
      </switch>
      <switch value="${ADD_SNMP}">
         <case value="true">
            <echo message="Adding ${lib.dir}/jax.jar for SNMP support" />
            <unjar src="${lib.dir}/jax.jar" dest="${dist-classes.dir}" />
         </case>
         <default>
            <echo message="ADD_SNMP=${ADD_SNMP}: No SNMP support added." />
         </default>
      </switch>
      <switch value="${ADD_TINYSQL}">
         <case value="true">
            <echo message="Adding ${lib.dir}/tinySQL.jar for JDBC-dBase support" />
            <unjar src="${lib.dir}/tinySQL.jar" dest="${dist-classes.dir}" />
         </case>
         <default>
            <echo message="ADD_TINYSQL=${ADD_TINYSQL}: No JDBC-dBase support added." />
         </default>
      </switch>
      <switch value="${ADD_XML_PARSER}">
         <case value="true">
            <echo message="Adding ${lib.dir}/parser.jar and ${lib.dir}/jaxp.jar XML parser" />
            <unjar src="${lib.dir}/parser.jar" dest="${dist-classes.dir}" />
            <unjar src="${lib.dir}/jaxp.jar" dest="${dist-classes.dir}" />
         </case>
         <default>
            <echo message="ADD_XML_PARSER=${ADD_XML_PARSER}: No XML parser added, we assume you supply one yourself!" />
         </default>
      </switch>
      <switch value="${ADD_PROP}">
         <case value="default">
            <echo message="Using default xmlBlaster.properties" />
            <copy file="config/xmlBlaster.properties.template" tofile="${dist-classes.dir}/xmlBlaster.properties"/>
            <copy file="config/xmlBlaster.properties.template" tofile="${dist.dir}/config/xmlBlaster.properties.template" overwrite="yes"/>
         </case>
         <default>
            <echo message="Using ${ADD_PROP}" />
            <copy file="${ADD_PROP}" tofile="${dist-classes.dir}/xmlBlaster.properties" overwrite="yes"/>
            <copy file="${ADD_PROP}" tofile="${dist.dir}/config/xmlBlaster.properties.template" overwrite="yes"/>
         </default>
      </switch>
      <switch value="${ADD_POLICY}">
         <case value="default">
            <echo message="Using default xmlBlaster.policy" />
            <copy file="config/xmlBlaster.policy" tofile="${dist-classes.dir}/xmlBlaster.policy"/>
            <copy file="config/xmlBlaster.policy" tofile="${dist.dir}/config/xmlBlaster.policy"/>
         </case>
         <default>
            <echo message="Using ${ADD_POLICY}" />
            <copy file="${ADD_POLICY}" tofile="${dist-classes.dir}/xmlBlaster.policy" overwrite="yes"/>
            <copy file="${ADD_POLICY}" tofile="${dist.dir}/config/xmlBlaster.policy" overwrite="yes"/>
         </default>
      </switch>
      <switch value="${ADD_DIRECTORY}">
         <case value="false">
         </case>
         <default>
            <echo message="Adding ${ADD_DIRECTORY}" />
            <copy todir="${dist-classes.dir}">
               <fileset dir="${ADD_DIRECTORY}"/>
            </copy>
         </default>
      </switch>

      <copy file="config/jacorb.properties.template" tofile="${dist-classes.dir}/jacorb.properties" overwrite="yes" preservelastmodified="true"/>

      <copy file="README" tofile="${dist.dir}/README" overwrite="yes" preservelastmodified="true"/>
      <copy file="INSTALL" tofile="${dist.dir}/INSTALL" overwrite="yes" preservelastmodified="true"/>
      <copy file="doc/LICENSE" tofile="${dist.dir}/LICENSE" overwrite="yes" preservelastmodified="true"/>
      <copy file="config/jacorb.properties.template" tofile="${dist.dir}/config/jacorb.properties.template" overwrite="yes" preservelastmodified="true"/>
      <copy file=".bashrc" tofile="${dist.dir}/.bashrc" overwrite="yes" preservelastmodified="true"/>

        <!-- copy wrapper files -->
      <copy file="bin/xmlBlasterd.sh" tofile="${dist.dir}/bin/xmlBlasterd.sh" overwrite="yes" preservelastmodified="true"/>
      <copy file="config/wrapper.conf.template" tofile="${dist.dir}/config/wrapper.conf.template" overwrite="yes" preservelastmodified="true"/>

      <copy file="bin/xmlBlaster.sh" tofile="${dist.dir}/bin/xmlBlaster.sh" overwrite="yes" preservelastmodified="true"/>
      <copy file="bin/ns" tofile="${dist.dir}/bin/ns" overwrite="yes" preservelastmodified="true"/>
      <chmod perm="ug+x">
        <fileset dir="${dist.dir}/bin"/>
      </chmod>

      <delete dir="${dist-classes.dir}/META-INF" failonerror="false"/>

      <property name="zipFile" value="${name}Dist-${version}.zip"/>
      <property name="jarFile" value="${name}Dist.jar"/>

      <!-- Create xmlBlaster/dist/lib/xmlBlaster.jar with ALL classes ...-->
      <delete file="${dist.dir}/lib/${name}.jar" failonerror="false"/>
      <jar destfile="${dist.dir}/lib/${name}.jar" manifest="./config/manifest.xmlBlaster" basedir="${dist-classes.dir}"/>

      <!-- Create xmlBlasterDist-0.79e.zip with everything ...-->
      <delete file="${DIST_PATH}/${zipFile}" failonerror="false"/>
      <zip destfile="${DIST_PATH}/${zipFile}" basedir="${dist.dir}/.."/>

      <!-- Copy xmlBlasterDist.jar containing ALL classes ...-->
      <copy file="${dist.dir}/lib/${name}.jar" tofile="${DIST_PATH}/${jarFile}" overwrite="yes"/>

      <echo message="DONE: Created ${DIST_PATH}/${jarFile} containing all classes only"/>
      <echo message="DONE: Created ${DIST_PATH}/${zipFile} containing the jar, binaries and configs"/>

   </target>

   <!-- =================================================================== -->
   <!-- Creates the distribution for java clients                           -->
   <!-- =================================================================== -->
   <target name="dist-client" depends="delete,all,dist-client-only" description="Create a java client distribution"/>
   <target name="dist-client-only" depends="" description="">
      <mkdir dir="${dist-client.dir}"/>
      <mkdir dir="${dist-client.dir}/lib"/>
      <mkdir dir="${dist-client.dir}/classes"/>

      <property name="DIST_PATH" value="${dist-client.dir}"/>
      <property name="ADD_COLLECTION" value="false"/>
      <property name="ADD_CORBA" value="true"/>
      <property name="ADD_XMLRPC" value="true"/>
      <property name="ADD_SNMP" value="true"/>
      <property name="ADD_XML_PARSER" value="false"/>
      <property name="ADD_PROP" value="false"/> <!-- e.g. -DADD_PROP=myclient/xmlBlaster.properties -->
      <property name="ADD_MANIFEST" value="false"/> <!-- e.g. -DADD_MANIFEST=myclient/manifest.xmlBlaster -->
      <property name="ADD_DIRECTORY" value="false"/>  <!-- e.g. -DADD_DIRECTORY=myclient/classes -->

      <unjar src="${lib.dir}/${name}.jar" dest="${dist-client.dir}/classes" />
      <unjar src="${lib.dir}/jutils.jar" dest="${dist-client.dir}/classes" />

      <switch value="${ADD_CORBA}">
         <case value="true">
            <echo message="Adding ${lib.dir}/jacorb.jar for CORBA support" />
            <unjar src="${lib.dir}/jacorb.jar" dest="${dist-client.dir}/classes" />
            <unjar src="${lib.dir}/miniJacorb.jar" dest="${dist-client.dir}/classes" />
         </case>
         <default>
            <echo message="ADD_CORBA=${ADD_CORBA}: No CORBA support added." />
         </default>
      </switch>
      <switch value="${ADD_XMLRPC}">
         <case value="true">
            <echo message="Adding ${lib.dir}/xmlrpc.jar for XML-RPC support" />
            <unjar src="${lib.dir}/xmlrpc.jar" dest="${dist-client.dir}/classes" />
         </case>
         <default>
            <echo message="ADD_XMLRPC=${ADD_XMLRPC}: No XML-RPC support added." />
         </default>
      </switch>
      <switch value="${ADD_SNMP}">
         <case value="true">
            <echo message="Adding ${lib.dir}/jax.jar for SNMP support" />
            <unjar src="${lib.dir}/jax.jar" dest="${dist-client.dir}/classes" />
         </case>
         <default>
            <echo message="ADD_SNMP=${ADD_SNMP}: No SNMP support added." />
         </default>
      </switch>
      <switch value="${ADD_COLLECTION}">
         <case value="true">
            <echo message="Adding ${lib.dir}/collections.jar for JDK 1.1x support" />
            <unjar src="${lib.dir}/collections.jar" dest="${dist-client.dir}/classes" />
         </case>
         <default>
            <echo message="ADD_COLLECTION=${ADD_COLLECTION}: No java.util collections added, we assume your client runs with JDK 1.2 or better!" />
         </default>
      </switch>
      <switch value="${ADD_XML_PARSER}">
         <case value="true">
            <echo message="Adding ${lib.dir}/parser.jar and ${lib.dir}/jaxp.jar XML parser" />
            <unjar src="${lib.dir}/parser.jar" dest="${dist-client.dir}/classes" />
            <unjar src="${lib.dir}/jaxp.jar" dest="${dist-client.dir}/classes" />
         </case>
         <default>
            <echo message="ADD_XML_PARSER=${ADD_XML_PARSER}: No XML parser added, we assume you supply one yourself!" />
         </default>
      </switch>
      <switch value="${ADD_PROP}">
         <case value="false">
            <echo message="Using default xmlBlaster.properties" />
            <copy file="config/xmlBlaster.properties.template" tofile="${dist-client.dir}/config/xmlBlaster.properties.template" overwrite="yes"/>
            <copy file="config/jacorb.properties.template" tofile="${dist-client.dir}/config/jacorb.properties.template" overwrite="yes"/>
         </case>
         <default>
            <echo message="Using ${ADD_PROP} -> ${dist.dir}/config/*.properties*" />
            <copy file="${ADD_PROP}" tofile="${dist-client.dir}/config/xmlBlaster.properties.template" overwrite="yes"/>
            <copy file="config/jacorb.properties.template" tofile="${dist-client.dir}/config/jacorb.properties.template" overwrite="yes"/>
         </default>
      </switch>
      <switch value="${ADD_MANIFEST}">
         <case value="false">
            <echo message="Using default manifest.xmlBlaster" />
            <copy file="./config/manifest.xmlBlaster" tofile="${dist-client.dir}/config/manifest.xmlBlaster" overwrite="yes"/>
         </case>
         <default>
            <echo message="Using ${ADD_MANIFEST}" />
            <copy file="${ADD_MANIFEST}" tofile="${dist-client.dir}/config/manifest.xmlBlaster" overwrite="yes"/>
         </default>
      </switch>
      <switch value="${ADD_DIRECTORY}">
         <case value="false">
         </case>
         <default>
            <echo message="Adding ${ADD_DIRECTORY}" />
            <copy todir="${dist-client.dir}/classes">
               <fileset dir="${ADD_DIRECTORY}"/>
            </copy>
         </default>
      </switch>

      <delete includeEmptyDirs="true"><fileset dir="${dist-client.dir}/classes" includes="**/META-INF/**"/></delete>
      <!--jar destfile="${dist-client.dir}/lib/xmlBlasterClient.jar" manifest="${dist-client.dir}/config/manifest.xmlBlaster" basedir="${dist-client.dir}/classes"/-->
      <!--Changes done by astelzl@avitech.de DIST_PATH is set in my build-file to copy the xmlBlasterClient.jar to the specified path-->
      <!--Same as dist target-->
      <jar destfile="${DIST_PATH}/lib/xmlBlasterClient.jar" manifest="${dist-client.dir}/config/manifest.xmlBlaster" basedir="${dist-client.dir}/classes"/>
      <!-- delete includeEmptyDirs="true"><fileset dir="${dist-client.dir}/classes" /></delete -->

      <echo message="--------------------------------------------"/>
      <echo message="Created ${dist-client.dir}/lib/xmlBlasterClient.jar"/>
      <echo message="It supports xmlBlaster java clients with the above noted protocols"/>
      <echo message="--------------------------------------------"/>
   </target>


   <!-- =================================================================== -->
   <!-- Prepares env settings for C++ client library compilation            -->
   <!-- =================================================================== -->
   <target name="prepare-cpp" depends="prepare" description="For internal use only, C++ client environment">
      <echo message="Adjust following settings in build.properties if necessary:"/>
      <!-- echo message=" STL_HOME      = ${STL_HOME}"/ -->
      <echo message=" XMLCPP_HOME   = ${XMLCPP_HOME}"/>
      <echo message=" XMLCPP_VER    = ${XMLCPP_VER}"/>
      <echo message=" CORBACPP_HOME = ${CORBACPP_HOME}"/>
      <echo message=" CORBACPP_VER  = ${CORBACPP_VER}"/>
      <echo message=" THREAD_SRC    = ${THREAD_SRC}"/>
      <echo message=" THREAD_INC    = ${THREAD_INC}"/>

      <switch value="${os.family}" caseinsensitive="false">
         <case value="unix">
            <property name="use-gcc" value="true" />
         </case>
         <case value="windows">
            <property name="use-msvc" value="true" />
         </case>
         <default>
         </default>
      </switch>

      <property name="${corba.product}" value="true" /> <!-- Setting e.g. "MICO" or "TAO" to be used in if="" clause below -->
      <echo message=" Setting ${corba.product} = true" />
      <property name="${corba.product},${os.family}" value="true" /> <!-- Setting e.g. "MICO,windows" or "TAO,unix" to be used in if="" clause below -->
      <echo message=" Setting ${corba.product},${os.family} = true" />
   </target>

   <!-- =================================================================== -->
   <!-- Compile xmlBlaster.idl for MICO to create C++ CORBA stubs           -->
   <!-- =================================================================== -->
   <target name="cpp-corba-idl-MICO" description="Compiles xmlBlaster.idl for CORBA C++ clients">
      <!-- C++ compilation needs some OS dependend settings (sorry, but we currently only have UNIX & WINDOWS to test) -->
      <switch value="${os.family}" caseinsensitive="false">
         <case value="unix">
            <property name="idl.cmd" value="${CORBACPP_HOME}/bin/idl" />
         </case>
         <default>
            <property name="idl.cmd" value="${CORBACPP_HOME}/win32-bin/idl" />
         </default>
      </switch>

      <!-- Start IDL compiler to create CORBA stubs -->
      <uptodate property="idlBuild.done" targetfile="${src.cpp.dir}/generated/xmlBlaster.cpp" value="true">
         <srcfiles dir= "${idl.dir}" includes="xmlBlaster.idl"/>
      </uptodate>

      <if><equals arg1="${idlBuild.done}" arg2="true" />
         <then>
            <echo message="IDL stubs and skeletons are up to date" />
         </then>
         <else>
            <echo message="Generating IDL stubs and skeletons for os=${os.family}" />
            <!-- A typical MICO idl CORBA compile:
              /opt/mico/bin/idl - -poa - -c++-suffix cpp - -windows-dll /home/xmlblast/xmlBlaster/src/java/org/xmlBlaster/protocol/corba/xmlBlaster.idl
            -->
            <exec dir="${src.cpp.dir}/generated" executable="${idl.cmd}" failonerror="true" resultproperty="idl.returnvalue">
               <env key="LD_LIBRARY_PATH" path="${CORBACPP_HOME}/lib" /> <!-- Linux -->
               <env key="SHLIB_PATH" path="${CORBACPP_HOME}/lib" />      <!-- HPUX,SOLARIS -->
               <env key="LIBPATH" path="${CORBACPP_HOME}/lib" />         <!-- AIX -->
               <env key="PATH" path="${CORBACPP_HOME}/bin" />
               <arg line="--poa"/>
               <arg line="--c++-suffix cpp"/>
               <arg line="--windows-dll"/>                               <!-- To export from windows DLL -->
               <arg line="../../../${idl.file}"/>
            </exec>
            <!-- exec dir="${src}" executable="${CORBACPP_HOME}/bin/idl" os="Windows 2000" output="dir.txt" -->
            <echo message="IDL compilation returned ${idl.returnvalue}"/>
         </else>
      </if>
   </target>

   <!-- =================================================================== -->
   <!-- Compile xmlBlaster.idl for MICO to create C++ CORBA stubs           -->
   <!-- =================================================================== -->
   <target name="cpp-corba-idl-TAO" description="Compiles xmlBlaster.idl for CORBA C++ clients">
      <!-- C++ compilation needs some OS dependend settings (sorry, but we currently only have UNIX & WINDOWS to test) -->
      <switch value="${os.family}" caseinsensitive="true">
         <case value="unix">
            <property name="idl.cmd" value="${CORBACPP_HOME}/TAO_IDL/tao_idl" />
         </case>
         <default>
            <property name="idl.cmd" value="${CORBACPP_HOME}/../bin/tao_idl.exe" />
         </default>
      </switch>

      <!-- Start IDL compiler to create CORBA stubs -->
      <uptodate property="idlBuild.done" targetfile="${src.cpp.dir}/generated/xmlBlasterC.cpp" value="true">
         <srcfiles dir= "${idl.dir}" includes="xmlBlaster.idl"/>
      </uptodate>

      <if><equals arg1="${idlBuild.done}" arg2="true" />
         <then>
            <echo message="IDL stubs and skeletons are up to date" />
         </then>
         <else>
            <echo message="Generating ${idl.dir}/xmlBlaster.idl stubs and skeletons for os=${os.family}" />
            <!-- A typical MICO idl CORBA compile:
              /opt/mico/bin/idl - -poa - -c++-suffix cpp /home/xmlblast/xmlBlaster/src/java/org/xmlBlaster/protocol/corba/xmlBlaster.idl
            -->
            <exec dir="${src.cpp.dir}/generated" executable="${idl.cmd}" failonerror="true" resultproperty="idl.returnvalue">
               <arg line="-Ge 0 -Wb,pre_include=${xmlBlaster.home}/${src.cpp.dir}/util/XmlBCfg.h -Wb,export_macro=Dll_Export"/>
               <arg line="${xmlBlaster.home}/${idl.dir}/xmlBlaster.idl"/>
            </exec>
            <!-- exec dir="${src}" executable="${CORBACPP_HOME}/bin/idl" os="Windows 2000" output="dir.txt" -->
            <echo message="IDL compilation returned ${idl.returnvalue}"/>
         </else>
      </if>
   </target>

   <!-- =================================================================== -->
   <!-- c++ client integration - create libxmlBlasterClient.sl (so,dll)         -->
   <!-- See http://sourceforge.net/projects/ant-contrib/                    -->
   <!-- =================================================================== -->
   <target name="cpp-lib" depends="prepare-cpp" description="c++ client integration - create libxmlBlasterClient.sl (dll)">

      <echo message="calling ant target cpp-corba-idl-${corba.product} ..." />
      <antcall target="cpp-corba-idl-${corba.product}"/>  <!-- Call e.g. "cpp-corba-idl-MICO" for MICO -->

      <!-- Build a shared library xmlBlasterClient.so, xmlBlasterClient.sl or xmlBlasterClient.dll -->
      <!-- A typical compile:
        g++ -g
            -fpic -I/opt/local/mico/include -DMICO -c /opt/local/xmlBlaster/src/c++/generated/xmlBlaster.cc
       -->
      <!-- A typical shared library link:
        g++ -shared -g
            -o /opt/local/xmlBlaster/lib/libxmlBlasterClient.so.0.79d
            /opt/local/xmlBlaster/src/c++/client/CorbaConnection.o /opt/local/xmlBlaster/src/c++/util/CompatibleCorba.o /opt/local/xmlBlaster/src/c++/util/Log.o /opt/local/xmlBlaster/src/c++/generated/xmlBlaster.o
      -->
      <mkdir dir="${build.dir}/obj"/>

      <echo message="Using ${XMLCPP_HOME}/lib and xerces-c${XMLCPP_VER}" />

      <cc debug="${cpp.debug}" link="shared"
          outfile="${lib.dir}/xmlBlasterClient" objdir="${build.dir}/obj"
          multithreaded="true" exceptions="true">
         <compiler refid="gcc"/>
         <compiler refid="msvc"/>
         <compiler refid="bcc"/>
         <fileset dir="${src.cpp.dir}/generated" includes="**/*.cpp"/>
         <fileset dir="${src.cpp.dir}/util" includes="**/*.cpp" />
         <fileset dir="${src.cpp.dir}/client" includes="**/*.cpp" />
         <fileset dir="${src.cpp.dir}/authentication" includes="**/*.cpp" />
         <fileset dir="${THREAD_SRC}" includes="*.cpp"/>
         <sysincludepath location="${THREAD_INC}" />
         <includepath location="${src.cpp.dir}" />
         <!-- sysincludepath location="${STL_HOME}/stlport" /-->
         <sysincludepath location="${CORBACPP_HOME}" /> <!-- TAO -->
         <sysincludepath location="${CORBACPP_HOME}/.." /> <!-- TAO -->
         <sysincludepath location="${CORBACPP_HOME}/orbsvcs" /> <!-- TAO -->
         <sysincludepath location="${CORBACPP_HOME}/include" /> <!-- MICO -->
         <sysincludepath location="${CORBACPP_HOME}/include/windows" if="windows" /> <!-- MICO necessary for mico on win32 -->
         <sysincludepath location="${XMLCPP_HOME}/src" if="windows" />               <!-- xerces win32 -->
         <sysincludepath location="${XMLCPP_HOME}/src/xercesc" if="windows" />       <!-- Since xerces 1.7.0 that Martin Johnson has -->                  
         <sysincludepath location="${XMLCPP_HOME}/include" />           <!-- xerces 1.6.0 -->
         <sysincludepath location="${XMLCPP_HOME}/include/xercesc" />   <!-- Since xerces 1.7.0 (inclusiv xerces 2.2) -->

         <defineset> <!-- See compiler id="base-msvc" at top of file -->
           <define name="${corba.product}" value="1" />   <!-- "TAO" or "MICO" etc., see client/protocol/corba/CompatibleCorba.h -->
           <define name="WIN32" value="1" if="windows" />        
           <define name="_WINDOWS" value="1" if="windows" />
           <define name="DLL_BUILD" value="1" if="windows" />     <!-- Needed in XmlBCfg.h, sets DLL_Export -->
           <define name="_MBCS" value="1" if="windows" />         <!-- TCHAR == char -->
           <!--define name="_USRDLL" value="1" if="windows" /-->  <!-- Regular DLLs that statically link to MFC only -->
           <!--define name="_WINDLL" value="1" if="windows" /-->  <!-- Regular DLLs that statically link to MFC only -->
           <!-- undefine name="UNWANTEDDEF" / -->                 <!-- example only -->
         </defineset>

         <linker name="gcc"  if="use-gcc" />
         <linker name="msvc" if="use-msvc"> <!-- linker does not support nested switch -->
            <!-- TAO -->
            <fileset dir="${CORBACPP_HOME}/../ace" includes="aced.lib" if="TAO,windows" />
            <fileset dir="${CORBACPP_HOME}/tao" includes="TAOd.lib" if="TAO,windows" />       
            <fileset dir="${CORBACPP_HOME}/tao/PortableServer" includes="TAO_PortableServerd.lib" if="TAO,windows" />
            <fileset dir="${CORBACPP_HOME}/orbsvcs/orbsvcs" includes="TAO_CosNamingd.lib" if="TAO,windows" />

            <!-- libset dir="${STL_HOME}/lib" libs="stlport_gcc" /-->

            <!-- MICO -->
            <libset dir="${CORBACPP_HOME}/win32-bin" libs="mico${CORBACPP_VER},micocoss${CORBACPP_VER}" if="MICO,windows" />
            <libset dir="${CORBACPP_HOME}/win32-bin/lib" libs="mico${CORBACPP_VER},micocoss${CORBACPP_VER}" if="MICO,windows" />
            <syslibset libs="ws2_32" if="MICO,windows" />

            <!-- XERCES XML parser -->
            <libset dir="${XMLCPP_HOME}/lib" libs="xerces-c${XMLCPP_VER}" if="windows" />
         </linker>
         <linker name="bcc"  if="use-bcc" />
      </cc>
   </target>


   <!-- =================================================================== -->
   <!-- c++ client integration - create C++ test clients                     -->
   <!-- See http://sourceforge.net/projects/ant-contrib/                    -->
   <!-- =================================================================== -->
   <!--
      Linux:
        g++ -g -Wall -I/opt/local/mico/include
                     -I/opt/xerces-c-src1_5_1/include
                     -I/home/xmlblast/xmlBlaster/src/c++
                     -DMICO -c TestGet.cpp
        g++ -g -Wall -Wl,-rpath=/home/xmlblast/xmlBlaster/lib -Wl,-rpath=/opt/xerces-c-src1_5_1/lib -Wl,-rpath=/opt/local/mico/lib
                     TestGet.o -o/home/xmlblast/xmlBlaster/testsuite/src/c++/bin/TestGet
                     -L/opt/xerces-c-src1_5_1/lib -lxerces-c1_5_1 -lpthread -ldl
                     -L/opt/local/mico/lib -lmico2.3.6 -lpthread
                     -L/opt/local/mico/lib -lmicocoss2.3.6
                     -L/home/xmlblast/xmlBlaster/lib -lxmlBlasterClient -lstdc++

       Using STLport 4.5.1 gives a problem when linking an executable (on Linux):
           /home/xmlblast/xmlBlaster/lib/libxmlBlasterClient.so: undefined reference to `CORBA::UserException::_print(_STL::basic_ostream<char, _STL::char_traits<char> > &) const'

      Windows:
       set CFLAGS=/c /nologo /D_WINDOWS /GX /GR /TP /MTd  /DMICO=1 /I.  /IE:\mico\include /IE:\mico\include\windows /nologo /D_WINDOWS /IE:\xmlBlaster\src\c++
       cl.exe %CFLAGS% /FoE:\xmlBlaster\build\obj\Log.obj E:\xmlBlaster\src\c++\util\Log.cpp
       cl.exe %CFLAGS% /FoE:\xmlBlaster\build\obj\xmlBlaster.obj E:\xmlBlaster\src\c++\generated\xmlBlaster.cpp
       cl.exe %CFLAGS% /FoE:\xmlBlaster\build\obj\CompatibleCorba.obj E:\xmlBlaster\src\c++\util\CompatibleCorba.cpp
       cl.exe %CFLAGS%  /IE:\xerces-c-src1_6_0\src /IE:\xerces-c-src1_6_0\include /FoE:\xmlBlaster\build\obj\CorbaConnection.obj E:\xmlBlaster\src\c++\client\CorbaConnection.cpp
   -->
   <target name="cpp-test" depends="prepare-cpp" description="Create C++ test clients">
      <foreach list="TestGet,TestSub,TestStringTrim,TestConnectQos,TestEmbeddedServer,TestFailsafe,TestQueue,TestConnect,TestSubXPath,TestRam,TestTimeout,TestTimestamp,TestCorbaDriver,TestThread"
               target="compileCppExe" param="exeName" delimiter="," inheritAll="true">
         <param name="compileCppSourcePath" value="${testsuite.dir}/src/c++" />
      </foreach>
   </target>

   <target name="cpp-demo" depends="prepare-cpp" description="Create C++ demo clients">
      <foreach list="HelloWorld2,PublishDemo,SubscribeDemo,ExternOrb"
               target="compileCppExe" param="exeName" delimiter="," inheritAll="true">
         <param name="compileCppSourcePath" value="${demo.dir}/c++" />
      </foreach>
   </target>

   <target name="compileCppExe" description="For internal use only (C++ clients build)">
      <echo message="Compiling of C++ test client '${compileCppSourcePath}/bin/${exeName}' ..."/>
      <mkdir dir="${build.dir}/obj"/>
      <mkdir dir="${compileCppSourcePath}/bin"/>
      <cc debug="${cpp.debug}" link="executable"
          outfile="${compileCppSourcePath}/bin/${exeName}"
          objdir="${build.dir}/obj"
          multithreaded="true" exceptions="true">
         <compiler refid="gcc"/>
         <compiler refid="msvc"/>
         <compiler refid="bcc"/>
         <fileset dir="${compileCppSourcePath}" includes="${exeName}.cpp"/>
         <includepath location="${src.cpp.dir}" />
         <!-- sysincludepath location="${STL_HOME}/stlport" / -->
         <sysincludepath location="${CORBACPP_HOME}" if="TAO" />          <!-- TestCorbaDriver.cpp only which uses CORBA directly -->
         <sysincludepath location="${CORBACPP_HOME}/.." if="TAO" />       <!-- TestCorbaDriver.cpp only which uses CORBA directly -->
         <sysincludepath location="${CORBACPP_HOME}/orbsvcs" if="TAO" />  <!-- TestCorbaDriver.cpp only which uses CORBA directly -->
         <sysincludepath location="${CORBACPP_HOME}/include" if="MICO" /> <!-- TestCorbaDriver.cpp only which uses CORBA directly -->
         <sysincludepath location="${XMLCPP_HOME}/include" />             <!-- xerces 1.6.0 -->
         <sysincludepath location="${XMLCPP_HOME}/include/xercesc" />     <!-- Since xerces 1.7.0 -->

         <!-- syslibset dir="/usr/lib" libs="stdc++" if="unix"/ -->

         <defineset>
           <define name="${corba.product}" value="1" />   <!-- "TAO" or "MICO" etc., see client/protocol/corba/CompatibleCorba.h -->
           <define name="WIN32" value="1" if="windows" />        
           <define name="_WINDOWS" value="1" if="windows" />
           <define name="_MBCS" value="1" if="windows" />
           <define name="_USRDLL" value="1" if="windows" />
         </defineset>

         <linker name="gcc"  if="use-gcc">

            <linkerarg value="-Wl,-rpath=${CORBACPP_HOME}/../ace" if="TAO" />
            <linkerarg value="-Wl,-rpath=${CORBACPP_HOME}/lib" if="MICO" />
            <linkerarg value="-Wl,-rpath=${XMLCPP_HOME}/lib" />
            <linkerarg value="-Wl,-rpath=${lib.dir.absolute}" />

            <!-- TAO -->
            <libset dir="${CORBACPP_HOME}/../ace" libs="ACE" if="TAO" />
            <libset dir="${CORBACPP_HOME}/tao" libs="TAO" if="TAO" />       
            <libset dir="${CORBACPP_HOME}/tao/PortableServer" libs="TAO_PortableServer" if="TAO" />
            <libset dir="${CORBACPP_HOME}/orbsvcs/orbsvcs" libs="TAO_CosNaming" if="TAO" />

            <!-- libset dir="${STL_HOME}/lib" libs="stlport_gcc" /-->

            <!-- MICO -->
            <libset dir="${CORBACPP_HOME}/bin" libs="mico${CORBACPP_VER},micocoss${CORBACPP_VER}" if="MICO" />
            <libset dir="${CORBACPP_HOME}/lib" libs="mico${CORBACPP_VER},micocoss${CORBACPP_VER}" if="MICO" />

            <!-- XERCES XML parser -->
            <libset dir="${XMLCPP_HOME}/lib" libs="xerces-c${XMLCPP_VER}" />

            <!-- xmlBlasterClient.dll -->
            <libset dir="${lib.dir}" libs="xmlBlasterClient" />
      
            <syslibset dir="/lib" libs="dl" if="unix"/>
            <syslibset dir="/usr/lib" libs="pthread" if="unix"/>

         </linker>

         <linker name="msvc" if="use-msvc"> <!-- linker does not support nested switch -->
            <!-- TAO -->
            <fileset dir="${CORBACPP_HOME}/../ace" includes="ACEd.lib" if="TAO,windows" />
            <fileset dir="${CORBACPP_HOME}/tao" includes="TAOd.lib" if="TAO,windows" />       
            <fileset dir="${CORBACPP_HOME}/tao/PortableServer" includes="TAO_PortableServerd.lib" if="TAO,windows" />
            <fileset dir="${CORBACPP_HOME}/orbsvcs/orbsvcs" includes="TAO_CosNamingd.lib" if="TAO,windows" />

            <!-- libset dir="${STL_HOME}/lib" libs="stlport_gcc" /-->

            <!-- MICO -->
            <libset dir="${CORBACPP_HOME}/win32-bin" libs="mico${CORBACPP_VER},micocoss${CORBACPP_VER}" if="MICO,windows" />
            <libset dir="${CORBACPP_HOME}/win32-bin/lib" libs="mico${CORBACPP_VER},micocoss${CORBACPP_VER}" if="MICO,windows" />

            <!-- XERCES XML parser -->
            <libset dir="${XMLCPP_HOME}/lib" libs="xerces-c${XMLCPP_VER}" if="windows" />

            <!-- xmlBlasterClient.dll -->
            <libset dir="${lib.dir}" libs="xmlBlasterClient" />
         </linker>

         <linker name="bcc"  if="use-bcc" />
      </cc>
   </target>

   <target name="cpp" depends="cpp-lib, cpp-demo, cpp-test" description="Compile C++ client library and test/demo clients"/>

   <!-- =================================================================== -->
   <!-- Cleans everything                                                   -->
   <!-- =================================================================== -->
    <target name="cpp-clean" depends="prepare" description="Remove C++ object files">
       <delete dir="${build.dir}/obj"/>
       <delete dir=".c_dependency_cache"/>
       <delete includeEmptyDirs="true" failonerror="false">
          <fileset dir="${testsuite.dir}/src/c++" includes="*.o"/>
       </delete>
    </target>

    <target name="cpp-delete" depends="cpp-clean" description="Remove all generated C++ files/libs/executables">
       <delete includeEmptyDirs="true" failonerror="false">
          <fileset dir="${src.cpp.dir}/generated" includes="*.o, *.cc, *.cpp, *.h, *.i"/>
          <fileset dir="${lib.dir}" includes="*xmlBlasterClient.so,*xmlBlasterClient.sl,*xmlBlasterClient.dll,xmlBlasterClient.rsp,xmlBlasterClient.exp,xmlBlasterClient.pdb,history.xml"/>
          <fileset dir="${testsuite.dir}/src/c++/bin" includes="*"/>
          <fileset dir="${demo.dir}/c++/bin" includes="*"/>
          <fileset dir="${idl.dir}" includes="*Idl/*.java"/>
       </delete>
    </target>

    <target name="clean" depends="cpp-clean" description="Remove generated Java and C++ files">
       <delete dir="${build.dir}"/>
       <delete includeEmptyDirs="true" failonerror="false">
          <fileset dir="${lib.dir}" includes="${name}.jar,demo.jar,testsuite.jar,${name}-${version}.jar,xmlBlasterK2.rar,JmsAdapter.jar,xmlBlaster-ear.sar"/>
          <!-- fileset dir="${req.dir}" includes="*.class"/ -->
       </delete>
    </target>

    <target name="delete" depends="clean,cpp-delete,docs-delete" description="Remove all generated ditribution Java, C++ and documentation files">
       <delete dir="${dist-classes.dir}"/>
       <delete dir="${dist.dir}"/>
       <delete dir="${dist-client.dir}"/>
   </target>
</project>
