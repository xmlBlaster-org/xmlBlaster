<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN"
"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
     width="600" height="600" viewBox="0 0 500 500"
     onload="doInit(evt)" onunload="shutdown(evt)" onmouseup="movePoint(evt)">

  <defs>
      <script xlink:href="xparse.js" type="text/ecmascript"/>
      <script type="text/ecmascript"> 

<![CDATA[    

/**
 * xmlBlaster/demo/javaclients/svg/rhino/chessRhino.svg
 *
 * This example is a Chess game where the GUI is an SVG document which can be opened
 * in a browser.
 * Since this example makes use of the LiveConnect techology which is implemented in
 * Rhino (http://www.mozilla.org)
 * it can only used in browsers which use this interpreter.
 * It has been tested in batik (http://xml.apache.org).
 *
 * @see 
 *   http://www.xmlblaster.org/xmlBlaster/doc/requirements/client.javascript.rhino.html
 * @see xmlBlaster/demo/javaclients/svg/rhino/README how to invoke
 */

/**
 * This is the way to import packages into the Rhino Javascript Interpreter
 */
importPackage(java.awt);
importPackage(Packages.org.xmlBlaster.client);
importPackage(Packages.org.xmlBlaster.client.qos);
importPackage(Packages.org.xmlBlaster.client.protocol);
importPackage(Packages.org.xmlBlaster.engine.helper);
importPackage(Packages.org.xmlBlaster.util);


   var x0  = 0; // the x coordinate of the first point (used to calculate the movement)
   var y0  = 0; // the y coordinate ...
   var doc;     // this svg document 
   var currentElement // the element which has been selected.
   var xmlBlaster; // the connection object used to communicate with xmlBlaster
   var ME = "chessRhino.svg";
   var glob;    // the 'stack' (local data) of one client connection
   var log;     // log to file or console

   /**
    * The function which returns a generated user name which should be unique within
    * the same xmlBlaster server.
    */
   function getUser() {
      return System.getProperty("user.name") + System.currentTimeMillis();
   }
   

   /**
    * This is the method which is invoked by the XmlBlaster object when
    * a message matches a subscription
    */
   function update(loginName, key, content, qos) {
      var root = Xparse(new String(content));
      var element = root.contents[0];
      var id = element.contents[0].contents[0].value;
      var transform = element.contents[1].contents[0].value;
      var el = doc.getElementById(id);
      el.setAttribute("transform", transform);
      log.info(ME, "Handled chess move " + transform + " from server");
      return "";
   }
  

   /**
    * This helper function builds the string to use as the 'translate' attribute.
    * It is this attribute which makes the element move.
    * If such an attribute does not exist, it is added, otherwise it is replaced.
    */
   function createTranslateAttribute(element, dx, dy) {
      var buf = element.getAttribute("transform");  // e.g. 'translate(150,300)'
      var pos = buf.indexOf("translate(");
      var x   = dx;
      var y   = dy;
   
      if (pos > -1) {
         buf = buf.substr(pos+10, buf.length-1);  // e.g. '150,300'
         var A = new Array();
         A = buf.split(',');
         x += parseInt(A[0], 10);
         y += parseInt(A[1], 10);
      }
      var result = "translate(" + x + "," + y + ")";
      return result;
   }
  
  
   /**
    * A helper function build the xml string to send as to xmlBlaster as the
    * content of the message.
    */
   function toXml(id, transform) {
      var content = "<chess><id>" + id + "</id><transform>" +
                    transform + "</transform></chess>";
      return content;
   }
   
   /**
    * Called when opening this document, this function establishes a connection to
    * xmlBlaster, makes a login and a subscription to the messages it is insterested in.
    * <br />
    * It currently connects on the localhost.
    * You could easly change this by making it read the System properties, e.g.
    * <pre>
    * java -Dprotocol=SOCKET -Ddispatch/connection/plugin/socket/hostname=myServer
    *       org.apache.batik.apps.svgbrowser.Main
    *       $XMLBLASTER_HOME/demo/javaclients/svg/rhino/chessRhino.svg
    * </pre>
    */
   function doInit(evt) { 
      doc = evt.target.ownerDocument;

      // you can set here the command line to pass to I_XmlBlasterAccess, e.g.
      var args = new Array();
      //args.push("-bootstrapHostname");        // If you use CORBA
      //args.push("myServer.myCompany.com");    // try "server.xmlBlaster.org"
      args.push("-protocol");
      args.push("SOCKET");
      //args.push("-dispatch/connection/plugin/socket/hostname");
      //args.push("217.83.166.225");
      args.push("-dispatch/connection/plugin/socket/port");
      args.push(new String(7607));
                
      xmlBlaster = new XmlBlasterAccess(args);
      
      glob = xmlBlaster.getGlobal();
      log = glob.getLog("svg");
      var connectQos = new ConnectQos(glob, getUser(), "secret");

      xmlBlaster.connect(connectQos, new JavascriptCallback(window));

      var key = new String("<key oid='' queryType='XPATH'>//chess</key>");
      var qos = new String("<qos/>");
      xmlBlaster.subscribe(key, qos);

      log.info(ME, "Connected to xmlBlaster server");
   }
    

   function shutdown(evt) { 
      var qos = new DisconnectQos(glob);
      xmlBlaster.disconnect(qos);
      glob.shutdown();
      xmlBlaster = null;
      glob = null;
      log.info(ME, "xmlBlaster connection closed");
   }


   /**
    * sets the starting point for the movement of the elment.
    */
   function setStartPosition(evt) {
      x0 = evt.getClientX();
      y0 = evt.getClientY();
      currentElement = evt.target;
   }
  
  
   /**
    * Calculates the movement and then publishes this information to xmlBlaster.
    * Note that it currently does only calculate movements based on the original
    * size of the document. In other words, if you resize the browser, 
    * you will get the wrong size of the movements.
    */
   function movePoint(evt) {
      log.info(ME, "Entering movePoint()");
      if (currentElement == null) {
         return; // click on empty field
      }
      var dx = evt.getClientX() - x0;
      var dy = evt.getClientY() - y0;
          
      //   var id = currentElement.getAttribute("id");
      // the next lines are a workaround for the bug in batik.
      var id = currentElement.getAttribute("id") + "A"; // workaround for the Bug ?
      log.info(ME, "movePoint() -> Moving chess figure " + id);
      currentElement = doc.getElementById(id);
      // end of the bugfix

      var transform = createTranslateAttribute(currentElement, dx, dy);
      var content = new String(toXml(id, transform));
      var key = "<key oid=\'" +  id + "\'><chess>some chess name</chess></key>";
      var qos = "<qos></qos>";
     
      messageUnit = new MsgUnit(glob, key, content, qos);
      xmlBlaster.publish(messageUnit);

      currentElement = null;
   }
  
  
]]>
  
  </script>

    <g id="raw">
      <rect x="0" y="0" width="50" height="50" transform="translate(  0,  0)"
            style="fill:black"/>
      <rect x="0" y="0" width="50" height="50" transform="translate( 50,  0)"
            style="fill:white"/>
      <rect x="0" y="0" width="50" height="50" transform="translate(100,  0)"
            style="fill:black"/>
      <rect x="0" y="0" width="50" height="50" transform="translate(150,  0)"
            style="fill:white"/>
      <rect x="0" y="0" width="50" height="50" transform="translate(200,  0)"
            style="fill:black"/>
      <rect x="0" y="0" width="50" height="50" transform="translate(250,  0)"
            style="fill:white"/>
      <rect x="0" y="0" width="50" height="50" transform="translate(300,  0)"
            style="fill:black"/>
      <rect x="0" y="0" width="50" height="50" transform="translate(350,  0)"
            style="fill:white"/>
    </g>

    <g id="whiteQueen">
      <path d="M 15 40 L 10 20 L 20 30 L 25 20 L 30 30 L 40 20 L 35 40 z" fill="red" />
    </g>

    <g id="blackQueen">
      <path d="M 15 40 L 10 20 L 20 30 L 25 20 L 30 30 L 40 20 L 35 40 z" fill="blue" />
    </g>

    <g id="whiteKing">
      <path d="M 20 40 L 10 10 L 20 20 L 25 10 L 30 20 L 40 10 L 30 40 z" fill="red" />
    </g>

    <g id="blackKing">
      <path d="M 20 40 L 10 10 L 20 20 L 25 10 L 30 20 L 40 10 L 30 40 z" fill="blue" />
    </g>

    <g id="whiteHorse">
      <path d="M 10 40 L 10 35 L 20 35 L 20 25 L 10 25 L 10 20 L 20 15 L 20 10
               L 30 20 L 30 35 L 40 35 L 40 40 L 10 40 z" fill="red" />
    </g>

    <g id="blackHorse">
      <path d="M 10 40 L 10 35 L 20 35 L 20 25 L 10 25 L 10 20 L 20 15 L 20 10
               L 30 20 L 30 35 L 40 35 L 40 40 L 10 40 z" fill="blue" />
    </g>

    <g id="whiteRunner">
      <rect x="11" y="38" width="28" height="10" style="fill:red"/>
      <rect x="18" y="18" width="14" height="22" style="fill:red"/>
      <circle cx="25" cy="18" r="9" style="fill:red"/>
    </g>

    <g id="blackRunner">
      <rect x="11" y="38" width="28" height="10" style="fill:blue"/>
      <rect x="18" y="18" width="14" height="22" style="fill:blue"/>
      <circle cx="25" cy="18" r="9" style="fill:blue"/>
    </g>

    <g id="whitePiece">
      <rect x="10" y="35" width="30" height="10" style="fill:red"/>
      <rect x="20" y="20" width="10" height="20" style="fill:red"/>
      <circle cx="25" cy="20" r="7" style="fill:red"/>
    </g>

    <g id="blackPiece">
      <rect x="10" y="35" width="30" height="10" style="fill:blue"/>
      <rect x="20" y="20" width="10" height="20" style="fill:blue"/>
      <circle cx="25" cy="20" r="7" style="fill:blue"/>
    </g>

    <g id="whiteTower">
      <rect x="10" y="30" width="30" height="10" style="fill:red"/>
      <rect x="20" y="20" width="10" height="10" style="fill:red"/>
      <rect x="10" y="15" width="30" height="5" style="fill:red"/>
      <rect x="10" y="10" width="6" height="10" style="fill:red"/>
      <rect x="22" y="10" width="6" height="10" style="fill:red"/>
      <rect x="34" y="10" width="6" height="10" style="fill:red"/>
    </g>

    <g id="blackTower">
      <rect x="10" y="30" width="30" height="10" style="fill:blue"/>
      <rect x="20" y="20" width="10" height="10" style="fill:blue"/>
      <rect x="10" y="15" width="30" height="5" style="fill:blue"/>
      <rect x="10" y="10" width="6" height="10" style="fill:blue"/>
      <rect x="22" y="10" width="6" height="10" style="fill:blue"/>
      <rect x="34" y="10" width="6" height="10" style="fill:blue"/>
    </g>

</defs>

<g transform="translate(50,50)">
  <g>
    <!-- Define a chess board boundary which is sensitive on mouse events -->
    <rect x="-100" y="-100" width="600" height="600" style="fill:white" opacity="0.0"/>
    
    <use x="0" y="0" width="350" height="50" xlink:href="#raw"/>
    <use x="50" y="50" width="350" height="50" xlink:href="#raw"/>
    <use x="0" y="100" width="350" height="50" xlink:href="#raw"/>
    <use x="50" y="150" width="350" height="50" xlink:href="#raw"/>
    <use x="0" y="200" width="350" height="50" xlink:href="#raw"/>
    <use x="50" y="250" width="350" height="50" xlink:href="#raw"/>
    <use x="0" y="300" width="350" height="50" xlink:href="#raw"/>
    <use x="50" y="350" width="350" height="50" xlink:href="#raw"/>
  </g>


  <g id="0A" onclick="System.out.println('0A')" transform="translate(0,50)"
     onmousedown="setStartPosition(evt)">
    <use onclick="System.out.println('0B')" x="0" y="0" width="50" height="50"
         xlink:href="#whitePiece"/>
    <rect onclick="System.out.println('0C')" id="0" x="0" y="0" width="50"
          height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="1A" transform="translate(50,50)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whitePiece"/>
    <rect id="1" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="2A" transform="translate(100,50)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whitePiece"/>
    <rect id="2" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="3A" transform="translate(150,50)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whitePiece"/>
    <rect id="3" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="4A" transform="translate(200,50)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whitePiece"/>
    <rect id="4" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="5A" transform="translate(250,50)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whitePiece"/>
    <rect id="5" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="6A" transform="translate(300,50)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whitePiece"/>
    <rect id="6" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="7A" transform="translate(350,50)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whitePiece"/>
    <rect id="7" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="8A" transform="translate(0,300)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackPiece"/>
    <rect id="8" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="9A" transform="translate(50,300)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackPiece"/>
    <rect id="9" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="10A" transform="translate(100,300)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackPiece"/>
    <rect id="10" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="11A" transform="translate(150,300)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackPiece"/>
    <rect id="11" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="12A" transform="translate(200,300)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackPiece"/>
    <rect id="12" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="13A" transform="translate(250,300)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackPiece"/>
    <rect id="13" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="14A" transform="translate(300,300)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackPiece"/>
    <rect id="14" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="15A" transform="translate(350,300)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackPiece"/>
    <rect id="15" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>


  <g id="16A" transform="translate(0,350)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackTower"/>
    <rect id="16" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="17A" transform="translate(350,350)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackTower"/>
    <rect id="17" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="18A" transform="translate(0,0)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whiteTower"/>
    <rect id="18" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="19A" transform="translate(350,0)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whiteTower"/>
    <rect id="19" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>


  <g id="20A" transform="translate(100,0)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whiteRunner"/>
    <rect id="20" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="22A" transform="translate(250,0)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whiteRunner"/>
    <rect id="22" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="23A" transform="translate(100,350)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackRunner"/>
    <rect id="23" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>
  <g id="24A" transform="translate(250,350)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackRunner"/>
    <rect id="24" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>


  <g id="25A" transform="translate(50,0)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whiteHorse"/>
    <rect id="25" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="26A" transform="translate(300,0)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whiteHorse"/>
    <rect id="26" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="27A" transform="translate(50,350)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackHorse"/>
    <rect id="27" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="28A" transform="translate(300,350)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackHorse"/>
    <rect id="28" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>


  <g id="29A" transform="translate(150,0)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whiteKing"/>
    <rect id="29" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="30A" transform="translate(150,350)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackKing"/>
    <rect id="30" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="31A" transform="translate(200,0)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#whiteQueen"/>
    <rect id="31" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

  <g id="21A" transform="translate(200,350)" onmousedown="setStartPosition(evt)">
    <use x="0" y="0" width="50" height="50" xlink:href="#blackQueen"/>
    <rect id="21" x="0" y="0" width="50" height="50" style="fill:green" opacity="0.10"/> 
  </g>

</g>

</svg>

