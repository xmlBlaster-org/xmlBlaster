/*
 *-----------------------------------------------------------------------------
 * $Id: SendMessageExample.cpp,v 1.1 2004/06/21 11:36:11 laghi Exp $
 *
 * Copyright 2004 Avitech AG. All rights reserved.
 * Avitech PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *-----------------------------------------------------------------------------
 */
 
/**
 * This Example uses the synchrom sendMessage() Method to send a message to a 
 *      queue and to receive the reply. The reply will be generated by ServerExample2.
 *
 * @image SendMessageExample
 * @copyright 2004
 * @version $Id: SendMessageExample.cpp,v 1.1 2004/06/21 11:36:11 laghi Exp $
 */

#include <mom/MOMMessage.h>
#include <mom/MOMFactory.h>
#include <util/StringUtils.h>
#include <util/thread/ThreadImpl.h>
#include <mom/xmlBlaster/MOM_XMLBlasterHandler.h>
#include <mom/xmlBlaster/MOM_XMLBlasterConnection.h>

using namespace org::xmlBlaster::util;
using namespace avitech::mom;
using namespace avitech::util;
using namespace std;

/**
 * This Example uses the synchrom sendMessage() Method to send a message to a 
 *      queue and to receive the reply. The reply will be generated by ServerExample2.
 * To use this example you have to start ServerExample2 first.
 */
int main() {
   string responseTextPart1 = "Time? RequestNr ";
   string sender = "operator";
   // create the factory
   try {
      // get the connection and login to the MOM
      MOMConnection conn    = MOMFactory::getConnection(sender, "operator");
      MOMHandler    handler = MOMFactory::createHandler(conn, "com.avitech-ag.timeservice");
      MOMMessage    momMsg  = MOMFactory::createMessage();

      for (int i = 1; i <= 100; i++) {
         string tmp = lexical_cast<string>(i);
         cout << "Sending synchronous request now! Time? RequestNr " + tmp << endl;
         try {
            MOMMessage sendMsg = MOMFactory::createMessage();
            // set the content of the message just created
            sendMsg->setContent(responseTextPart1 + tmp);
            momMsg = handler->sendMessage(sendMsg, 30000);
            // print out the result.
            if (StringUtils::endsWith(momMsg->getContent(), responseTextPart1 + tmp) ) {
               cout << "Received the message:" << momMsg->getContent() << "\tOK\n" << endl;
            }
            else {
               cout << "Received the message:" << momMsg->getContent() << "\tMISMATCH\n" << endl;
            }
         } 
         catch (const MOMException& me) {
            cerr << "ERROR: " << me.getMessage() << endl;
         }         
         
         org::xmlBlaster::util::thread::Thread::sleep(1000L);
      }

      org::xmlBlaster::util::thread::Thread::sleep(1000L);
      try {
           // close the connection to the MOM
           conn->close();
      } 
      catch (const MOMException& me) {
         cerr << "ERROR: " << me.getMessage() << endl;
      }

   } 
   catch (const MOMException& me) {
      std::cerr << "ERROR: " << me.getMessage() << std::endl;
   }
   return 0;
}

      
