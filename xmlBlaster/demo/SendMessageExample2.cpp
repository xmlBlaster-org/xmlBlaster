/*
 *-----------------------------------------------------------------------------
 * $Id: SendMessageExample2.cpp,v 1.1 2004/06/21 11:36:11 laghi Exp $
 *
 * Copyright 2003 Avitech AG. All rights reserved.
 * Avitech PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *-----------------------------------------------------------------------------
 */

/**
 * This Example uses the synchronous sendMessage() Method to send a message to a
 * queue and to receive the reply. The reply will be generated by
 * ServerExample2.
 * 
 * @image SendMessageExample2 @copyright 2003
 * 
 * @version $Id: SendMessageExample2.cpp,v 1.1 2004/06/21 11:36:11 laghi Exp $
 */

#include <mom/MOMMessage.h>
#include <mom/MOMFactory.h>
#include <util/StringUtils.h>
#include <util/thread/ThreadImpl.h>
#include <mom/xmlBlaster/MOM_XMLBlasterHandler.h>
#include <mom/xmlBlaster/MOM_XMLBlasterConnection.h>

using namespace org::xmlBlaster::util;
using namespace avitech::mom;
using namespace avitech::util;
using namespace std;

/**
 * This Example uses the synchrous sendMessage() Method to send a message to a
 * queue and to receive the reply. The reply will be generated by
 * ServerExample3. To use this example you have to start ServerExample3 first.
 */
int main() {

   string username = "SendMessageExample2";

   try {
      // get the connection and login to the MOM
      MOMConnection conn = MOMFactory::getConnection(username, "password");

      // get the handler
      MOMHandler handler = MOMFactory::createHandler(conn, "SendMessageExample2");

      // create a MOMMessage object for the message send to the queue
      MOMMessage sendMsg = MOMFactory::createMessage();
      // set the content of the message just created
      sendMsg->setContent("Time?");
      // send the message and receive the result
      MOMMessage momMsg = handler->sendMessage(sendMsg);
      // print out the result.
      cout << "\n\nReceived the message: " << momMsg->getContent() << endl;
      // close the connection to the MOM
      conn->close();
   } catch (const MOMException& me) {
      cerr << "ERROR: " << me.getMessage() << endl;
   }

   return 0;
}
