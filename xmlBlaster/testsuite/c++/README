These are examples on how to access xmlBlaster from a C++ client

- clientBOA.cpp and clientPOA.cpp use the MICO (C++) CORBA library

- xmlBlaster runs with JacORB (Java)

-  clientPOA -ORBNamigAddr corbaname::localhost:7608#MyService
-  TestGet -ORBNamigAddr corbaname::localhost:7608#xmlBlaster-Authenticate.MOM
-  TestGet -ORBNamigAddr corbaname:rir:/NameService#xmlBlaster-Authenticate.MOM



1.) Install MICO (2.3) and set the environment variable to point to MICO

   export MICO_HOME=/opt/local/mico


2) Compile the clients with

   make all



To run the clients:


Using POA:

3) Start the xmlBlaster server

   java org.xmlBlaster.Main -iorFile /tmp/ior.dat


4) And connect with the C++ client (cd $XMLBLASTER_HOME/testsuite/c++/bin)

   ./TestGet  -ior `cat /tmp/ior.dat`


Using POA (clientPOA.cpp) with a naming service:

You need to have a running web server and set the DocumentRoot to e.g.

   export DocumentRoot=/opt/local/httpd/html

3) Start the naming service (with a running web server)

   jaco -DOAPort=7608 org.jacorb.naming.NameServer ${DocumentRoot}/NS_Ref


4) Start the xmlBlaster server (The web server URL is in jacorb.properties)

   java org.xmlBlaster.Main


5) And connect with the C++ client

   ./clientPOA -ORBNamingIOR `cat ${DocumentRoot}/NS_Ref`


On problems edit $HOME/jacorb.properties and set
   jacorb.verbosity=1



mico C++ callback:
------------------

When using -ORBIIOPAddr, Mico will only listen on
the one interface that handles this IP address, so servers will only
be addressable using that exact address.

You might want to try using -ORBIIOPAddr inet::9000 instead; Mico
will then listen on INADDR_ANY.


mico name service with JacORB:
------------------------------

nsd --ior $HOME/NS_Ref -ORBNoCodeSets -ORBIIOAddr inet:155.157.20.64:12456 &

The path $HOME/NS_Ref must match the entry in jacorb.properties

