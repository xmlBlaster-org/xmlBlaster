How to install and compile xmlBlaster
====================================

You need JDK 1.2 or better to run xmlBlaster.


Quick setup of xmlBlaster:
--------------------------

If you use sh, ksh or bash, you may chose to source
the xmlBlaster/.bashrc into your environment, for example
write this into your .profile file:

   export JDK_HOME=/usr/local/jdk
   export JacORB_HOME=/usr/local/JacORB
   export XMLBLASTER_HOME=${HOME}/xmlBlaster
   export MICO_HOME=/usr/local/mico           (optional)
   export JIKES_HOME=/usr/local/jikes         (optional)
   . xmlBlaster/.bashrc

and after a new login type 'make all' in the XMLBLASTER_HOME directory.
See step 5.) below how to start xmlBlaster.


Manual setup of xmlBlaster:
---------------------------

1) Install the JacORB CORBA library first (JacORB1_0-beta13):

     http://www.inf.fu-berlin.de/~brose/jacorb/

   Set the environment for JacORB home directory, so that
   the xmlBlaster Makefile (Makefile.Include) can find it:

     export JacORB_HOME=/usr/local/JacORB


2) Set the environment to the xmlBlaster directory

   For example using the sh, ksh or bash:

     export XMLBLASTER_HOME=$HOME/xmlBlaster

   or using the csh, tcsh:

     setenv XMLBLASTER_HOME $HOME/xmlBlaster


3) If you want to compile the stuff, the CLASSPATH has to
   point to jar files, to the sources (.java) and to the binaries (.class):

     export CLASSPATH=${CLASSPATH}:${XMLBLASTER_HOME}/classes
     export CLASSPATH=${CLASSPATH}:${XMLBLASTER_HOME}/src/java
     export CLASSPATH=${CLASSPATH}:${XMLBLASTER_HOME}/lib/omquery.jar
     export CLASSPATH=${CLASSPATH}:${XMLBLASTER_HOME}/lib/xtdash.jar
     export CLASSPATH=${CLASSPATH}:${XMLBLASTER_HOME}/lib/xml.jar        (xml-tr2.zip - http://developer.java.sun.com/developer/products/xml/)


4) Compile xmlBlaster:

   a) Edit $XMLBLASTER_HOME/Makefile.Include and customize it to your environment
    
   b) Go to the home directory of xmlBlaster and type:

     make all


5) Try the xmlBlaster server
   a) Start the xmlBlaster server (jaco is the java wrapper from JacORB):

       ${JacORB_HOME}/bin/jaco org.xmlBlaster.Main /tmp/NS_Ref

   b) Start the client (or many of those):

       ${JacORB_HOME}/bin/jaco testsuite.org.xmlBlaster.ClientXml `cat /tmp/NS_Ref` 


   Good. You have done it!


   Variant using a name service and a local web server to publish the name service
   (edit ${HOME}/.jacorb_properties accordingly e.g. jacorb.NameServerURL=http://localhost:80/NS_Ref):
       rm /tmp/NS_db;  ${JacORB_HOME}/bin/ns  /usr/local/httpd/htdocs/NS_Ref  /tmp/NS_db
       ${JacORB_HOME}/bin/jaco org.xmlBlaster.Main
       ${JacORB_HOME}/bin/jaco testsuite.org.xmlBlaster.ClientXml



-------------------------------------------------------------------------
For developers

 1.) If you use the testsuite goodies you must set the path to the
     testsuite- bin directory.

    sh, ksh or bash:

     export PATH=$PATH:$XMLBLASTER_HOME/testsuite/bin


 2.) To generate the javadoc API of xmlBlaster type in the xmlBlaster home directory:

    make javadoc


 3.) To generate a xmlBlaster.jar file type in the xmlBlaster home directory:

    make jar


--------- C++ -----------------------------------------------------------
C++ clients with MICO 2.3.0 (http://www.mico.org)

1) Install MICO
   ./configure
    make
    make install

2) Set the environment variable to point to MICO (needed for the Makefile)
   export MICO_HOME=/usr/local/mico

3) cd ${XMLBLASTER_HOME}/testsuite/c++
   and follow the instructions in ${XMLBLASTER_HOME}/testsuite/c++/README


--------- PERL ----------------------------------------------------------
Perl clients with COPE 0.50_51 (http://www.lunatech.com/research/corba/cope/)
You need MICO first
AWARE: The current COPE Version 0.50_51 has problems with oneway methods
       which raise exceptions, so it will not work with xmlBlaster for the moment

1) get Exception-0.97_01A.tgz (ftp://ftp.matematik.su.se/pub/teke.)

   perl Makefile.PL
   make
   make install    (su)

2) get COPE
   cvs -z3 -d :pserver:anonymous@cvs.lunatech.com:/home/cvscope/repo login
     <password just type enter>
   cvs -z3 -d :pserver:anonymous@cvs.lunatech.com:/home/cvscope/repo checkout

   perl Makefile.PL
   make
   make install    (su)

3) cd COPE/compat/MICO
   c++  -I. -I$MICO_HOME/include -I$MICO_HOME/include/ministl  -O   -fno-exceptions -fexceptions -O0 -I/usr/local/include  -c irior.cc -o irior.o
   c++  -I. -I$MICO_HOME/include -I$MICO_HOME/include/ministl  -O   -fno-exceptions -fexceptions -O0 -L$MICO_HOME/libs -L/usr/local/lib  -rdynamic irior.o -lmico2.3.0 -lreadline -lncurses -ldl -lm   -o irior

4) idl2perl -imp xmlBlaster.idl



--------- TCL -----------------------------------------------------------
There are two ways for Tcl clients to access xmlBlaster:

a) Using Tcl clients with TclMico http://www.mico.org/
   tclmico-0.5c.tar.gz

    See directory ${XMLBLASTER_HOME}/testsuite/tcl
    for a demo client written in TCL and accessing the xmlBlaster server

b) Using tcljava (TclBlend/JACL) with an ordinary Java client
   This allows scripting of Java with Tcl, and embedding the
   Tcl interpreter (called jacl) into Java code.

 Here is a description how to use Tcl with MICO (a):
 First get a new Tcl release (e.g. 8.2) at http://www.scriptics.com
 or directly with cvs:
    export CVSROOT=:pserver:cvs@cvs.scriptics.com:/cvsroot
    cvs login   (passwd = cvs)

    cvs -z9 checkout tcl8.2
    cd tcl8.2/unix; autoconf; cd dltest ; autoconf ; cd ..
    ./configure --enable-shared --enable-threads --prefix=/www/tcl
    make
    make install
    cd /usr/bin; rm tclsh; ln -s /www/tcl/bin/tclsh8.2 tclsh

    cvs -z9 checkout tk8.2
    cd tk8.2/unix; autoconf;
    ./configure --enable-shared --prefix=/www/tk
    make
    make install
    cd /usr/X11R6/bin; rm wish; ln -s /www/tk/bin/wish8.2 wish
    cd /www/tcl/lib; ln -s /www/tk/lib/tk8.2 tk8.2

    tclmico-0.5c:
      export TCLMICO_HOME=/www/tclmico-0.5c
    cd ${TCLMICO_HOME}
    ./configure --enable-shared --with-tcl=/www/tcl
      make
      tclsh
         % load ./libtclmico[info sharedlibextension]
          % package require tclmico
          % corba::init -ORBIIOPAddr inet:localhost:4242

     cd /usr/local/lib
      ln -s libmico2.3.0.a libmico.a
      ln -s libmico2.3.0.so libmico.so

    cd ${TCLMICO_HOME}/demo/hello-1
    make all
      export PATH=$PATH:${TCLMICO_HOME}
      export LD_LIBRARY_PATH=${TCLMICO_HOME}:$LD_LIBRARY_PATH
      ./server -ORBIIOPAddr inet:localhost:8123
         ./client.tcl -ORBBindAddr inet:localhost:8123

Here a description to setup TclJava (b):
    cvs -z9 checkout tcljava
    cd tcljava/unix; autoconf;
    ./configure --with-jikes --with-jdk=/usr/local/jdk --with-tcl=/www/tcl8.2 --prefix=/www/tclJava



--------- PYTHON --------------------------------------------------------
Python clients with Fnorb-1.01 http://www.dstc.edu.au/Products/Fnorb/
   fnorb-1.01.tar.gz
   cd src
   make -f Makefile.pre.in boot 
   FNORB_HOME=/Where/You/Put/Fnorb 
   export PATH=$PATH:$FNORB_HOME/Fnorb/script 
   export PYTHONPATH=$PYTHONPATH:$FNORB_HOME 

