#################################################################
#                                                               #
#                     xmlBlaster 0.64                           #
#                                                               #  
#################################################################

                        Required
-----------------------------------------------------------------

   - JDK 1.2 or later
   - a 'make' utility recommended.
	  For DOS/Windows, e.g. cygwin's make.
	  Note that Windows nmake will not work properly with xmlBlaster Makefiles
   - JacOrb (CORBA) http://www.inf.fu-berlin.de/~brose/jacorb/


                        Environment
-----------------------------------------------------------------

1. Extend your CLASSPATH environment variable. 

     export JDK_HOME=/usr/local/jdk
     export JacORB_HOME=/usr/local/JacORB
     export XMLBLASTER_HOME=${HOME}/xmlBlaster 

   or csh, tcsh :

     setenv JDK_HOME /usr/local/jdk
     setenv JacORB_HOME /usr/local/JacORB
     setenv XMLBLASTER_HOME ${HOME}/xmlBlaster

2. If you use sh, ksh or bash, you may chose to source the
   $XMLBLASTER_HOME/.bashrc into your environment.

      source  ${XMLBLASTER_HOME}/.bashrc

	This is the recommended way, since you will automatically
	source all enhancements of new xmlBlaster releases.

   Otherwise you must set for csh/tcsh-shell (NOT recommended
	because you have to check the INSTALL file for changes with each new
	xmlBlaster release):

     setenv CLASSPATH ${CLASSPATH}:${XMLBLASTER_HOME}/classes
     setenv CLASSPATH ${CLASSPATH}:${XMLBLASTER_HOME}/src/java
     setenv CLASSPATH ${CLASSPATH}:${XMLBLASTER_HOME}/lib/omquery.jar
     setenv CLASSPATH ${CLASSPATH}:${XMLBLASTER_HOME}/lib/xtdash.jar
     setenv CLASSPATH ${CLASSPATH}:${XMLBLASTER_HOME}/lib/xml.jar
     setenv CLASSPATH ${CLASSPATH}:${XMLBLASTER_HOME}/lib/test.jar

   You can do this automatically from your startup shell script.
   After a new login you are ready to start the xmlBlaster (see below).


related links:
--------------
JacORB1_0-beta13 : http://www.inf.fu-berlin.de/~brose/jacorb/
xml-tr2.zip      : http://developer.java.sun.com/developer/products/xml/
                   This zip file is included in the xmlBlaster distribution



                      Start xmlBlaster
-------------------------------------------------------------------
You have three options to start the xmlBlaster-Server.

1. xmlBlaster with builtin HTTP-Server on localhost, port=7609 which to pass the server IOR
   (This is the Default-Startup)

     jaco org.xmlBlaster.Main

   and a testclient
    
     jaco testsuite.org.xmlBlaster.ClientGet



2. A variant using the xmlBlaster built in http server (localhost / 7609 is default)

     jaco org.xmlBlaster.Main -iorPort 7609

   and a testclient

     jaco testsuite.org.xmlBlaster.ClientGet -iorHost localhost -iorPort 7609



3. A variant using a file to pass the server IOR:

      jaco org.xmlBlaster.Main -iorFile /tmp/NS_Ref

   and a testclient

     jaco testsuite.org.xmlBlaster.ClientGet -iorFile /tmp/NS_Ref



4. Variant using a naming service and a local web server to publish the name service.
   Edit ${HOME}/.jacorb_properties accordingly e.g. jacorb.NameServerURL=http://localhost:80/NS_Ref):

     rm /tmp/NS_db;  ${JacORB_HOME}/bin/ns  /usr/local/httpd/htdocs/NS_Ref  /tmp/NS_db

     jaco org.xmlBlaster.Main

     jaco testsuite.org.xmlBlaster.ClientXml



                             Testsuite
-------------------------------------------------------------------------
In the directory ${XMLBLASTER_HOME}/testsuite/org/xmlBlaster you will find
a number of Java based test clients to automatically test xmlBlaster.

You may also use the provided test clients to study the usage of xmlBlaster.



                         Compile 
------------------------------------------------------------------
After you have set environment variables do a new login and type

   make all

in the XMLBLASTER_HOME directory. If you type make you get a usage 
of all make options.

Usage :

    make all       --> makes everything new
    make clean     --> deletes all classes
    make distclean --> deletes all classes/doc/jar
    make javadoc   --> call 'make javadoc' in xmlBlaster root dir
    make demo      --> makes everything new and starts a demo
    make test      --> makes everything new and starts a test scenario
    make jar       --> makes jar files of all packages into directory $(JAR_DIR)



#################################################################
#                                                               #
#                     xmlBlaster client                         #
#                                                               #
#################################################################


                             C++ - client
-------------------------------------------------------------------------
C++ clients with MICO 2.3.0 (http://www.mico.org)

1) Install MICO
   ./configure
    make
    make install

2) Set the environment variable to point to MICO (needed for the Makefile)
   export MICO_HOME=/usr/local/mico

3) cd ${XMLBLASTER_HOME}/testsuite/c++
   and follow the instructions in ${XMLBLASTER_HOME}/testsuite/c++/README

                            Perl - client
-------------------------------------------------------------------------
Perl clients with COPE 0.50_51 (http://www.lunatech.com/research/corba/cope/)
You need MICO first
AWARE: The current COPE Version 0.50_51 has problems with oneway methods
       which raise exceptions, so it will not work with xmlBlaster for the moment

1) get Exception-0.97_01A.tgz (ftp://ftp.matematik.su.se/pub/teke.)

   perl Makefile.PL
   make
   make install    (su)

2) get COPE
   cvs -z3 -d :pserver:anonymous@cvs.lunatech.com:/home/cvscope/repo login
     <password just type enter>
   cvs -z3 -d :pserver:anonymous@cvs.lunatech.com:/home/cvscope/repo checkout

   perl Makefile.PL
   make
   make install    (su)

3) cd COPE/compat/MICO
   c++  -I. -I$MICO_HOME/include -I$MICO_HOME/include/ministl  -O   -fno-exceptions -fexceptions -O0 -I/usr/local/include  -c irior.cc -o irior.o
   c++  -I. -I$MICO_HOME/include -I$MICO_HOME/include/ministl  -O   -fno-exceptions -fexceptions -O0 -L$MICO_HOME/libs -L/usr/local/lib  -rdynamic irior.o -lmico2.3.0 -lreadline -lncurses -ldl -lm   -o irior

4) idl2perl -imp xmlBlaster.idl

5) cd ${XMLBLASTER_HOME}/testsuite/perl
   and follow the instructions in ${XMLBLASTER_HOME}/testsuite/perl/README

                         Tcl - Client
-----------------------------------------------------------------------
There are two ways for Tcl clients to access xmlBlaster:

a) Using Tcl clients with TclMico http://www.mico.org/
   tclmico-0.5c.tar.gz

    See directory ${XMLBLASTER_HOME}/testsuite/tcl
    for a demo client written in TCL and accessing the xmlBlaster server

b) Using tcljava (TclBlend/JACL) with an ordinary Java client
   This allows scripting of Java with Tcl, and embedding the
   Tcl interpreter (called jacl) into Java code.

 Here is a description how to use Tcl with MICO (a):
 First get a new Tcl release (e.g. 8.2) at http://www.scriptics.com
 or directly with cvs:
    export CVSROOT=:pserver:cvs@cvs.scriptics.com:/cvsroot
    cvs login   (passwd = cvs)

    cvs -z9 checkout tcl8.2
    cd tcl8.2/unix; autoconf; cd dltest ; autoconf ; cd ..
    ./configure --enable-shared --enable-threads --prefix=/www/tcl
    make
    make install
    cd /usr/bin; rm tclsh; ln -s /www/tcl/bin/tclsh8.2 tclsh

    cvs -z9 checkout tk8.2
    cd tk8.2/unix; autoconf;
    ./configure --enable-shared --prefix=/www/tk
    make
    make install
    cd /usr/X11R6/bin; rm wish; ln -s /www/tk/bin/wish8.2 wish
    cd /www/tcl/lib; ln -s /www/tk/lib/tk8.2 tk8.2

    tclmico-0.5c:
      export TCLMICO_HOME=/www/tclmico-0.5c
    cd ${TCLMICO_HOME}
    ./configure --enable-shared --with-tcl=/www/tcl
      make
      tclsh
         % load ./libtclmico[info sharedlibextension]
          % package require tclmico
          % corba::init -ORBIIOPAddr inet:localhost:4242

     cd /usr/local/lib
      ln -s libmico2.3.0.a libmico.a
      ln -s libmico2.3.0.so libmico.so

    cd ${TCLMICO_HOME}/demo/hello-1
    make all
      export PATH=$PATH:${TCLMICO_HOME}
      export LD_LIBRARY_PATH=${TCLMICO_HOME}:$LD_LIBRARY_PATH
      ./server -ORBIIOPAddr inet:localhost:8123
         ./client.tcl -ORBBindAddr inet:localhost:8123

Here a description to setup TclJava (b):
    cvs -z9 checkout tcljava
    cd tcljava/unix; autoconf;
    ./configure --with-jikes --with-jdk=/usr/local/jdk --with-tcl=/www/tcl8.2 --prefix=/www/tclJava


                           Python - Client
-------------------------------------------------------------------------
Python clients with Fnorb-1.01 http://www.dstc.edu.au/Products/Fnorb/
   fnorb-1.01.tar.gz
   cd src
   make -f Makefile.pre.in boot 
   FNORB_HOME=/Where/You/Put/Fnorb 
   export PATH=$PATH:$FNORB_HOME/Fnorb/script 
   export PYTHONPATH=$PYTHONPATH:$FNORB_HOME 

-------------------------------------------------------------------------
Manuel + Marcel, December 1999
