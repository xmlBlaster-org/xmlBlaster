#################################################################
#                                                               #
#             xmlBlaster 0.72 Millenium Edition                 #
#           Free Message Oriented Middleware (MOM)              #
#                 http://www.xmlBlaster.org                     #
#                                                               #  
#################################################################

Welcome!

We hope these hints are useful to get you running with xmlBlaster.
If you have problems, don't hesitate to contact the maintainers
through the mailing list (see http://www.xmlBlaster.org).


+--------------------+
| REQUIRED           |
+--------------------+

   - JDK 1.2 or later
   - a GNU 'make' utility recommended (if you want to rebuild xmlBlaster).
     For DOS/Windows, e.g. cygwin's make.
     Note that Windows nmake will not work properly with xmlBlaster Makefiles


+--------------------+
| INSTALLATION       |
+--------------------+

XmlBlaster comes compiled and ready to go.
Unpack the distribution to some location ($HOME/xmlBlaster is a good spot).

1. Extend your CLASSPATH and PATH environment variable. 

   a) If you use sh, ksh or bash, you may chose to source the
      $XMLBLASTER_HOME/.bashrc into your environment.

      export JDK_HOME=/usr/local/jdk
      export PATH=${JDK_HOME}/bin:$PATH
      export XMLBLASTER_HOME=${HOME}/xmlBlaster 
      . ${XMLBLASTER_HOME}/.bashrc

    This is the recommended way, since you will automatically
    source all enhancements of new xmlBlaster releases.

    Now the installation is finished.
    After a new login you are ready to start xmlBlaster (see below).


   b) If you didn't follow step a), here is how to setup
      your environment manually (examples for csh or tcsh):

     setenv JDK_HOME /usr/local/jdk
     setenv PATH ${JDK_HOME}/bin:$PATH

     setenv XMLBLASTER_HOME ${HOME}/xmlBlaster

     setenv JacORB_HOME ${XMLBLASTER_HOME}
     setenv JacORB_LIB ${JacORB_HOME}/lib

     setenv CLASSPATH ${XMLBLASTER_HOME}/classes:${CLASSPATH}
     setenv CLASSPATH ${XMLBLASTER_HOME}/src/java:${CLASSPATH}
     setenv CLASSPATH ${XMLBLASTER_HOME}/demo:${CLASSPATH}
     setenv CLASSPATH ${XMLBLASTER_HOME}/lib/omquery.jar:${CLASSPATH}
     setenv CLASSPATH ${XMLBLASTER_HOME}/lib/xtdash.jar:${CLASSPATH}
     setenv CLASSPATH ${XMLBLASTER_HOME}/lib/xml.jar:${CLASSPATH}
     setenv CLASSPATH ${XMLBLASTER_HOME}/lib/test.jar:${CLASSPATH}
     setenv CLASSPATH ${JacORB_LIB}/jacorb.jar:${CLASSPATH}:

    You can do this automatically from your startup shell script.
    After a new login you are ready to start the xmlBlaster (see below).


2. Notes on adjusting your environment setup.
   You may wish to change the default environment setup for example
   if you have JacORB installed already, or to include your MICO C++ Corba library.
   You may do this with setting following variables before you source
   ${XMLBLASTER_HOME}/.bashrc (Note this is optional):

      export JacORB_HOME=/usr/local/JacORB       (to use your own JacORB installation)
      export MICO_HOME=/usr/local/mico           (to use C++ demo clients with mico)
      export JIKES_HOME=/usr/local/jikes         (to use your jikes instead of javac)


+--------------------+
| RELATED LINKS      |
+--------------------+

   See ${XMLBLASTER_HOME}/lib/README
   See ${XMLBLASTER_HOME}/src/java/org/xmlBlaster/README



+--------------------+
| START XMLBLASTER   |
+--------------------+

You have three options to start the xmlBlaster-Server.
See the ${XMLBLASTER_HOME}/src/java/org/xmlBlaster/README file for more instructions.

1. xmlBlaster with builtin HTTP-Server on localhost, port=7609 which to pass the server IOR
   (This is the Default-Startup)

     jaco org.xmlBlaster.MainGUI

   and a testclient
    
     jaco javaclients.ClientGet



2. A variant using the xmlBlaster built in http server (localhost / 7609 is default)

     jaco org.xmlBlaster.MainGUI -iorPort 7609

   and a testclient

     jaco javaclients.ClientGet -iorHost localhost -iorPort 7609



3. A variant using a file to pass the server IOR:

      jaco org.xmlBlaster.MainGUI -iorFile /tmp/NS_Ref

   and a testclient

     jaco javaclients.ClientGet -iorFile /tmp/NS_Ref



4. Variant using a naming service and a local web server to publish the name service.
   Edit ${HOME}/.jacorb_properties accordingly e.g. jacorb.NameServerURL=http://localhost:80/NS_Ref):

     rm /tmp/NS_db;  ${JacORB_HOME}/bin/ns  /usr/local/httpd/htdocs/NS_Ref  /tmp/NS_db

     jaco org.xmlBlaster.MainGUI

     jaco javaclients.ClientXml



+--------------------+
| A DEMO CHAT CLIENT |
+--------------------+

Have a look at xmlBlaster/demo/javaclients/chat/SimpleChat.java
It´s a pretty basic kind of chat-application but worth a try.

Compile it (make all) and start it like that:

   jaco javaclients.chat.SimpleChat -name "Nickname"

where "Nickname" should be different for each client you start.
Don´t forget to start the server (jaco org.xmlBlaster.Main) first.



+--------------------+
| USING THE TESTSUITE|
+--------------------+

In the directory ${XMLBLASTER_HOME}/testsuite/org/xmlBlaster you will find
a number of Java based test clients to automatically test xmlBlaster.
   
The xmlBlaster test suite is based on the JUNIT 1.0 testsuite
from Kent Beck and Erich Gamma, see
   http://members.pingnet.ch/gamma/junit.htm

There is a GUI based and a command line based variant of the testsuite available.

To invoke the testsuite simply type:

   make test

Please read the
   ${XMLBLASTER_HOME}/testsuite/org/xmlBlaster/README
file for more informations.

You may also use the provided test clients to study the usage of xmlBlaster.


+--------------------+
| HOW TO COMPILE     |
+--------------------+

After you have set environment variables do a new login and type

   make all

in the XMLBLASTER_HOME directory. If you type make you get a usage 
of all make options.

Usage :

   make all       --> makes everything new
   make clean     --> deletes all classes
   make distclean --> deletes all classes/doc/jar
   make javadoc   --> call 'make javadoc' in xmlBlaster root dir
   make demo      --> makes everything new and starts a demo
   make test      --> makes everything new and starts a test scenario
   make jar       --> makes jar files of all packages into directory $(JAR_DIR)



#################################################################
#                                                               #
#                     xmlBlaster clients                        #
#                                                               #
#################################################################


                             C++ - client
-------------------------------------------------------------------------
C++ clients with MICO 2.3.0 (http://www.mico.org)

1) Install MICO
   ./configure --disable-mini-stl
    make
    make install

2) Set the environment variable to point to MICO (needed for the Makefile)
   export MICO_HOME=/usr/local/mico

3) cd ${XMLBLASTER_HOME}/testsuite/c++
   and follow the instructions in ${XMLBLASTER_HOME}/testsuite/c++/README

                            Perl - client
-------------------------------------------------------------------------
Perl clients with COPE 0.50_51 (http://www.lunatech.com/research/corba/cope/)
You need MICO first
AWARE: The current COPE Version 0.50_51 has problems with oneway methods
       which raise exceptions, so it will not work with xmlBlaster for the moment

1) get Exception-0.97_01A.tgz (ftp://ftp.matematik.su.se/pub/teke.)

   perl Makefile.PL
   make
   make install    (su)

2) get COPE
   cvs -z3 -d :pserver:anonymous@cvs.lunatech.com:/home/cvscope/repo login
     <password just type enter>
   cvs -z3 -d :pserver:anonymous@cvs.lunatech.com:/home/cvscope/repo checkout

   perl Makefile.PL
   make
   make install    (su)

3) cd COPE/compat/MICO
   c++  -I. -I$MICO_HOME/include -I$MICO_HOME/include/ministl  -O   -fno-exceptions -fexceptions -O0 -I/usr/local/include  -c irior.cc -o irior.o
   c++  -I. -I$MICO_HOME/include -I$MICO_HOME/include/ministl  -O   -fno-exceptions -fexceptions -O0 -L$MICO_HOME/libs -L/usr/local/lib  -rdynamic irior.o -lmico2.3.0 -lreadline -lncurses -ldl -lm   -o irior

4) idl2perl -imp xmlBlaster.idl

5) cd ${XMLBLASTER_HOME}/testsuite/perl
   and follow the instructions in ${XMLBLASTER_HOME}/testsuite/perl/README

                         Tcl - Client
-----------------------------------------------------------------------
There are two ways for Tcl clients to access xmlBlaster:

a) Using Tcl clients with TclMico http://www.mico.org/
   tclmico-0.5c.tar.gz

    See directory ${XMLBLASTER_HOME}/testsuite/tcl
    for a demo client written in TCL and accessing the xmlBlaster server

b) Using tcljava (TclBlend/JACL) with an ordinary Java client
   This allows scripting of Java with Tcl, and embedding the
   Tcl interpreter (called jacl) into Java code.

 Here is a description how to use Tcl with MICO (a):
 First get a new Tcl release (e.g. 8.2) at http://www.scriptics.com
 or directly with cvs:
    export CVSROOT=:pserver:cvs@cvs.scriptics.com:/cvsroot
    cvs login   (passwd = cvs)

    cvs -z9 checkout tcl8.2
    cd tcl8.2/unix; autoconf; cd dltest ; autoconf ; cd ..
    ./configure --enable-shared --enable-threads --prefix=/www/tcl
    make
    make install
    cd /usr/bin; rm tclsh; ln -s /www/tcl/bin/tclsh8.2 tclsh

    cvs -z9 checkout tk8.2
    cd tk8.2/unix; autoconf;
    ./configure --enable-shared --prefix=/www/tk
    make
    make install
    cd /usr/X11R6/bin; rm wish; ln -s /www/tk/bin/wish8.2 wish
    cd /www/tcl/lib; ln -s /www/tk/lib/tk8.2 tk8.2

    tclmico-0.5c:
      export TCLMICO_HOME=/www/tclmico-0.5c
    cd ${TCLMICO_HOME}
    ./configure --enable-shared --with-tcl=/www/tcl
      make
      tclsh
         % load ./libtclmico[info sharedlibextension]
          % package require tclmico
          % corba::init -ORBIIOPAddr inet:localhost:4242

     cd /usr/local/lib
      ln -s libmico2.3.0.a libmico.a
      ln -s libmico2.3.0.so libmico.so

    cd ${TCLMICO_HOME}/demo/hello-1
    make all
      export PATH=$PATH:${TCLMICO_HOME}
      export LD_LIBRARY_PATH=${TCLMICO_HOME}:$LD_LIBRARY_PATH
      ./server -ORBIIOPAddr inet:localhost:8123
         ./client.tcl -ORBBindAddr inet:localhost:8123

Here a description to setup TclJava (b):
    cvs -z9 checkout tcljava
    cd tcljava/unix; autoconf;
    ./configure --with-jikes --with-jdk=/usr/local/jdk --with-tcl=/usr/local/tcl8.2 --prefix=/usr/local/tclJava


                           Python - Client
-------------------------------------------------------------------------
Python clients with Fnorb-1.01 http://www.dstc.edu.au/Products/Fnorb/
   fnorb-1.01.tar.gz
   cd src
   make -f Makefile.pre.in boot 
   FNORB_HOME=/Where/You/Put/Fnorb 
   export PATH=$PATH:$FNORB_HOME/Fnorb/script 
   export PYTHONPATH=$PYTHONPATH:$FNORB_HOME 

-------------------------------------------------------------------------
Manuel + Marcel, Jan. 2000
