#------------------------------------------------------------------------------
# Name:      build.properties
# Project:   xmlBlaster.org
# Copyright: xmlBlaster.org, see xmlBlaster-LICENSE file
# Comment:   Property file which is read by 'ant' when compiling
#
# Place environment settings here, this is more portable than in
# your .bashrc or autoexec.bat
# build.xml loads this file explicitly
#
# Precedence:
#  1. Settings in your environment are strongest (command line settings)
#  2. Settings in ${user.home}/build.properties file (your personal settings)
#  3. Settings in this property file (default)
#  4. Fallback settings in build.xml are weakest (default)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Set this to classic for jdk1.2, modern for jdk1.3 and jikes if you have jikes.exe in the path
# Note - this is an Ant 'magic property' that is read by the javac task directly
build.compiler=modern
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C client library compilation
# For gcc on OSF suppress the stacktrace
# To enable change -U... variant below to -D...
gcc.enableStackTrace=-U_ENABLE_STACK_TRACE_
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C and/or C++ settings
# Adjust following settings to configure the logging library, the protocol
# plugins (CORBA,SOCKET), the persistent queue plugin, threading and XML parser
# See:
#  http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.c.html
#  http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.cpp.html
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#COMPILE_SOCKET_PLUGIN=0
#COMPILE_CORBA_PLUGIN=0
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Set to 1 if you want to use log4cplus instead of our primitive native logging
# We provide the complete source code with xmlBlaster.
# For configuration hints see http://log4cplus.sourceforge.net
#XMLBLASTER_COMPILE_LOG4CPLUS_PLUGIN=1
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Persistent queue support in C or C++ client library with http://www.sqlite.org
# You need to download SQLite yourself, see:
#  http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.c.queue.html
#  http://www.xmlBlaster.org/xmlBlaster/doc/requirements/client.cpp.queue.html
# - sqlite.include.dir is the path to "sqlite.h"
# - sqlite.lib.dir is the path to the shared library (dll) libsqlite.so (libsqlite.dll)
#
#XMLBLASTER_PERSISTENT_QUEUE=1
#sqlite.include.dir=/opt/sqlite-bin/include
#sqlite.lib.dir=/opt/sqlite-bin/lib
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Compile the SOCKET plugin only, without CORBA.
# Additionally choose a Xerces XML setting below.
# See http://www.xmlblaster.org/xmlBlaster/doc/requirements/client.cpp.socket.html
#COMPILE_SOCKET_PLUGIN = 1
#COMPILE_CORBA_PLUGIN  = 0
#corba.product         = NONE
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ STLpost is not tested yet:
#STL_HOME      = ${user.home}/STLport-4.5.1
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ UNIX example with ACE+TAO 1.3 and xerces 2.2 using g++ 3.2
#XMLCPP_HOME   = /opt/xerces-c-src2_2_0-bin
#XMLCPP_VER    =
#corba.product = TAO
#CORBACPP_HOME = /opt/ACE_wrappers/TAO
#CORBACPP_VER  =
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Unix/Linux example with single threaded mico 2.3.7 and xerces 2.2
#XMLCPP_HOME   = /usr/local/xerces-c
#XMLCPP_VER    =
#CORBACPP_HOME = /usr/local/mico
#corba.product = MICO
#CORBACPP_VER  = 2.3.7
#thread.impl   = OMNITHREAD
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Unix/Linux example with multi threaded mico 2.3.11 and xerces 2.2
#XMLCPP_HOME   = /usr/local/xerces-c
#XMLCPP_VER    =
#CORBACPP_HOME = /opt/mico
#corba.product = MICO
#CORBACPP_VER  = 2.3.11
#thread.impl   = OMNITHREAD
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ UNIX example with omniORB 4.0.1 and xerces 2.2 using g++ 3.3
#XMLCPP_HOME   = /opt/xerces-c-src2_2_0-bin
#XMLCPP_VER    =
#corba.product = OMNIORB
#CORBACPP_HOME = /opt/omniORB
#CORBACPP_VER  =
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ SunOS 5.8 example with Orbix 2000 2.0 and xerces 1.6 with OMNITHREAD
# compiled with Sun WorkShop 6 update 2 C++ 5.3 compiler
#use-CC        = 1
#XMLCPP_HOME   = /usr/local
#XMLCPP_VER    = 1_6_0
#CORBACPP_HOME = /opt/iona
#corba.product = ORBIX
#CORBACPP_VER  = orbix_art/2.0
#thread.impl   = OMNITHREAD
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ SunOS 5.8 sparc example with Orbix ASP 5.1 and xerces 1.6 with OMNITHREAD
# compiled with CC: Forte Developer 7 C++ 5.4 2002/03/09
#use-CC        = 1
#XMLCPP_HOME   = /opt/xerces-c1_6_0-SolForCC
#XMLCPP_VER    = 1_6_0
#CORBACPP_HOME = /opt/iona
#corba.product = ORBIX
#CORBACPP_VER  = asp/5.1
#thread.impl   = OMNITHREAD
#CXX           =
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Linux example with Orbix E2A ver. 5.1 and xerces 2.2.0 with OMNITHREAD
# compiled with gcc version 2.95.3 compiler
#use-CC        = 1
#XMLCPP_HOME   = /usr/local/xerces-c
#XMLCPP_VER    = 1_6_0
#CORBACPP_HOME = /opt/iona
#corba.product = ORBIX
#CORBACPP_VER  = asp/5.1
#thread.impl   = OMNITHREAD
#CXX           =
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Linux example with ORBACUS 4.1.0 and xerces 2.2.0 with OMNITHREAD
#XMLCPP_HOME   = /usr/local/xerces-c
#XMLCPP_VER    =
#CORBACPP_HOME = /usr/local/orbacus
#corba.product = ORBACUS
#CORBACPP_VER
#thread.impl   = OMNITHREAD
#CXX           =
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Windows example with ORBIX 2000 2.0 and xerces 2.2 using VC++ 7 with OMNITHREAD
# Note: This did NOT compile as ORBIX headers produced errors
#use-msvc      = 1
#XMLCPP_HOME   = C:/Dev/xerces-c2_2_0-win32
#XMLCPP_VER    = _2
#corba.product = ORBIX
#CORBACPP_HOME = C:/Dev/IONA
#CORBACPP_VER  = 5.1
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Windows example with ACE+TAO 1.3 and xerces 2.2 using VC++ 7
#use-msvc      = 1
#XMLCPP_HOME   = C:/Dev/xerces-c2_2_0-win32
#XMLCPP_VER    = _2
#corba.product = TAO
#CORBACPP_HOME = C:/Dev/ACE_wrappers/TAO
#idl.cmd       = C:/Dev/ACE_wrappers/bin/tao_idl.exe
#CORBACPP_VER  = 1.3
#cpp.debug     = true
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Windows example with mico 2.3.8 and xerces 2.2 using VC++ 7 with BOOST
#use-msvc      = 1
#XMLCPP_HOME   = C:/Dev/xerces-c2_2_0-win32
#XMLCPP_VER    = _2
#CORBACPP_HOME = C:/Dev/mico
#corba.product = MICO
#idl.cmd       = ${CORBACPP_HOME}/win32-bin/idl
#CORBACPP_VER  = 238
#thread.impl   = BOOST
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Usage help:
#
# corba.product = MICO
#
#  Note: The code supports one of OMNIORB, ORBACUS, MICO, TAO, ORBIX
#   Extend src/c++/client/protocol/corba/CompatibleCorba.h for another ORB
#   Extend build.xml to compile another ORB
#
# XMLCPP_VER    = 1_ or _2D     (Windows)
# XMLCPP_VER    = 1_7_0         (UNIX: and xerces smaller version 2)
# XMLCPP_VER    =               (UNIX: empty for xerces >= 2, e.g. for 2.2)
#   Windows e.g.  xerces-c_2.lib or xerces-c_2D.lib
#   Linux and Xerces below 2.0 e.g. libxerces-c1_7_0.so
#   Linux and Xerces >= 2.0 e.g.    libxerces-c.so.22.0
#
# thread.impl   = OMNITHREAD | BOOST
#   The default is to link with the omniORB multi threading library.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Note for Windows: You need to add the path to mico/bin/idl.exe
# to your PATH environment
#------------------------------------------------------------------------------

