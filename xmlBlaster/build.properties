#------------------------------------------------------------------------------
# Name:      build.properties
# Project:   xmlBlaster.org
# Copyright: xmlBlaster.org, see xmlBlaster-LICENSE file
# Comment:   Property file which is read by 'ant' when compiling
#
# Place environment settings here, this is more portable than in
# your .bashrc or autoexec.bat
# build.xml loads this file explicitly
#
# Precedence:
#  1. Settings in your environment are strongest (command line settings)
#  2. Settings in ${user.home}/build.properties file (your personal settings)
#  3. Settings in this property file (default)
#  4. Fallback settings in build.xml are weakest (default)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Set this to classic for jdk1.2, modern for jdk1.3 and jikes if you have jikes.exe in the path
# Note - this is an Ant 'magic property' that is read by the javac task directly
build.compiler=modern
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ settings
# Adjust these settings if you want to compile the C++ CORBA based client classes
# This allows accessing xmlBlaster from C++ via CORBA.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ STLpost is not tested yet:
#STL_HOME      = ${user.home}/STLport-4.5.1
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ UNIX example with ACE+TAO 1.3 and xerces 2.2 using g++ 3.2
#XMLCPP_HOME   = /opt/xerces-c-src2_2_0-bin
#XMLCPP_VER    = 
#corba.product = TAO
#CORBACPP_HOME = /opt/ACE_wrappers/TAO
#CORBACPP_VER  = 
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Unix/Linux example with mico 2.3.7 and xerces 2.2
#XMLCPP_HOME   = /usr/local/xerces-c
#XMLCPP_VER    = 
#CORBACPP_HOME = /usr/local/mico
#corba.product = MICO
#CORBACPP_VER  = 2.3.7
#thread.impl   = OMNITHREAD
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ SunOS 5.8 example with Orbix 2000 2.0 and xerces 1.6 with OMNITHREAD
# compiled with Sun WorkShop 6 update 2 C++ 5.3 compiler
#use-CC        = 1
#XMLCPP_HOME   = /usr/local
#XMLCPP_VER    = 1_6_0
#CORBACPP_HOME = /opt/iona
#corba.product = ORBIX
#CORBACPP_VER  = orbix_art/2.0
#thread.impl   = OMNITHREAD
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Linux example with Orbix E2A ver. 5.1 and xerces 2.2.0 with OMNITHREAD
# compiled with gcc version 2.95.3 compiler
#use-CC        = 1
#XMLCPP_HOME   = /usr/local/xerces-c
#XMLCPP_VER    = 1_6_0
#CORBACPP_HOME = /opt/iona
#corba.product = ORBIX
#CORBACPP_VER  = asp/5.1
#thread.impl   = OMNITHREAD
#CXX           =
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Windows example with ACE+TAO 1.3 and xerces 2.2 using VC++ 7
#use-msvc      = 1
#XMLCPP_HOME   = C:/xerces-c2_2_0-win32
#XMLCPP_VER    = _2
#corba.product = TAO
#CORBACPP_HOME = C:/ACE_wrappers/TAO
#idl.cmd       = C:/ACE_wrappers/bin/tao_idl.exe
#CORBACPP_VER  = 1.3
#cpp.debug     = true
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Windows example with mico 2.3.8 and xerces 2.2 using VC++ 7
#use-msvc      = 1
#XMLCPP_HOME   = C:/Dev/xerces-c2_2_0-win32
#XMLCPP_VER    = _2
#CORBACPP_HOME = C:/Dev/mico
#corba.product = MICO
#idl.cmd       = ${CORBACPP_HOME}/win32-bin/idl
#CORBACPP_VER  = 238
#thread.impl   = BOOST
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Usage help:
#
# corba.product = MICO   (Choose one of MICO, TAO, ORBIX)
#
#  Note: The code supports one of OMNIORB, ORBACUS, MICO, TAO, ORBIX
#   but the build.xml compile script currently only supports MICO, TAO or ORBIX
#   Extend src/c++/client/protocol/corba/CompatibleCorba.h for another ORB
#
# XMLCPP_VER    = 1_ or _2D     (Windows)
# XMLCPP_VER    = 1_7_0         (UNIX: and xerces smaller version 2)
# XMLCPP_VER    =               (UNIX: empty for xerces >= 2, e.g. for 2.2)
#   Windows e.g.  xerces-c_2.lib or xerces-c_2D.lib
#   Linux and Xerces below 2.0 e.g. libxerces-c1_7_0.so
#   Linux and Xerces >= 2.0 e.g.    libxerces-c.so.22.0
#
# thread.impl   = OMNITHREAD | BOOST
#   The default is to link with the omniORB multi threading library.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Note for Windows: You need to add the path to mico/bin/idl.exe
# to your PATH environment
#------------------------------------------------------------------------------

