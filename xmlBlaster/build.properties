#------------------------------------------------------------------------------
# Name:      build.properties
# Project:   xmlBlaster.org
# Copyright: xmlBlaster.org, see xmlBlaster-LICENSE file
# Comment:   Property file which is read by 'ant' when compiling
#
# Place environment settings here, this is more portable than in
# your .bashrc or autoexec.bat
# build.xml loads this file explicitly
#
# Precedence:
#  1. Settings in your environment are strongest (command line settings)
#  2. Settings in ${user.home}/build.properties file (your personal settings)
#  3. Settings in this property file (default)
#  4. Fallback settings in build.xml are weakest (default)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Set this to classic for jdk1.2, modern for jdk1.3 and jikes if you have jikes.exe in the path
# Note - this is an Ant 'magic property' that is read by the javac task directly
build.compiler=modern
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ settings
# Adjust these settings if you want to compile the C++ CORBA based client classes
# This allows accessing xmlBlaster from C++ via CORBA.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Don't change these unless you want another library than the internal boost.
#THREAD_SRC    = src/c++/libs/thread/src
#THREAD_INC    = src/c++
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# UNIX/LINUX example
#STL_HOME      = ${user.home}/STLport-4.5.1
#XMLCPP_HOME   = /usr/local
#XMLCPP_VER    = 1_7_0
#XMLCPP_VER    = 
# Choose one of OMNIORB, ORBACUS, MICO, TAO, ORBIX (extend src/c++/client/protocol/corba/CompatibleCorba.h for another ORB)
#corba.product = MICO
#CORBACPP_HOME = /usr/local/mico
#idl.cmd       = ${CORBACPP_HOME}/bin/idl
#CORBACPP_VER  = 2.3.7
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Windows example with ACE+TAO 1.3 and xerces 2.2 using VC++ 7
use-msvc      = 1
XMLCPP_HOME   = C:/Marcel/xerces-c2_2_0-win32
XMLCPP_VER    = _2
corba.product = TAO
CORBACPP_HOME = C:/Marcel/ACE_wrappers/TAO
idl.cmd       = C:/Marcel/ACE_wrappers/bin/tao_idl.exe
CORBACPP_VER  = 
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# C++ Windows example with mico 2.3.8 and xerces 2.2 using VC++ 7
#use-msvc      = 1
#XMLCPP_HOME   = C:/Marcel/xerces-c2_2_0-win32
#XMLCPP_VER    = _2
#CORBACPP_HOME = C:/Marcel/mico
#corba.product = MICO
#idl.cmd       = ${CORBACPP_HOME}/win32-bin/idl
#CORBACPP_VER  = 238
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Usage help:
#
# corba.product = MICO
#   Choose one of OMNIORB, ORBACUS, MICO, TAO, ORBIX
#   extend src/c++/client/protocol/corba/CompatibleCorba.h for another ORB
#
# XMLCPP_VER    = 1_7_0	 or "" or _2D
#   Windows e.g.  xerces-c_2.lib or xerces-c_2D.lib
#   Linux e.g.    libxerces-c.so.21 or libxerces-c1_7_0.so
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Note for Windows: You need to add the path to mico/bin/idl.exe
# to your PATH environment
#------------------------------------------------------------------------------

