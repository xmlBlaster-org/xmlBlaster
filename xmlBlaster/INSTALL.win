#################################################################
#                                                               #
#             xmlBlaster 0.75 Millenium Edition                 #
#           Free Message Oriented Middleware (MOM)              #
#                 http://www.xmlBlaster.org                     #
#                                                               #  
#################################################################

Welcome!

We hope these hints are useful to get you running with xmlBlaster.
If you have problems, don't hesitate to contact the maintainers
through the mailing list (see http://www.xmlBlaster.org).

If you do some own hacks, feel free to contribute them back,
so anybody benefits from your glorious invention.
This project is living from ideas and contributions.
If you are a Python hacker, why not contribute some Python
helper classes?
If you prefer Smalltalk, why not contributing your xmlBlaster
client solution?
But, if you are lazy, just use and enjoy xmlBlaster as delivered!


+--------------------+
| REQUIRED           |
+--------------------+

   - JDK 1.2 or later
   - a GNU 'make' utility recommended (if you want to rebuild xmlBlaster).
     For DOS/Windows, e.g. cygwin's make.
     Note that Windows nmake will not work properly with xmlBlaster Makefiles
	- or -
	You can use Ant.  See the build.xml file for more details.


+--------------------+
| INSTALLATION       |
+--------------------+

XmlBlaster comes compiled and ready to go.
Unpack the distribution to some location ($HOME/xmlBlaster is a good spot).

1. Extend your CLASSPATH and PATH environment variable. 

    It would be best to make a special setXmlBlasterEnv-batch file. Assuming
    the Java-JDK and xmlBlaster is installed on drive C.
    
    	C:\
    	 |
    	 +- jdk
    	 +- xmlBlaster
    	 
     set JDK_HOME=C:/jdk
     set PATH=%JDK_HOME%/bin;%PATH%
     set XMLBLASTER_HOME=C:/xmlBlaster
     set JacORB_HOME=%XMLBLASTER_HOME%
     set JacORB_LIB=%JacORB_HOME%/lib

     set CLASSPATH=%XMLBLASTER_HOME%/classes;%CLASSPATH%
     set CLASSPATH=%XMLBLASTER_HOME%/src/java;%CLASSPATH%
     set CLASSPATH=%XMLBLASTER_HOME%/demo;%CLASSPATH%
     set CLASSPATH=%XMLBLASTER_HOME%/lib/omquery.jar;%CLASSPATH%
     set CLASSPATH=%XMLBLASTER_HOME%/lib/xtdash.jar;%CLASSPATH%
     set CLASSPATH=%XMLBLASTER_HOME%/lib/xml.jar;%CLASSPATH%
     set CLASSPATH=%XMLBLASTER_HOME%/lib/servlet-2.0.jar;%CLASSPATH%
     set CLASSPATH=%XMLBLASTER_HOME%/lib/test.jar;%CLASSPATH%
     set CLASSPATH=%JacORB_LIB%/jacorb.jar;%CLASSPATH%
     
     If you use the release version of xmlBlaster you should add the xmlBlaster.jar
     to your classpath environment.
     REM set CLASSPATH=%XMLBLASTER_HOME%/lib/xmlBlaster.jar;%classpath%


    You can do also put all the above settings to your startup script.
    After a new login you are ready to start the xmlBlaster (see below).


2. Notes on adjusting your environment setup.
   You may wish to change the default environment setup for example
   if you have JacORB installed already, or to include your MICO C++ Corba library.
   You may do this with setting following variables before you source:

      set JacORB_HOME=C:\JacORB       (to use your own JacORB installation)
      set MICO_HOME=C:\mico           (to use C++ demo clients with mico)
      set JIKES_HOME=C:\jikes         (to use your jikes instead of javac)


+--------------------+
| RELATED LINKS      |
+--------------------+

   See %XMLBLASTER_HOME%/lib/README
   See %XMLBLASTER_HOME%/src/java/org/xmlBlaster/README



+--------------------+
| START XMLBLASTER   |
+--------------------+

You have three options to start the xmlBlaster-Server.

See the %XMLBLASTER_HOME%/src/java/org/xmlBlaster/README file for more
instructions.

One important note:
   You can't start xmlBlaster on JDK 1.2.x with the java command directly,
   since this would use the JDK internal ORB (which is outdated).
   You always have to use the little wrapper script 'jaco' which
   sets the -Xbootclasspath to use the JacORB CORBA implementation!

1. A variant using the xmlBlaster built in http server (localhost / 7609 is default)
   (This is the Default-Startup)

     jaco org.xmlBlaster.MainGUI

   and a testclient
    
     jaco javaclients.ClientGet



2. A variant using the xmlBlaster built in http server, specify the port to listen

   -> Not tested yet, see the general INSTALL file.


3. A variant using a file to pass the server IOR:

      jaco org.xmlBlaster.MainGUI -iorFile C:\tmp\Blaster_Ref

   and a testclient

     jaco javaclients.ClientGet -iorFile C:\tmp\Blaster_Ref



4. Variant using a naming service and a local web server to publish
   the name service IOR.

   -> Not tested yet, see the general INSTALL file.

+--------------------+
| A DEMO CHAT CLIENT |
+--------------------+

-> Not tested yet, see the general INSTALL file.


+--------------------+
| USING THE TESTSUITE|
+--------------------+

-> Not tested yet, see the general INSTALL file.

+--------------------+
| HOW TO COMPILE     |
+--------------------+

For the compilation on the Windows platform you need a proper make utility.
It works perfect with cygwin environment. You can download it over this site:
http://sourceware.cygnus.com/cygwin/mirrors.html.

Switch the makefile.include file to the windows version
   ren makefile.include makefile.include.ux
   ren makefile.include.win makefile.include

To compile you should set the following environment variables:
   SET MAKE_MODE=UNIX
      
Add the path to the cygwin directory to your PATH environment variable.
   SET PATH=%PATH%;<cygwin-installdir>\bin

After you have set environment variables you can build the hole tree with
the following command.

   make all

in the XMLBLASTER_HOME directory. If you type make you get a usage 
of all make options.

Usage :

   make all       --> makes everything new
   make clean     --> deletes all classes
   make distclean --> deletes all classes/doc/jar
   make javadoc   --> call 'make javadoc' in xmlBlaster root dir
   make demo      --> makes everything new and starts a demo
   make test      --> makes everything new and starts a test scenario
   make jar       --> makes jar files of all packages into directory $(JAR_DIR)



#################################################################
#                                                               #
#                     xmlBlaster clients                        #
#                                                               #
#################################################################

-> Not tested yet, see the general INSTALL file.
