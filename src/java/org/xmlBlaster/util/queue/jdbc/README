Here follows a short description on how to quickly install postgres on a 
linux.

Download and install postgres accordingly to the instructions you get from 
postgres (see http://www.postgresql.org/)

Once it is installed you can configure it by invoking the following:

initdb /tmp/postgres/data
(cp /var/lib/pgsql/data/pg_hba.conf /tmp/postgres    (edit host access))
postmaster -i -N 256 -B 512 -D /tmp/postgres/data > logfile 2>&1 & 
createdb test

The first line initializes postgres.

The second line starts the postgres server (important here is the -i flag).
You need to increase the allowed number of users and buffers (see options -N and -B)
for running the testsuite.

On the third line a db with the name
'test' is created. Note that the first and the third line need only to be 
invoked the first time you start postgres. 

(dropdb test     clears the db)

Configure in xmlBlaster.properties:
-----------------------------------------------------------------
Activate the persistence:
set the following variables:

persistence/msgUnitStore/defaultPlugin=CACHE,1.0
queue/subject/defaultPlugin=CACHE,1.0
queue/history/defaultPlugin=CACHE,1.0
queue/callback/defaultPlugin=CACHE,1.0
useTopicStore=true


JdbcDriver.drivers=sun.jdbc.odbc.JdbcOdbcDriver:ORG.as220.tinySQL.dbfFileDriver:org.postgresql.Driver
#JdbcDriver.drivers=oracle.jdbc.driver.OracleDriver
#JdbcDriver.drivers=sun.jdbc.odbc.JdbcOdbcDriver:ORG.as220.tinySQL.dbfFileDriver:oracle.jdbc.driver.OracleDriver:org.gjt.mm.mysql.Driver:org.postgresql.Driver,de.sag.jdbc.adabasd.ADriver:com.sybase.jdbc2.jdbc.SybDriver

# settings for postgres ...
JdbcDriver.drivers=org.postgresql.Driver
JdbcDriver.postgresql.mapping=string=text,longint=bigint,int=integer,boolean=char(1),tables=pg_tables

QueuePlugin[JDBC][1.0]=org.xmlBlaster.util.queue.jdbc.JdbcQueueCommonTablePlugin,\
                      url=jdbc:postgresql://localhost/test,\
                      user=postgres,\
                      password=,\
                      connectionPoolSize=1,\
                      connectionBusyTimeout=90000,\
                      maxWaitingThreads=300,\
                      tableNamePrefix=XB_,\
                      entriesTableName=ENTRIES,\
                      dbAdmin=true

and again the same for the StoragePlugin:

StoragePlugin[JDBC][1.0]=org.xmlBlaster.util.queue.jdbc.JdbcQueueCommonTablePlugin,\
                      url=jdbc:postgresql://localhost/test,\
                      user=postgres,\
                      password=,\
                      connectionPoolSize=1,\
                      connectionBusyTimeout=90000,\
                      maxWaitingThreads=300,\
                      tableNamePrefix=XB_,\
                      entriesTableName=ENTRIES,\
                      dbAdmin=true

# settings for oracle
JdbcDriver.drivers=oracle.jdbc.driver.OracleDriver
 
JdbcDriver.Oracle.mapping=string=VARCHAR(128),longint=NUMBER(19),int=NUMBER(10),blob=long raw,boolean=CHAR(1),tables=ALL_TABLES,tablename=TABLE_NAME
 
QueuePlugin[JDBC][1.0]=org.xmlBlaster.util.queue.jdbc.JdbcQueueCommonTablePlugin,\
                    url=jdbc:oracle:thin:@localhost:1521:xmlb,\
                    user=xmlblaster,\
                    password=secret,\
                    connectionPoolSize=1,\
                    connectionBusyTimeout=90000,\
                    maxWaitingThreads=300,\
                    tableNamePrefix=XB_,\
                    entriesTableName=ENTRIES,\
                    dbAdmin=true


-----------------------------------------------------------------

Cleanup the tables in the database:
 
Configure the xmlBlaster.properties file (the QueuePlugin[JDBC][1.0])

  java org.xmlBlaster.util.queue.jdbc.JdbcManagerCommonTable -wipeout.pluginType JDBC -wipeout.pluginVersion 1.0

and the application will delete the tables associated to the configuration specified with "JDBC/1.0"
   

Enjoy 
Michele



