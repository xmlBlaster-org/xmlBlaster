#-----------------------------------------------------------------------------
# log4cplus.properties  Configure the C++ xmlBlaster client library logging
#
# See:  http://log4cplus.sourceforge.net
# See:  http://logging.apache.org/log4j/docs/manual.html
#
# Levels are: ERROR -> WARNING -> INFO -> DEBUG -> TRACE
#
# You need to compile with
#   build -DXMLBLASTER_COMPILE_LOG4CPLUS_PLUGIN=1 cpp
# to have the log4cpp code added to xmlBlaster
#
# Copy this file to a nice location and configure the C++ client to find it:
#
#  HelloWorld2 -xmlBlaster/logging/configFileName $HOME/log4cplus.properties
#
# Formatting:
#  See http://logging.apache.org/log4j/docs/api/org/apache/log4j/PatternLayout.html
#  %D Timestamp of localtime of the logging event, ISO 8601 conforming (no 'T' between date and time)
#  %d Same as %D but UTC (gmtime) like "2007-10-23 10:30:52.414Z"
#      %q and %Q to get milliseconds will not work use qq and QQ instead
#  %p The priority of the logging event (INFO etc)
#  %t Used to output the name of the thread that generated the logging event.
#  %c Category of the logging event. For example, for the category name "a.b.c" the pattern %c{2} will output "b.c".
#  %l Location information of the caller which generated the logging event.
#  %m The application supplied message associated with the logging event.
#  %n Newline
#
# Default xmlBlaster format uses localtime (no GMT) and no spaces in first 7 columns
#  <date> <time> <level> <thread> <RL> <category> <codeLocation> bla bla bla
#  log4cplus.appender.STDOUT.layout.ConversionPattern=%D{%Y-%m-%d %H:%M:%S.qq} %-5p %t RL %-20c %l %m%n
#
# C++ example:
#  logManager.getLogFactory().getLog("org.xmlBlaster").info("HelloWorld2", "XmlBlaster C++ client 1.6.1");
#  2007-10-23 12:43:05.039 INFO  63040 RL org.xmlBlaster       HelloWorld2:-/ XmlBlaster C++ client 1.6.1
#  The RL is a place holder for 'RunLevel' to have same amount of columns as java
#  
# Java example:
#  2007-10-23 12:43:46.258  INFO   10-main RL0 org.xmlBlaster.engine.ServerScope initThis: Setting xmlBlaster instance name
#-----------------------------------------------------------------------------

log4cplus.rootLogger=INFO, STDOUT, R
log4cplus.logger.HelloWorld2=INFO

# Usage in code:
#  I_Log& log = logManager_.getLogFactory().getLog("org.xmlBlaster.util");
#  if (log_.call()) log_.call("SomeClass", " default constructor");
# So that xmlBlaster/src/c++/util/Log4cplus.cpp is not
# searching for its own "log4cplus.properties"

log4cplus.logger.org.xmlBlaster.util=INFO
#To debug SOCKET driver: HelloWorld2 -logLevel dump
#log4cplus.logger.org.xmlBlaster.client.protocol.socket=DEBUG
log4cplus.logger.filelogger=WARN, R
log4cplus.additivity.filelogger=FALSE

log4cplus.appender.STDOUT=log4cplus::ConsoleAppender
log4cplus.appender.STDOUT.layout=log4cplus::PatternLayout
log4cplus.appender.STDOUT.layout.ConversionPattern=%D{%Y-%m-%d %H:%M:%S.qq} %-5p %t RL %-20c %l %m%n

log4cplus.appender.R=log4cplus::RollingFileAppender
#Try to set "export ENV_VAR=XYZ"
log4cplus.appender.R.File=xmlBlasterCppClient_${ENV_VAR}.log
#log4cplus.appender.R.MaxFileSize=5MB
log4cplus.appender.R.MaxFileSize=500KB
log4cplus.appender.R.MaxBackupIndex=5
#log4cplus.appender.R.layout=log4cplus::TTCCLayout
log4cplus.appender.STDOUT.layout=log4cplus::PatternLayout
log4cplus.appender.STDOUT.layout.ConversionPattern=%D{%Y-%m-%d %H:%M:%S.qq} %-5p %t RL %-20c %l %m%n

